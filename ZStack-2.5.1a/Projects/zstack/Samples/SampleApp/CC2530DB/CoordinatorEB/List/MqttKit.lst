###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               04/Sep/2021  12:32:02
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c
#    Command line       =  
#        -f C:\Users\OY\AppData\Local\Temp\EWC751.tmp
#        (C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFF1
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\MqttKit.lst
#    Object file        =  
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\MqttKit.r51
#
###############################################################################

C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c
      1          /**
      2          	************************************************************
      3          	************************************************************
      4          	************************************************************
      5          	*	文件名： 	MqttKit.c
      6          	*
      7          	*	作者： 		
      8          	*
      9          	*	日期： 		2018-04-27
     10          	*
     11          	*	版本： 		V1.4
     12          	*
     13          	*	说明： 		MQTT协议
     14          	*
     15          	*	修改记录：	V1.1：解决MQTT_PacketSubscribe订阅不为2个topic
     16          	*						个数时协议错误的bug
     17          	*				V1.2：修复MQTT_PacketCmdResp的bug
     18          	*				V1.3：将strncpy替换为memcpy，解决潜在bug
     19          	*				V1.4：修复	MQTT_PacketPublishAck
     20          	*							MQTT_PacketPublishRel
     21          	*							函数封包错误的bug
     22          	*				V1.5：增加	MQTT_UnPacketCmd
     23          	*							MQTT_UnPacketPublish
     24          	*							接口对消息内容长度的提取参数
     25          	************************************************************
     26          	************************************************************
     27          	************************************************************
     28          **/
     29          
     30          //协议头文件
     31          #include "MqttKit.h"
     32          #include "mqtt.h"
     33          
     34          //C库
     35          #include <string.h>
     36          #include "hal_led.h"
     37          
     38          #define CMD_TOPIC_PREFIX		"$creq"
     39          
     40          
     41          //==========================================================
     42          //	函数名称：	EDP_NewBuffer
     43          //
     44          //	函数功能：	申请内存
     45          //
     46          //	入口参数：	edpPacket：包结构体
     47          //				size：大小
     48          //
     49          //	返回参数：	无
     50          //
     51          //	说明：		1.可使用动态分配来分配内存
     52          //				2.可使用局部或全局数组来指定内存
     53          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     54          void MQTT_NewBuffer(MQTT_PACKET_STRUCTURE *mqttPacket, uint32 size)
   \                     MQTT_NewBuffer:
     55          {	
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
     56          	uint32 i = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   \   000008   75..00       MOV       ?V5,#0x0
   \   00000B   75..00       MOV       ?V6,#0x0
   \   00000E   75..00       MOV       ?V7,#0x0
     57          
     58          	mqttPacket->_memFlag = MEM_FLAG_STATIC;
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   7402         MOV       A,#0x2
   \   000021   F0           MOVX      @DPTR,A
     59          	
     60          	for(i = 0; i < mqttPacket->_size; i++)
   \   000022   8013         SJMP      ??MQTT_NewBuffer_0
     61          		mqttPacket->_data[i] = 0;
   \                     ??MQTT_NewBuffer_1:
   \   000024   85....       MOV       ?V0,?V4
   \   000027   85....       MOV       ?V1,?V5
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000031   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000034   12....       LCALL     ?L_ADD_X
   \                     ??MQTT_NewBuffer_0:
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   78..         MOV       R0,#?V4
   \   000043   12....       LCALL     ?UL_GE_X
   \   000046   50DC         JNC       ??MQTT_NewBuffer_1
     62          	
     63          	mqttPacket->_len = 0;
   \   000048   8A82         MOV       DPL,R2
   \   00004A   8B83         MOV       DPH,R3
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   12....       LCALL     ??Subroutine103_0 & 0xFFFF
     64          	
     65          	if(mqttPacket->_size < size)
   \                     ??CrossCallReturnLabel_362:
   \   000051   7410         MOV       A,#0x10
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?L_MOV_X
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?UL_GT_X
   \   00006A   5008         JNC       ??MQTT_NewBuffer_2
     66          		mqttPacket->_data = NULL;
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   E4           CLR       A
   \   000071   F0           MOVX      @DPTR,A
   \   000072   A3           INC       DPTR
   \   000073   F0           MOVX      @DPTR,A
     67          }
   \                     ??MQTT_NewBuffer_2:
   \   000074   02....       LJMP      ??Subroutine96_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   12....       LCALL     ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#__Constant_1
   \   000004   78..         MOV       R0,#?V4
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   25..         ADD       A,?V0
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   35..         ADDC      A,?V1
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   E4           CLR       A
   \   000001                REQUIRE ??Subroutine104_0
   \   000001                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET
     68          
     69          //==========================================================
     70          //	函数名称：	MQTT_DeleteBuffer
     71          //
     72          //	函数功能：	释放数据内存
     73          //
     74          //	入口参数：	edpPacket：包结构体
     75          //
     76          //	返回参数：	无
     77          //
     78          //	说明：		
     79          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     80          void MQTT_DeleteBuffer(MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_DeleteBuffer:
     81          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     82          	mqttPacket->_data = NULL;
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E4           CLR       A
   \   000009   12....       LCALL     ?Subroutine64 & 0xFFFF
     83          	mqttPacket->_len = 0;
   \                     ??CrossCallReturnLabel_149:
   \   00000C   12....       LCALL     ?Subroutine8 & 0xFFFF
     84          	mqttPacket->_size = 0;
   \                     ??CrossCallReturnLabel_4:
   \   00000F   12....       LCALL     ?Subroutine8 & 0xFFFF
     85          	mqttPacket->_memFlag = MEM_FLAG_NULL;
   \                     ??CrossCallReturnLabel_5:
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
     86          
     87          }
   \   000017   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
     88          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     89          int32 MQTT_DumpLength(size_t len, uint8 *buf)
   \                     MQTT_DumpLength:
     90          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
     91          	
     92          	int32 i = 0;
     93          	
     94          	for(i = 1; i <= 4; ++i)
   \   000009   75..01       MOV       ?V0,#0x1
   \   00000C   75..00       MOV       ?V1,#0x0
   \   00000F   75..00       MOV       ?V2,#0x0
   \   000012   75..00       MOV       ?V3,#0x0
     95          	{
     96          		*buf = len % 128;
   \                     ??MQTT_DumpLength_0:
   \   000015   EE           MOV       A,R6
   \   000016   547F         ANL       A,#0x7f
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   F0           MOVX      @DPTR,A
     97          		len >>= 7;
   \   00001D   8E..         MOV       ?V4,R6
   \   00001F   8F..         MOV       ?V5,R7
   \   000021   7407         MOV       A,#0x7
   \   000023   78..         MOV       R0,#?V4
   \   000025   12....       LCALL     ?US_SHR
   \   000028   AE..         MOV       R6,?V4
   \   00002A   AF..         MOV       R7,?V5
     98          		if(len > 0)
   \   00002C   EE           MOV       A,R6
   \   00002D   4F           ORL       A,R7
   \   00002E   6026         JZ        ??MQTT_DumpLength_1
     99          		{
    100          			*buf |= 128;
   \   000030   E0           MOVX      A,@DPTR
   \   000031   D2E7         SETB      0xE0 /* A   */.7
   \   000033   F0           MOVX      @DPTR,A
    101          			++buf;
   \   000034   A3           INC       DPTR
   \   000035   AC82         MOV       R4,DPL
   \   000037   AD83         MOV       R5,DPH
    102          		}
   \   000039   90....       MOV       DPTR,#__Constant_1
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?L_ADD_X
   \   000041   90....       MOV       DPTR,#__Constant_5
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?SL_GE_X
   \   000049   50CA         JNC       ??MQTT_DumpLength_0
    103          		else
    104          		{
    105          			return i;
    106          		}
    107          	}
    108          
    109          	return -1;
   \   00004B   7AFF         MOV       R2,#-0x1
   \   00004D   7BFF         MOV       R3,#-0x1
   \   00004F   7CFF         MOV       R4,#-0x1
   \   000051   7DFF         MOV       R5,#-0x1
   \                     ??MQTT_DumpLength_2:
   \   000053   02....       LJMP      ??Subroutine107_0 & 0xFFFF
   \                     ??MQTT_DumpLength_1:
   \   000056   AA..         MOV       R2,?V0
   \   000058   AB..         MOV       R3,?V1
   \   00005A   AC..         MOV       R4,?V2
   \   00005C   AD..         MOV       R5,?V3
   \   00005E   80F3         SJMP      ??MQTT_DumpLength_2
    110          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    111          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    112          int32 MQTT_ReadLength(const uint8 *stream, int32 size, uint32 *len)
   \                     MQTT_ReadLength:
    113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    114          	
    115          	int32 i;
    116          	const uint8 *in = stream;
    117          	uint32 multiplier = 1;
   \   00000E   75..01       MOV       ?V0,#0x1
   \   000011   75..00       MOV       ?V1,#0x0
   \   000014   75..00       MOV       ?V2,#0x0
   \   000017   75..00       MOV       ?V3,#0x0
    118          
    119          	*len = 0;
   \   00001A   8C82         MOV       DPL,R4
   \   00001C   8D83         MOV       DPH,R5
   \   00001E   12....       LCALL     ??Subroutine103_0 & 0xFFFF
    120          	for(i = 0; i < size; ++i)
   \                     ??CrossCallReturnLabel_363:
   \   000021   85..82       MOV       DPL,?XSP + 0
   \   000024   85..83       MOV       DPH,?XSP + 1
   \   000027   12....       LCALL     ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   00002A   8013         SJMP      ??MQTT_ReadLength_0
   \                     ??MQTT_ReadLength_1:
   \   00002C   90....       MOV       DPTR,#__Constant_1
   \   00002F   78..         MOV       R0,#?V4
   \   000031   12....       LCALL     ?L_MOV_X
   \   000034   85..82       MOV       DPL,?XSP + 0
   \   000037   85..83       MOV       DPH,?XSP + 1
   \   00003A   78..         MOV       R0,#?V4
   \   00003C   12....       LCALL     ?L_ADD_TO_X
   \                     ??MQTT_ReadLength_0:
   \   00003F   7414         MOV       A,#0x14
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   78..         MOV       R0,#?V4
   \   000046   12....       LCALL     ?L_MOV_X
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   78..         MOV       R0,#?V4
   \   000051   12....       LCALL     ?SL_GT_X
   \   000054   506D         JNC       ??MQTT_ReadLength_2
    121          	{
    122          		*len += (in[i] & 0x7f) * multiplier;
   \   000056   85..82       MOV       DPL,?XSP + 0
   \   000059   85..83       MOV       DPH,?XSP + 1
   \   00005C   78..         MOV       R0,#?V4
   \   00005E   12....       LCALL     ?L_MOV_X
   \   000061   EE           MOV       A,R6
   \   000062   25..         ADD       A,?V4
   \   000064   FA           MOV       R2,A
   \   000065   EF           MOV       A,R7
   \   000066   35..         ADDC      A,?V5
   \   000068   FB           MOV       R3,A
   \   000069   8A82         MOV       DPL,R2
   \   00006B   F583         MOV       DPH,A
   \   00006D   E0           MOVX      A,@DPTR
   \   00006E   547F         ANL       A,#0x7f
   \   000070   F5..         MOV       ?V4,A
   \   000072   75..00       MOV       ?V5,#0x0
   \   000075   E4           CLR       A
   \   000076   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000079   12....       LCALL     ?L_MUL
   \   00007C   8C82         MOV       DPL,R4
   \   00007E   8D83         MOV       DPH,R5
   \   000080   78..         MOV       R0,#?V4
   \   000082   12....       LCALL     ?L_ADD_TO_X
    123          
    124          		if(!(in[i] & 0x80))
   \   000085   8A82         MOV       DPL,R2
   \   000087   8B83         MOV       DPH,R3
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   A2E7         MOV       C,0xE0 /* A   */.7
   \   00008C   401D         JC        ??MQTT_ReadLength_3
    125          		{
    126          			return i + 1;
   \   00008E   85..82       MOV       DPL,?XSP + 0
   \   000091   85..83       MOV       DPH,?XSP + 1
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?L_MOV_X
   \   000099   90....       MOV       DPTR,#__Constant_1
   \   00009C   78..         MOV       R0,#?V0
   \   00009E   12....       LCALL     ?L_ADD_X
   \   0000A1   AA..         MOV       R2,?V0
   \   0000A3   AB..         MOV       R3,?V1
   \   0000A5   AC..         MOV       R4,?V2
   \   0000A7   AD..         MOV       R5,?V3
   \   0000A9   8020         SJMP      ??MQTT_ReadLength_4
    127          		}
    128          
    129          		multiplier <<= 7;
   \                     ??MQTT_ReadLength_3:
   \   0000AB   7407         MOV       A,#0x7
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   12....       LCALL     ?L_SHL
    130          		if(multiplier >= 2097152)		//128 * *128 * *128
   \   0000B2   90....       MOV       DPTR,#__Constant_200000
   \   0000B5   78..         MOV       R0,#?V0
   \   0000B7   12....       LCALL     ?UL_GE_X
   \   0000BA   4003         JC        $+5
   \   0000BC   02....       LJMP      ??MQTT_ReadLength_1 & 0xFFFF
    131          		{
    132          			return -2;					// error, out of range
   \   0000BF   7AFE         MOV       R2,#-0x2
   \   0000C1   8002         SJMP      ??MQTT_ReadLength_5
    133          		}
    134          	}
    135          
    136          	return -1;							// not complete
   \                     ??MQTT_ReadLength_2:
   \   0000C3   7AFF         MOV       R2,#-0x1
   \                     ??MQTT_ReadLength_5:
   \   0000C5   7BFF         MOV       R3,#-0x1
   \   0000C7   7CFF         MOV       R4,#-0x1
   \   0000C9   7DFF         MOV       R5,#-0x1
   \                     ??MQTT_ReadLength_4:
   \   0000CB   7404         MOV       A,#0x4
   \   0000CD   02....       LJMP      ??Subroutine95_0 & 0xFFFF
    137          
    138          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   33           RLC       A
   \   000001   95E0         SUBB      A,0xE0 /* A   */
   \   000003   F5..         MOV       ?V6,A
   \   000005   F5..         MOV       ?V7,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   79..         MOV       R1,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine96_0
   \   000003                ; // Fall through to label ??Subroutine96_0
    139          
    140          //==========================================================
    141          //	函数名称：	MQTT_UnPacketRecv
    142          //
    143          //	函数功能：	MQTT数据接收类型判断
    144          //
    145          //	入口参数：	dataPtr：接收的数据指针
    146          //
    147          //	返回参数：	0-成功		其他-失败原因
    148          //
    149          //	说明：		
    150          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          uint8 MQTT_UnPacketRecv(uint8 *dataPtr)
   \                     MQTT_UnPacketRecv:
    152          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    153          	
    154          	uint8 status = 255;
    155          	uint8 type = dataPtr[0] >> 4;				//类型检查
   \   00000E   8A82         MOV       DPL,R2
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   C4           SWAP      A
   \   000014   540F         ANL       A,#0xf
   \   000016   F8           MOV       R0,A
    156          	
    157          	if(type < 1 || type > 14) //原本是>14，无法接收下发命令，修改为15
   \   000017   6066         JZ        ??MQTT_UnPacketRecv_0
   \   000019   C3           CLR       C
   \   00001A   940F         SUBB      A,#0xf
   \   00001C   5061         JNC       ??MQTT_UnPacketRecv_0
    158          		return status;
    159          	
    160          	if(type == MQTT_PKT_PUBLISH) //3发布数据数据包
   \   00001E   7403         MOV       A,#0x3
   \   000020   68           XRL       A,R0
   \   000021   707A         JNZ       ??MQTT_UnPacketRecv_1
    161          	{
    162          		uint8 *msgPtr;
    163          		uint32 remain_len = 0;
   \   000023   12....       LCALL     ?Subroutine9 & 0xFFFF
    164                          
    165          		msgPtr = dataPtr + MQTT_ReadLength(dataPtr + 1, 4, &remain_len) + 1;
   \                     ??CrossCallReturnLabel_365:
   \   000026                ; Setup parameters for call to function MQTT_ReadLength
   \   000026   90....       MOV       DPTR,#__Constant_4
   \   000029   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00002C   7404         MOV       A,#0x4
   \   00002E   12....       LCALL     ?XSTACK_DISP102_8
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   A3           INC       DPTR
   \   000036   AA82         MOV       R2,DPL
   \   000038   AB83         MOV       R3,DPH
   \   00003A   12....       LCALL     `??MQTT_ReadLength::?relay`; Banked call to: MQTT_ReadLength
   \   00003D   7404         MOV       A,#0x4
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000042   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000045   AA82         MOV       R2,DPL
   \   000047   AB83         MOV       R3,DPH
    166          		
    167          		if(remain_len < 2 || dataPtr[0] & 0x01)					//retain
   \   000049   90....       MOV       DPTR,#__Constant_2
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?L_MOV_X
   \   000051   85..82       MOV       DPL,?XSP + 0
   \   000054   85..83       MOV       DPH,?XSP + 1
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?UL_GT_X
   \   00005C   4021         JC        ??MQTT_UnPacketRecv_0
   \   00005E   8E82         MOV       DPL,R6
   \   000060   8F83         MOV       DPH,R7
   \   000062   E0           MOVX      A,@DPTR
   \   000063   A2E0         MOV       C,0xE0 /* A   */.0
   \   000065   4018         JC        ??MQTT_UnPacketRecv_0
    168          			return 255;
    169          		
    170          		if(remain_len < ((uint16)msgPtr[0] << 8 | msgPtr[1]) + 2)
   \   000067   8A82         MOV       DPL,R2
   \   000069   8B83         MOV       DPH,R3
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F9           MOV       R1,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?UL_GT_X
   \   00007D   5004         JNC       ??MQTT_UnPacketRecv_2
    171          			return 255;
   \                     ??MQTT_UnPacketRecv_0:
   \   00007F   79FF         MOV       R1,#-0x1
   \   000081   801C         SJMP      ??MQTT_UnPacketRecv_3
    172          		
    173          		if(strstr((int8 *)msgPtr + 2, CMD_TOPIC_PREFIX) != NULL)	//如果是命令下发
                 		          ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char const *"
   \                     ??MQTT_UnPacketRecv_2:
   \   000083                ; Setup parameters for call to function strstr
   \   000083   7C..         MOV       R4,#`?<Constant "$creq">` & 0xff
   \   000085   7D..         MOV       R5,#(`?<Constant "$creq">` >> 8) & 0xff
   \   000087   EA           MOV       A,R2
   \   000088   2402         ADD       A,#0x2
   \   00008A   FA           MOV       R2,A
   \   00008B   5001         JNC       ??MQTT_UnPacketRecv_4
   \   00008D   0B           INC       R3
   \                     ??MQTT_UnPacketRecv_4:
   \   00008E   12....       LCALL     `??strstr::?relay`; Banked call to: strstr
   \   000091   EA           MOV       A,R2
   \   000092   4B           ORL       A,R3
   \   000093   6004         JZ        ??MQTT_UnPacketRecv_5
    174          		{
    175                            status = MQTT_PKT_CMD;
   \   000095   790F         MOV       R1,#0xf
   \   000097   8006         SJMP      ??MQTT_UnPacketRecv_3
    176                            //是命令下发则闪烁led3
    177          //                  HalLedBlink (HAL_LED_3, 5, 50, 500);
    178                          }
    179          		else
    180                          {
    181                            status = MQTT_PKT_PUBLISH;
   \                     ??MQTT_UnPacketRecv_5:
   \   000099   7903         MOV       R1,#0x3
   \   00009B   8002         SJMP      ??MQTT_UnPacketRecv_3
    182                          }
    183          	}
    184          	else
    185          		status = type;
   \                     ??MQTT_UnPacketRecv_1:
   \   00009D   E8           MOV       A,R0
   \   00009E   F9           MOV       R1,A
    186          	
    187          	return status;
   \                     ??MQTT_UnPacketRecv_3:
   \   00009F   7404         MOV       A,#0x4
   \   0000A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A4                REQUIRE ?Subroutine3
   \   0000A4                ; // Fall through to label ?Subroutine3
    188          
    189          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   8B..         MOV       ?V1,R3
   \   000002   EE           MOV       A,R6
   \   000003   2A           ADD       A,R2
   \   000004   F582         MOV       DPL,A
   \   000006   EF           MOV       A,R7
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   2402         ADD       A,#0x2
   \   000002   F5..         MOV       ?V0,A
   \   000004   E4           CLR       A
   \   000005   39           ADDC      A,R1
   \   000006   F5..         MOV       ?V1,A
   \   000008   E4           CLR       A
   \   000009   F5..         MOV       ?V2,A
   \   00000B   F5..         MOV       ?V3,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine103_0
   \   000006                ; // Fall through to label ??Subroutine103_0
    190          
    191          //==========================================================
    192          //	函数名称：	MQTT_PacketConnect
    193          //
    194          //	函数功能：	连接消息组包
    195          //
    196          //	入口参数：	user：用户名：产品ID
    197          //				password：密码：鉴权信息或apikey
    198          //				devid：设备ID
    199          //				cTime：连接保持时间
    200          //				clean_session：离线消息清除标志
    201          //				qos：重发标志
    202          //				will_topic：异常离线topic
    203          //				will_msg：异常离线消息
    204          //				will_retain：消息推送标志
    205          //				mqttPacket：包指针
    206          //
    207          //	返回参数：	0-成功		其他-失败
    208          //
    209          //	说明：		
    210          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          uint8 MQTT_PacketConnect(const int8 *user, const int8 *password, const int8 *devid,
   \                     MQTT_PacketConnect:
    212          						uint16 cTime, uint1 clean_session, uint1 qos,
    213          						const int8 *will_topic, const int8 *will_msg, int32 will_retain,
    214          						MQTT_PACKET_STRUCTURE *mqttPacket)
    215          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7405         MOV       A,#0x5
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   7407         MOV       A,#0x7
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E9           MOV       A,R1
   \   000024   F0           MOVX      @DPTR,A
    216          	
    217          	uint8 flags = 0;
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   E4           CLR       A
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   7418         MOV       A,#0x18
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V6,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F5..         MOV       ?V7,A
    218          	uint8 will_topic_len = 0;
    219          	uint16 total_len = 15;
    220          	int16 len = 0, devid_len = strlen(devid);
                 	                                  ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \   000038                ; Setup parameters for call to function strlen
   \   000038   AA..         MOV       R2,?V6
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   00003E   8A..         MOV       ?V4,R2
   \   000040   8B..         MOV       ?V5,R3
    221          	
    222          	if(!devid)
   \   000042   E5..         MOV       A,?V6
   \   000044   45..         ORL       A,?V7
   \   000046   7005         JNZ       ??MQTT_PacketConnect_0
    223          		return 1;
   \   000048   7901         MOV       R1,#0x1
   \   00004A   02....       LJMP      ??MQTT_PacketConnect_1 & 0xFFFF
    224          	
    225          	total_len += devid_len + 2;
   \                     ??MQTT_PacketConnect_0:
   \   00004D   EA           MOV       A,R2
   \   00004E   2411         ADD       A,#0x11
   \   000050   FE           MOV       R6,A
   \   000051   E4           CLR       A
   \   000052   35..         ADDC      A,?V5
   \   000054   FF           MOV       R7,A
    226          	
    227          	//断线后，是否清理离线消息：1-清理	0-不清理--------------------------------------------
    228          	if(clean_session)
   \   000055   7407         MOV       A,#0x7
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   6008         JZ        ??MQTT_PacketConnect_2
    229          	{
    230          		flags |= MQTT_CONNECT_CLEAN_SESSION;
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   7402         MOV       A,#0x2
   \   000064   F0           MOVX      @DPTR,A
    231          	}
    232          	
    233          	//异常掉线情况下，服务器发布的topic------------------------------------------------------
    234          	if(will_topic)
   \                     ??MQTT_PacketConnect_2:
   \   000065   741D         MOV       A,#0x1d
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   00006D   6029         JZ        ??MQTT_PacketConnect_3
    235          	{
    236          		flags |= MQTT_CONNECT_WILL_FLAG;
   \   00006F   7402         MOV       A,#0x2
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   E0           MOVX      A,@DPTR
   \   000075   D2E2         SETB      0xE0 /* A   */.2
   \   000077   F0           MOVX      @DPTR,A
    237          		will_topic_len = strlen(will_topic);
                 		                        ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \   000078                ; Setup parameters for call to function strlen
   \   000078   741D         MOV       A,#0x1d
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   12....       LCALL     ?Subroutine74 & 0xFFFF
    238          		total_len += 4 + will_topic_len + strlen(will_msg);
                 		                                         ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \                     ??CrossCallReturnLabel_167:
   \   000080   EA           MOV       A,R2
   \   000081   2404         ADD       A,#0x4
   \   000083   F5..         MOV       ?V0,A
   \   000085   E4           CLR       A
   \   000086   3400         ADDC      A,#0x0
   \   000088   F5..         MOV       ?V1,A
   \   00008A                ; Setup parameters for call to function strlen
   \   00008A   741F         MOV       A,#0x1f
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine37 & 0xFFFF
    239          	}
   \                     ??CrossCallReturnLabel_85:
   \   000092   EE           MOV       A,R6
   \   000093   28           ADD       A,R0
   \   000094   FE           MOV       R6,A
   \   000095   EF           MOV       A,R7
   \   000096   39           ADDC      A,R1
   \   000097   FF           MOV       R7,A
    240          	
    241          	//qos级别--主要用于PUBLISH（发布态）消息的，保证消息传递的次数-----------------------------
    242          	switch((unsigned char)qos)
   \                     ??MQTT_PacketConnect_3:
   \   000098   741C         MOV       A,#0x1c
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   6011         JZ        ??MQTT_PacketConnect_4
   \   0000A0   14           DEC       A
   \   0000A1   6005         JZ        ??MQTT_PacketConnect_5
   \   0000A3   14           DEC       A
   \   0000A4   603B         JZ        ??MQTT_PacketConnect_6
   \   0000A6   8043         SJMP      ??MQTT_PacketConnect_7
    243          	{
    244          		case MQTT_QOS_LEVEL0:
    245          			flags |= MQTT_CONNECT_WILL_QOS0;							//最多一次
    246          		break;
    247          		
    248          		case MQTT_QOS_LEVEL1:
    249          			flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_QOS1);	//最少一次
   \                     ??MQTT_PacketConnect_5:
   \   0000A8   7402         MOV       A,#0x2
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   440C         ORL       A,#0xc
   \                     ??MQTT_PacketConnect_8:
   \   0000B0   F0           MOVX      @DPTR,A
    250          		break;
    251          		
    252          		case MQTT_QOS_LEVEL2:
    253          			flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_QOS2);	//只有一次
    254          		break;
    255          		
    256          		default:
    257          		return 2;
    258          	}
    259          	
    260          	//主要用于PUBLISH(发布态)的消息，表示服务器要保留这次推送的信息，如果有新的订阅者出现，就把这消息推送给它。如果不设那么推送至当前订阅的就释放了
    261          	if(will_retain)
   \                     ??MQTT_PacketConnect_4:
   \   0000B1   7421         MOV       A,#0x21
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ?XLOAD_R0123
   \   0000B9   E8           MOV       A,R0
   \   0000BA   49           ORL       A,R1
   \   0000BB   4A           ORL       A,R2
   \   0000BC   4B           ORL       A,R3
   \   0000BD   6009         JZ        ??MQTT_PacketConnect_9
    262          	{
    263          		flags |= (MQTT_CONNECT_WILL_FLAG | MQTT_CONNECT_WILL_RETAIN);
   \   0000BF   7402         MOV       A,#0x2
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   4424         ORL       A,#0x24
   \   0000C7   F0           MOVX      @DPTR,A
    264          	}
    265          	
    266          	//账号为空 密码为空---------------------------------------------------------------------
    267          	if(!user || !password)
   \                     ??MQTT_PacketConnect_9:
   \   0000C8   7405         MOV       A,#0x5
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   0000D0   600A         JZ        ??MQTT_PacketConnect_10
   \   0000D2   7403         MOV       A,#0x3
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000DA   7014         JNZ       ??MQTT_PacketConnect_11
    268          	{
    269          		return 3;
   \                     ??MQTT_PacketConnect_10:
   \   0000DC   7903         MOV       R1,#0x3
   \   0000DE   02....       LJMP      ??MQTT_PacketConnect_1 & 0xFFFF
    270          	}
   \                     ??MQTT_PacketConnect_6:
   \   0000E1   7402         MOV       A,#0x2
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   4414         ORL       A,#0x14
   \   0000E9   80C5         SJMP      ??MQTT_PacketConnect_8
   \                     ??MQTT_PacketConnect_7:
   \   0000EB   7902         MOV       R1,#0x2
   \   0000ED   02....       LJMP      ??MQTT_PacketConnect_1 & 0xFFFF
    271          	flags |= MQTT_CONNECT_USER_NAME | MQTT_CONNECT_PASSORD;
   \                     ??MQTT_PacketConnect_11:
   \   0000F0   7402         MOV       A,#0x2
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   44C0         ORL       A,#0xc0
   \   0000F8   F0           MOVX      @DPTR,A
    272          	
    273          	total_len += strlen(user) + strlen(password) + 4;
                 	                    ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"

  	total_len += strlen(user) + strlen(password) + 4;
  	                                   ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",273  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   0000F9                ; Setup parameters for call to function strlen
   \   0000F9   7405         MOV       A,#0x5
   \   0000FB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FE   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000101                ; Setup parameters for call to function strlen
   \   000101   7403         MOV       A,#0x3
   \   000103   12....       LCALL     ?XSTACK_DISP0_8
   \   000106   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000109   E8           MOV       A,R0
   \   00010A   2404         ADD       A,#0x4
   \   00010C   F8           MOV       R0,A
   \   00010D   5001         JNC       ??MQTT_PacketConnect_12
   \   00010F   09           INC       R1
   \                     ??MQTT_PacketConnect_12:
   \   000110   EE           MOV       A,R6
   \   000111   28           ADD       A,R0
   \   000112   FE           MOV       R6,A
   \   000113   EF           MOV       A,R7
   \   000114   39           ADDC      A,R1
   \   000115   FF           MOV       R7,A
    274          	
    275          	//分配内存-----------------------------------------------------------------------------
    276          	MQTT_NewBuffer(mqttPacket, total_len);
   \   000116                ; Setup parameters for call to function MQTT_NewBuffer
   \   000116   8E..         MOV       ?V0,R6
   \   000118   F5..         MOV       ?V1,A
   \   00011A   E4           CLR       A
   \   00011B   F5..         MOV       ?V2,A
   \   00011D   F5..         MOV       ?V3,A
   \   00011F   78..         MOV       R0,#?V0
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000124   7429         MOV       A,#0x29
   \   000126   12....       LCALL     ?XSTACK_DISP0_8
   \   000129   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
    277          	if(mqttPacket->_data == NULL)
   \   00012F   7425         MOV       A,#0x25
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000137   7005         JNZ       ??MQTT_PacketConnect_13
    278          		return 4;
   \   000139   7904         MOV       R1,#0x4
   \   00013B   02....       LJMP      ??MQTT_PacketConnect_1 & 0xFFFF
    279          	
    280          	osal_memset(mqttPacket->_data, 0, total_len);
                 	^
Warning[Pe223]: function "osal_memset" declared implicitly
   \                     ??MQTT_PacketConnect_13:
   \   00013E                ; Setup parameters for call to function osal_memset
   \   00013E   78..         MOV       R0,#?V0
   \   000140   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000143   7C00         MOV       R4,#0x0
   \   000145   7D00         MOV       R5,#0x0
   \   000147   7427         MOV       A,#0x27
   \   000149   12....       LCALL     ?XSTACK_DISP0_8
   \   00014C   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00014F   FA           MOV       R2,A
   \   000150   A3           INC       DPTR
   \   000151   E0           MOVX      A,@DPTR
   \   000152   FB           MOV       R3,A
   \   000153   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000156   7402         MOV       A,#0x2
   \   000158   12....       LCALL     ?DEALLOC_XSTACK8
    281          	
    282          /*************************************固定头部***********************************************/
    283          	
    284          	//固定头部----------------------连接请求类型---------------------------------------------
    285          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_CONNECT << 4;
   \   00015B   7425         MOV       A,#0x25
   \   00015D   12....       LCALL     ?XSTACK_DISP0_8
   \   000160   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000163   12....       LCALL     ?L_MOV_X
   \   000166   7425         MOV       A,#0x25
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00016E   7410         MOV       A,#0x10
   \   000170   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000173   12....       LCALL     ?L_MOV_X
   \   000176   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000179   12....       LCALL     ?L_ADD_TO_X
    286          	
    287          	//固定头部----------------------剩余长度值-----------------------------------------------
    288          	len = MQTT_DumpLength(total_len - 5, mqttPacket->_data + mqttPacket->_len);
   \   00017C                ; Setup parameters for call to function MQTT_DumpLength
   \   00017C   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00017F   12....       LCALL     ?L_MOV_X
   \   000182   7425         MOV       A,#0x25
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00018A   25..         ADD       A,?V0
   \   00018C   FC           MOV       R4,A
   \   00018D   A3           INC       DPTR
   \   00018E   E0           MOVX      A,@DPTR
   \   00018F   35..         ADDC      A,?V1
   \   000191   FD           MOV       R5,A
   \   000192   EE           MOV       A,R6
   \   000193   24FB         ADD       A,#-0x5
   \   000195   FA           MOV       R2,A
   \   000196   EF           MOV       A,R7
   \   000197   34FF         ADDC      A,#-0x1
   \   000199   FB           MOV       R3,A
   \   00019A   12....       LCALL     ?Subroutine78 & 0xFFFF
    289          	if(len < 0)
   \                     ??CrossCallReturnLabel_175:
   \   00019D   7425         MOV       A,#0x25
   \   00019F   5009         JNC       ??MQTT_PacketConnect_14
    290          	{
    291          		MQTT_DeleteBuffer(mqttPacket);
   \   0001A1                ; Setup parameters for call to function MQTT_DeleteBuffer
   \   0001A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A4   12....       LCALL     ?Subroutine52 & 0xFFFF
    292          		return 5;
    293          	}
   \                     ??CrossCallReturnLabel_128:
   \   0001A7   02....       LJMP      ??MQTT_PacketConnect_1 & 0xFFFF
    294          	else
    295          		mqttPacket->_len += len;
   \                     ??MQTT_PacketConnect_14:
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0001B0   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0001B3   EB           MOV       A,R3
   \   0001B4   33           RLC       A
   \   0001B5   95E0         SUBB      A,0xE0 /* A   */
   \   0001B7   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0001BA   12....       LCALL     ?L_ADD_TO_X
    296          	
    297          /*************************************可变头部***********************************************/
    298          	
    299          	//可变头部----------------------协议名长度 和 协议名--------------------------------------
    300          	mqttPacket->_data[mqttPacket->_len++] = 0;
   \   0001BD   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   0001C0   12....       LCALL     ?L_MOV_X
   \   0001C3   7425         MOV       A,#0x25
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0001CB   12....       LCALL     ??Subroutine88_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   0001CE   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   0001D1   12....       LCALL     ?L_MOV_X
   \   0001D4   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0001D7   12....       LCALL     ?L_ADD_TO_X
    301          	mqttPacket->_data[mqttPacket->_len++] = 4;
   \   0001DA   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0001DD   12....       LCALL     ?L_MOV_X
   \   0001E0   7425         MOV       A,#0x25
   \   0001E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0001E8   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   0001EB   12....       LCALL     ?L_MOV_X
   \   0001EE   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0001F1   12....       LCALL     ?L_ADD_TO_X
    302          	mqttPacket->_data[mqttPacket->_len++] = 'M';
   \   0001F4   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0001F7   12....       LCALL     ?L_MOV_X
   \   0001FA   7425         MOV       A,#0x25
   \   0001FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FF   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000202   744D         MOV       A,#0x4d
   \   000204   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000207   12....       LCALL     ?L_MOV_X
   \   00020A   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00020D   12....       LCALL     ?L_ADD_TO_X
    303          	mqttPacket->_data[mqttPacket->_len++] = 'Q';
   \   000210   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000213   12....       LCALL     ?L_MOV_X
   \   000216   7425         MOV       A,#0x25
   \   000218   12....       LCALL     ?XSTACK_DISP0_8
   \   00021B   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00021E   7451         MOV       A,#0x51
   \   000220   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000223   12....       LCALL     ?L_MOV_X
   \   000226   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000229   12....       LCALL     ?L_ADD_TO_X
    304          	mqttPacket->_data[mqttPacket->_len++] = 'T';
   \   00022C   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00022F   12....       LCALL     ?L_MOV_X
   \   000232   7425         MOV       A,#0x25
   \   000234   12....       LCALL     ?XSTACK_DISP0_8
   \   000237   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00023A   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   00023D   12....       LCALL     ?L_MOV_X
   \   000240   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000243   12....       LCALL     ?L_ADD_TO_X
    305          	mqttPacket->_data[mqttPacket->_len++] = 'T';
   \   000246   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000249   12....       LCALL     ?L_MOV_X
   \   00024C   7425         MOV       A,#0x25
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000254   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000257   12....       LCALL     ?L_MOV_X
   \   00025A   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00025D   12....       LCALL     ?L_ADD_TO_X
    306          	
    307          	//可变头部----------------------protocol level 4-----------------------------------------
    308          	mqttPacket->_data[mqttPacket->_len++] = 4;
   \   000260   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000263   12....       LCALL     ?L_MOV_X
   \   000266   7425         MOV       A,#0x25
   \   000268   12....       LCALL     ?XSTACK_DISP0_8
   \   00026B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00026E   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000271   12....       LCALL     ?L_MOV_X
   \   000274   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000277   12....       LCALL     ?L_ADD_TO_X
    309          	
    310          	//可变头部----------------------连接标志(该函数开头处理的数据)-----------------------------
    311              mqttPacket->_data[mqttPacket->_len++] = flags;
   \   00027A   7402         MOV       A,#0x2
   \   00027C   12....       LCALL     ?XSTACK_DISP0_8
   \   00027F   E0           MOVX      A,@DPTR
   \   000280   C0E0         PUSH      A
   \   000282   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000285   12....       LCALL     ?L_MOV_X
   \   000288   7425         MOV       A,#0x25
   \   00028A   12....       LCALL     ?XSTACK_DISP0_8
   \   00028D   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000290   D0E0         POP       A
   \   000292   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000295   12....       LCALL     ?L_MOV_X
   \   000298   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   00029B   12....       LCALL     ?L_ADD_TO_X
   \   00029E   741A         MOV       A,#0x1a
   \   0002A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A3   E0           MOVX      A,@DPTR
   \   0002A4   FA           MOV       R2,A
   \   0002A5   A3           INC       DPTR
   \   0002A6   E0           MOVX      A,@DPTR
    312          	
    313          	//可变头部----------------------保持连接的时间(秒)----------------------------------------
    314          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(cTime);
   \   0002A7   C0E0         PUSH      A
   \   0002A9   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0002AC   12....       LCALL     ?L_MOV_X
   \   0002AF   7425         MOV       A,#0x25
   \   0002B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B4   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0002B7   D0E0         POP       A
   \   0002B9   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   0002BC   12....       LCALL     ?L_MOV_X
   \   0002BF   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0002C2   12....       LCALL     ?L_ADD_TO_X
    315          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(cTime);
   \   0002C5   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   0002C8   12....       LCALL     ?L_MOV_X
   \   0002CB   7425         MOV       A,#0x25
   \   0002CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D0   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0002D3   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   0002D6   12....       LCALL     ?L_MOV_X
   \   0002D9   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0002DC   12....       LCALL     ?L_ADD_TO_X
    316          	 
    317          /*************************************消息体************************************************/
    318          
    319          	//消息体----------------------------devid长度、devid-------------------------------------
    320          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(devid_len);
   \   0002DF   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0002E2   12....       LCALL     ?L_MOV_X
   \   0002E5   7425         MOV       A,#0x25
   \   0002E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EA   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0002ED   E5..         MOV       A,?V5
   \   0002EF   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   0002F2   12....       LCALL     ?L_MOV_X
   \   0002F5   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   0002F8   12....       LCALL     ?L_ADD_TO_X
    321          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(devid_len);
   \   0002FB   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   0002FE   12....       LCALL     ?L_MOV_X
   \   000301   7425         MOV       A,#0x25
   \   000303   12....       LCALL     ?XSTACK_DISP0_8
   \   000306   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000309   E5..         MOV       A,?V4
   \   00030B   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00030E   12....       LCALL     ?L_MOV_X
   \   000311   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000314   12....       LCALL     ?L_ADD_TO_X
    322          	
    323          	strncat((int8 *)mqttPacket->_data + mqttPacket->_len, devid, devid_len);
                 	        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  	strncat((int8 *)mqttPacket->_data + mqttPacket->_len, devid, devid_len);
  	                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",323  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   000317                ; Setup parameters for call to function strncat
   \   000317   78..         MOV       R0,#?V4
   \   000319   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00031C   AC..         MOV       R4,?V6
   \   00031E   AD..         MOV       R5,?V7
   \   000320   7402         MOV       A,#0x2
   \   000322   12....       LCALL     ?XSTACK_DISP0_8
   \   000325   12....       LCALL     ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000328   12....       LCALL     ?L_MOV_X
   \   00032B   7427         MOV       A,#0x27
   \   00032D   12....       LCALL     ?XSTACK_DISP0_8
   \   000330   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000333   12....       LCALL     ?DEALLOC_XSTACK8
    324          	mqttPacket->_len += devid_len;
   \   000336   E5..         MOV       A,?V5
   \   000338   33           RLC       A
   \   000339   95E0         SUBB      A,0xE0 /* A   */
   \   00033B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00033E   12....       LCALL     ?L_ADD_TO_X
    325          	
    326          	//消息体----------------------------will_flag 和 will_msg---------------------------------
    327          	if(flags & MQTT_CONNECT_WILL_FLAG)
   \   000341   7402         MOV       A,#0x2
   \   000343   12....       LCALL     ?XSTACK_DISP0_8
   \   000346   E0           MOVX      A,@DPTR
   \   000347   A2E2         MOV       C,0xE0 /* A   */.2
   \   000349   4003         JC        $+5
   \   00034B   02....       LJMP      ??MQTT_PacketConnect_15 & 0xFFFF
    328          	{
    329          		unsigned short mLen = 0;
    330          		
    331          		if(!will_msg)
   \   00034E   741F         MOV       A,#0x1f
   \   000350   12....       LCALL     ?XSTACK_DISP0_8
   \   000353   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000356   700C         JNZ       ??MQTT_PacketConnect_16
    332          			will_msg = "";
   \   000358   741F         MOV       A,#0x1f
   \   00035A   12....       LCALL     ?XSTACK_DISP0_8
   \   00035D   74..         MOV       A,#`?<Constant "">` & 0xff
   \   00035F   F0           MOVX      @DPTR,A
   \   000360   A3           INC       DPTR
   \   000361   74..         MOV       A,#(`?<Constant "">` >> 8) & 0xff
   \   000363   F0           MOVX      @DPTR,A
    333          		
    334          		mLen = strlen(will_topic);
                 		              ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \                     ??MQTT_PacketConnect_16:
   \   000364                ; Setup parameters for call to function strlen
   \   000364   741D         MOV       A,#0x1d
   \   000366   12....       LCALL     ?XSTACK_DISP0_8
   \   000369   12....       LCALL     ?Subroutine33 & 0xFFFF
    335          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(mLen);
   \                     ??CrossCallReturnLabel_67:
   \   00036C   7425         MOV       A,#0x25
   \   00036E   12....       LCALL     ?XSTACK_DISP0_8
   \   000371   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000374   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000377   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   00037A   12....       LCALL     ?L_MOV_X
   \   00037D   7425         MOV       A,#0x25
   \   00037F   12....       LCALL     ?XSTACK_DISP0_8
   \   000382   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000385   12....       LCALL     ?L_MOV_X
   \   000388   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00038B   12....       LCALL     ?L_ADD_TO_X
    336          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(mLen);
   \   00038E   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000391   12....       LCALL     ?L_MOV_X
   \   000394   7425         MOV       A,#0x25
   \   000396   12....       LCALL     ?XSTACK_DISP0_8
   \   000399   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00039C   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00039F   12....       LCALL     ?L_MOV_X
   \   0003A2   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0003A5   12....       LCALL     ?L_ADD_TO_X
    337          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, will_topic, mLen);
                 		        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, will_topic, mLen);
  		                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",337  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   0003A8                ; Setup parameters for call to function strncat
   \   0003A8   78..         MOV       R0,#?V0
   \   0003AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003AD   741F         MOV       A,#0x1f
   \   0003AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B2   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0003B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B8   12....       LCALL     ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0003BB   12....       LCALL     ?L_MOV_X
   \   0003BE   7427         MOV       A,#0x27
   \   0003C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C3   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0003C6   12....       LCALL     ?DEALLOC_XSTACK8
    338          		mqttPacket->_len += mLen;
   \   0003C9   E4           CLR       A
   \   0003CA   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0003CD   12....       LCALL     ?L_ADD_TO_X
    339          		
    340          		mLen = strlen(will_msg);
                 		              ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \   0003D0                ; Setup parameters for call to function strlen
   \   0003D0   741F         MOV       A,#0x1f
   \   0003D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D5   12....       LCALL     ?Subroutine33 & 0xFFFF
    341          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(mLen);
   \                     ??CrossCallReturnLabel_68:
   \   0003D8   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0003DB   12....       LCALL     ?L_MOV_X
   \   0003DE   7425         MOV       A,#0x25
   \   0003E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E3   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   0003E6   12....       LCALL     ?L_MOV_X
   \   0003E9   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0003EC   12....       LCALL     ?L_ADD_TO_X
    342          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(mLen);
   \   0003EF   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0003F2   12....       LCALL     ?L_MOV_X
   \   0003F5   7425         MOV       A,#0x25
   \   0003F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0003FA   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0003FD   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000400   12....       LCALL     ?L_MOV_X
   \   000403   12....       LCALL     ??Subroutine84_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000406   12....       LCALL     ?L_ADD_TO_X
    343          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, will_msg, mLen);
                 		        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, will_msg, mLen);
  		                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",343  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   000409                ; Setup parameters for call to function strncat
   \   000409   78..         MOV       R0,#?V0
   \   00040B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00040E   7421         MOV       A,#0x21
   \   000410   12....       LCALL     ?XSTACK_DISP0_8
   \   000413   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000416   12....       LCALL     ?XSTACK_DISP0_8
   \   000419   12....       LCALL     ??Subroutine85_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00041C   12....       LCALL     ?L_MOV_X
   \   00041F   7427         MOV       A,#0x27
   \   000421   12....       LCALL     ?XSTACK_DISP0_8
   \   000424   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000427   12....       LCALL     ?DEALLOC_XSTACK8
    344          		mqttPacket->_len += mLen;
   \   00042A   12....       LCALL     ??Subroutine86_0 & 0xFFFF
    345          	}
   \                     ??CrossCallReturnLabel_230:
   \   00042D   12....       LCALL     ?L_ADD_TO_X
    346          	
    347          	//消息体----------------------------use---------------------------------------------------
    348          	if(flags & MQTT_CONNECT_USER_NAME)
    349          	{
    350          		unsigned short user_len = strlen(user);
                 		                                 ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \                     ??MQTT_PacketConnect_15:
   \   000430                ; Setup parameters for call to function strlen
   \   000430   7405         MOV       A,#0x5
   \   000432   12....       LCALL     ?XSTACK_DISP0_8
   \   000435   12....       LCALL     ?Subroutine48 & 0xFFFF
    351          		
    352          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(user_len);
   \                     ??CrossCallReturnLabel_117:
   \   000438   7425         MOV       A,#0x25
   \   00043A   12....       LCALL     ?XSTACK_DISP0_8
   \   00043D   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000440   12....       LCALL     ?L_MOV_X
   \   000443   7425         MOV       A,#0x25
   \   000445   12....       LCALL     ?XSTACK_DISP0_8
   \   000448   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00044B   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   00044E   12....       LCALL     ?L_MOV_X
   \   000451   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000454   12....       LCALL     ?L_ADD_TO_X
    353          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(user_len);
   \   000457   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00045A   12....       LCALL     ?L_MOV_X
   \   00045D   7425         MOV       A,#0x25
   \   00045F   12....       LCALL     ?XSTACK_DISP0_8
   \   000462   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000465   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000468   12....       LCALL     ?L_MOV_X
   \   00046B   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00046E   12....       LCALL     ?L_ADD_TO_X
    354          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, user, user_len);
                 		        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, user, user_len);
  		                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",354  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   000471                ; Setup parameters for call to function strncat
   \   000471   78..         MOV       R0,#?V4
   \   000473   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000476   7407         MOV       A,#0x7
   \   000478   12....       LCALL     ?XSTACK_DISP0_8
   \   00047B   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00047E   12....       LCALL     ?XSTACK_DISP0_8
   \   000481   12....       LCALL     ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000484   12....       LCALL     ?L_MOV_X
   \   000487   7427         MOV       A,#0x27
   \   000489   12....       LCALL     ?XSTACK_DISP0_8
   \   00048C   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00048F   12....       LCALL     ?DEALLOC_XSTACK8
    355          		mqttPacket->_len += user_len;
   \   000492   E4           CLR       A
   \   000493   12....       LCALL     ?Subroutine12 & 0xFFFF
    356          	}
   \                     ??CrossCallReturnLabel_200:
   \   000496   12....       LCALL     ?L_ADD_TO_X
    357          
    358          	//消息体----------------------------password----------------------------------------------
    359          	if(flags & MQTT_CONNECT_PASSORD)
    360          	{
    361          		unsigned short psw_len = strlen(password);
                 		                                ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \   000499                ; Setup parameters for call to function strlen
   \   000499   7403         MOV       A,#0x3
   \   00049B   12....       LCALL     ?XSTACK_DISP0_8
   \   00049E   12....       LCALL     ?Subroutine48 & 0xFFFF
    362          		
    363          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(psw_len);
   \                     ??CrossCallReturnLabel_118:
   \   0004A1   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0004A4   12....       LCALL     ?L_MOV_X
   \   0004A7   7425         MOV       A,#0x25
   \   0004A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004AC   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0004AF   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   0004B2   12....       LCALL     ?L_MOV_X
   \   0004B5   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0004B8   12....       LCALL     ?L_ADD_TO_X
    364          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(psw_len);
   \   0004BB   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0004BE   12....       LCALL     ?L_MOV_X
   \   0004C1   7425         MOV       A,#0x25
   \   0004C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0004C6   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0004C9   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   0004CC   12....       LCALL     ?L_MOV_X
   \   0004CF   12....       LCALL     ??Subroutine86_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0004D2   12....       LCALL     ?L_ADD_TO_X
    365          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, password, psw_len);
                 		        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, password, psw_len);
  		                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",365  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   0004D5                ; Setup parameters for call to function strncat
   \   0004D5   78..         MOV       R0,#?V4
   \   0004D7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004DA   7405         MOV       A,#0x5
   \   0004DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0004DF   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0004E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0004E5   12....       LCALL     ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0004E8   12....       LCALL     ?L_MOV_X
   \   0004EB   7427         MOV       A,#0x27
   \   0004ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0004F0   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0004F3   12....       LCALL     ?DEALLOC_XSTACK8
    366          		mqttPacket->_len += psw_len;
   \   0004F6   12....       LCALL     ??Subroutine84_0 & 0xFFFF
    367          	}
   \                     ??CrossCallReturnLabel_198:
   \   0004F9   12....       LCALL     ?L_ADD_TO_X
    368          
    369          	return 0;
   \   0004FC   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketConnect_1:
   \   0004FE   02....       LJMP      ?Subroutine0 & 0xFFFF
    370          
    371          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   8A..         MOV       ?V4,R2
   \   000005   8B..         MOV       ?V5,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   7402         MOV       A,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000003   8B..         MOV       ?V3,R3
   \   000005   E5..         MOV       A,?V0
   \   000007   2A           ADD       A,R2
   \   000008   F8           MOV       R0,A
   \   000009   E5..         MOV       A,?V1
   \   00000B   35..         ADDC      A,?V3
   \   00000D   F9           MOV       R1,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000003   EB           MOV       A,R3
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   000003   7454         MOV       A,#0x54
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000003   EA           MOV       A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F5..         MOV       ?V6,A
   \   000002   F5..         MOV       ?V7,A
   \   000004                REQUIRE ??Subroutine84_0
   \   000004                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine85_0
   \   000006                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   78..         MOV       R0,#?V4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F5..         MOV       ?V2,A
   \   000002   F5..         MOV       ?V3,A
   \   000004                REQUIRE ??Subroutine86_0
   \   000004                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine87_0
   \   000006                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   E8           MOV       A,R0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   E9           MOV       A,R1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   85..82       MOV       DPL,?XSP + 0
   \   00000B   85..83       MOV       DPH,?XSP + 1
   \   00000E   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000011   78..         MOV       R0,#?V0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003   EA           MOV       A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine92_0
   \   000001                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine93_0
   \   000004                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003                REQUIRE ??Subroutine94_0
   \   000003                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003   12....       LCALL     `??MQTT_NewBuffer::?relay`; Banked call to: MQTT_NewBuffer
   \   000006   7404         MOV       A,#0x4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     `??MQTT_DumpLength::?relay`; Banked call to: MQTT_DumpLength
   \   000003   8A..         MOV       ?V0,R2
   \   000005   8B..         MOV       ?V1,R3
   \   000007   C3           CLR       C
   \   000008   EB           MOV       A,R3
   \   000009   9400         SUBB      A,#0x0
   \   00000B   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00000D   65D0         XRL       A,PSW
   \   00000F   33           RLC       A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   35..         ADDC      A,?V5
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   35..         ADDC      A,?V5
   \   000008   FB           MOV       R3,A
   \   000009   12....       LCALL     `??strncat::?relay`; Banked call to: strncat
   \   00000C   7402         MOV       A,#0x2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   25..         ADD       A,?V4
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7408         MOV       A,#0x8
   \   000002                REQUIRE ??Subroutine95_0
   \   000002                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   7905         MOV       R1,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   12....       LCALL     `??MQTT_DeleteBuffer::?relay`; Banked call to: MQTT_DeleteBuffer
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine97_0
   \   000002                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   25..         ADD       A,?V0
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   35..         ADDC      A,?V1
   \   00000B   FB           MOV       R3,A
   \   00000C   12....       LCALL     `??strncat::?relay`; Banked call to: strncat
   \   00000F   7402         MOV       A,#0x2
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#__Constant_1
   \   000004   78..         MOV       R0,#?V0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    372          
    373          //==========================================================
    374          //	函数名称：	MQTT_PacketDisConnect
    375          //
    376          //	函数功能：	断开连接消息组包
    377          //
    378          //	入口参数：	mqttPacket：包指针
    379          //
    380          //	返回参数：	0-成功		1-失败
    381          //
    382          //	说明：		
    383          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          uint1 MQTT_PacketDisConnect(MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketDisConnect:
    385          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    386          
    387          	MQTT_NewBuffer(mqttPacket, 2);
   \   000009                ; Setup parameters for call to function MQTT_NewBuffer
   \   000009   90....       MOV       DPTR,#__Constant_2
   \   00000C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00000F   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000012   12....       LCALL     ?DEALLOC_XSTACK8
    388          	if(mqttPacket->_data == NULL)
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00001C   7004         JNZ       ??MQTT_PacketDisConnect_0
    389          		return 1;
   \   00001E   7901         MOV       R1,#0x1
   \   000020   803B         SJMP      ??MQTT_PacketDisConnect_1
    390          	
    391          /*************************************固定头部***********************************************/
    392          	
    393          	//固定头部----------------------头部消息-------------------------------------------------
    394          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_DISCONNECT << 4;
   \                     ??MQTT_PacketDisConnect_0:
   \   000022   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000025   12....       LCALL     ?L_MOV_X
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   12....       LCALL     ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   00002F   74E0         MOV       A,#-0x20
   \   000031   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000034   12....       LCALL     ?L_MOV_X
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   78..         MOV       R0,#?V0
   \   00003D   12....       LCALL     ?L_ADD_TO_X
    395          	
    396          	//固定头部----------------------剩余长度值-----------------------------------------------
    397          	mqttPacket->_data[mqttPacket->_len++] = 0;
   \   000040   8A82         MOV       DPL,R2
   \   000042   8B83         MOV       DPH,R3
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?L_MOV_X
   \   000049   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00004C   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00004F   12....       LCALL     ?L_MOV_X
   \   000052   8A82         MOV       DPL,R2
   \   000054   8B83         MOV       DPH,R3
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?L_ADD_TO_X
    398          	
    399          	return 0;
   \   00005B   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketDisConnect_1:
   \   00005D   02....       LJMP      ?Subroutine3 & 0xFFFF
    400          
    401          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine88_0
   \   000004                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL     ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL     `??MQTT_NewBuffer::?relay`; Banked call to: MQTT_NewBuffer
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   8A82         MOV       DPL,R2
   \   000009   F583         MOV       DPH,A
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET
    402          
    403          //==========================================================
    404          //	函数名称：	MQTT_UnPacketConnectAck
    405          //
    406          //	函数功能：	连接消息解包
    407          //
    408          //	入口参数：	rev_data：接收的数据
    409          //
    410          //	返回参数：	1、255-失败		其他-平台的返回码
    411          //
    412          //	说明：		
    413          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    414          uint8 MQTT_UnPacketConnectAck(uint8 *rev_data)
   \                     MQTT_UnPacketConnectAck:
    415          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    416          
    417          	if(rev_data[1] != 2)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   6004         JZ        ??MQTT_UnPacketConnectAck_0
    418          		return 1;
   \   00000E   7901         MOV       R1,#0x1
   \   000010   801A         SJMP      ??MQTT_UnPacketConnectAck_1
    419          	
    420          	if(rev_data[2] == 0 || rev_data[2] == 1)
   \                     ??MQTT_UnPacketConnectAck_0:
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6004         JZ        ??MQTT_UnPacketConnectAck_2
   \   00001B   6401         XRL       A,#0x1
   \   00001D   700B         JNZ       ??MQTT_UnPacketConnectAck_3
    421          		return rev_data[3];
   \                     ??MQTT_UnPacketConnectAck_2:
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F9           MOV       R1,A
   \   000028   8002         SJMP      ??MQTT_UnPacketConnectAck_1
    422          	else
    423          		return 255;
   \                     ??MQTT_UnPacketConnectAck_3:
   \   00002A   79FF         MOV       R1,#-0x1
   \                     ??MQTT_UnPacketConnectAck_1:
   \   00002C   02....       LJMP      ?Subroutine1 & 0xFFFF
    424          
    425          }
    426          
    427          //==========================================================
    428          //	函数名称：	MQTT_PacketSaveData
    429          //
    430          //	函数功能：	数据点上传组包
    431          //
    432          //	入口参数：	devid：设备ID(可为空)
    433          //				send_buf：json缓存buf
    434          //				send_len：json总长
    435          //				type_bin_head：bin文件的消息头
    436          //				type：类型
    437          //
    438          //	返回参数：	0-成功		1-失败
    439          //
    440          //	说明：		
    441          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    442          uint1 MQTT_PacketSaveData(const int8 *devid, int16 send_len, int8 *type_bin_head, uint8 type, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketSaveData:
    443          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V6,R1
   \   00000B   7411         MOV       A,#0x11
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ?Subroutine49 & 0xFFFF
    444          
    445          	if(MQTT_PacketPublish(MQTT_PUBLISH_ID, "$dp", NULL, send_len + 3, MQTT_QOS_LEVEL1, 0, 1, mqttPacket) == 0)
   \                     ??CrossCallReturnLabel_119:
   \   000013                ; Setup parameters for call to function MQTT_PacketPublish
   \   000013   78..         MOV       R0,#?V4
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   90....       MOV       DPTR,#__Constant_1
   \   00001B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001E   90....       MOV       DPTR,#__Constant_0
   \   000021   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000024   EC           MOV       A,R4
   \   000025   2403         ADD       A,#0x3
   \   000027   F5..         MOV       ?V0,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F5..         MOV       ?V1,A
   \   00002D   33           RLC       A
   \   00002E   95E0         SUBB      A,0xE0 /* A   */
   \   000030   F5..         MOV       ?V2,A
   \   000032   F5..         MOV       ?V3,A
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000039   E4           CLR       A
   \   00003A   F5..         MOV       ?V0,A
   \   00003C   F5..         MOV       ?V1,A
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7901         MOV       R1,#0x1
   \   000045   7C..         MOV       R4,#`?<Constant "$dp">` & 0xff
   \   000047   7D..         MOV       R5,#(`?<Constant "$dp">` >> 8) & 0xff
   \   000049   7A0A         MOV       R2,#0xa
   \   00004B   7B00         MOV       R3,#0x0
   \   00004D   12....       LCALL     `??MQTT_PacketPublish::?relay`; Banked call to: MQTT_PacketPublish
   \   000050   7410         MOV       A,#0x10
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   E9           MOV       A,R1
   \   000056   7051         JNZ       ??MQTT_PacketSaveData_0
    446          	{
    447          		mqttPacket->_data[mqttPacket->_len++] = type;					//类型
   \   000058   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00005B   12....       LCALL     ?L_MOV_X
   \   00005E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000061   E5..         MOV       A,?V6
   \   000063   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000066   12....       LCALL     ?L_MOV_X
   \   000069   8A82         MOV       DPL,R2
   \   00006B   8B83         MOV       DPH,R3
   \   00006D   78..         MOV       R0,#?V0
   \   00006F   12....       LCALL     ?L_ADD_TO_X
    448          		
    449          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(send_len);
   \   000072   8A82         MOV       DPL,R2
   \   000074   8B83         MOV       DPH,R3
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?L_MOV_X
   \   00007B   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00007E   12....       LCALL     ?L_MOV_X
   \   000081   8A82         MOV       DPL,R2
   \   000083   8B83         MOV       DPH,R3
   \   000085   78..         MOV       R0,#?V0
   \   000087   12....       LCALL     ?L_ADD_TO_X
    450          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(send_len);
   \   00008A   8A82         MOV       DPL,R2
   \   00008C   8B83         MOV       DPH,R3
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?L_MOV_X
   \   000093   12....       LCALL     ?Subroutine19 & 0xFFFF
    451          	}
   \                     ??CrossCallReturnLabel_29:
   \   000096   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000099   12....       LCALL     ?L_MOV_X
   \   00009C   8A82         MOV       DPL,R2
   \   00009E   8B83         MOV       DPH,R3
   \   0000A0   78..         MOV       R0,#?V0
   \   0000A2   12....       LCALL     ?L_ADD_TO_X
    452          	else
    453          		return 1;
    454          	
    455          	return 0;
   \   0000A5   7900         MOV       R1,#0x0
   \   0000A7   8002         SJMP      ??MQTT_PacketSaveData_1
   \                     ??MQTT_PacketSaveData_0:
   \   0000A9   7901         MOV       R1,#0x1
   \                     ??MQTT_PacketSaveData_1:
   \   0000AB   7F07         MOV       R7,#0x7
   \   0000AD   02....       LJMP      ?BANKED_LEAVE_XDATA
    456          
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000009   EF           MOV       A,R7
   \   00000A                REQUIRE ??Subroutine98_0
   \   00000A                ; // Fall through to label ??Subroutine98_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine105_0
   \   000006                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E5..         MOV       A,?V4
   \   000002   2402         ADD       A,#0x2
   \   000004   FA           MOV       R2,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V5
   \   000008   FB           MOV       R3,A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   78..         MOV       R0,#?V0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000009   EE           MOV       A,R6
   \   00000A   22           RET
    458          
    459          //==========================================================
    460          //	函数名称：	MQTT_UnPacketCmd
    461          //
    462          //	函数功能：	命令下发解包
    463          //
    464          //	入口参数：	rev_data：接收的数据指针
    465          //				cmdid：cmdid-uuid
    466          //				req：命令
    467          //
    468          //	返回参数：	0-成功		其他-失败原因
    469          //
    470          //	说明：		
    471          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          uint8 MQTT_UnPacketCmd(uint8 *rev_data, int8 *cmdid, int8 *req, uint16 *req_len)
   \                     MQTT_UnPacketCmd:
    473          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
    474          
    475          	int8 *dataPtr = strchr((int8 *)rev_data + 6, '/');	//加6是跳过头信息
                 	                       ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char const *"

  	int8 *dataPtr = strchr((int8 *)rev_data + 6, '/');	//加6是跳过头信息
  	                ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",475  Warning[Pe144]: 
          a value of type "char *" cannot be used to initialize an entity of
          type "int8 *"
   \   000012                ; Setup parameters for call to function strchr
   \   000012   7C2F         MOV       R4,#0x2f
   \   000014   7D00         MOV       R5,#0x0
   \   000016   EA           MOV       A,R2
   \   000017   2406         ADD       A,#0x6
   \   000019   FA           MOV       R2,A
   \   00001A   E4           CLR       A
   \   00001B   35..         ADDC      A,?V3
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??strchr::?relay`; Banked call to: strchr
   \   000021   8B..         MOV       ?V5,R3
   \   000023   A9..         MOV       R1,?V5
    476          	
    477          	uint32 remain_len = 0;
   \   000025   12....       LCALL     ?Subroutine9 & 0xFFFF
    478          	
    479          	if(dataPtr == NULL)									//未找到'/'
   \                     ??CrossCallReturnLabel_366:
   \   000028   EA           MOV       A,R2
   \   000029   49           ORL       A,R1
   \   00002A   7005         JNZ       ??MQTT_UnPacketCmd_0
    480          		return 1;
   \   00002C   7901         MOV       R1,#0x1
   \   00002E   02....       LJMP      ??MQTT_UnPacketCmd_1 & 0xFFFF
    481          	dataPtr++;											//跳过'/'
   \                     ??MQTT_UnPacketCmd_0:
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   A3           INC       DPTR
   \   000036   AE82         MOV       R6,DPL
   \   000038   AF83         MOV       R7,DPH
    482          	
    483          	MQTT_ReadLength(rev_data + 1, 4, &remain_len);		//读取剩余字节
   \   00003A                ; Setup parameters for call to function MQTT_ReadLength
   \   00003A   90....       MOV       DPTR,#__Constant_4
   \   00003D   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?XSTACK_DISP102_8
   \   000045   85..82       MOV       DPL,?V2
   \   000048   85..83       MOV       DPH,?V3
   \   00004B   A3           INC       DPTR
   \   00004C   AA82         MOV       R2,DPL
   \   00004E   AB83         MOV       R3,DPH
   \   000050   12....       LCALL     `??MQTT_ReadLength::?relay`; Banked call to: MQTT_ReadLength
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?DEALLOC_XSTACK8
    484          	
    485          	//*cmdid = (int8 *)MQTT_MallocBuffer(37);				//cmdid固定36字节，多分配一个结束符的位置
    486          	if(cmdid == NULL)
   \   000058   E5..         MOV       A,?V0
   \   00005A   45..         ORL       A,?V1
   \   00005C   700C         JNZ       ??MQTT_UnPacketCmd_2
    487            {
    488              debug("UnPacket mem 11\r\n");
   \   00005E                ; Setup parameters for call to function debug
   \   00005E   7A..         MOV       R2,#`?<Constant "UnPacket mem 11\\r\\n">` & 0xff
   \   000060   7B..         MOV       R3,#(`?<Constant "UnPacket mem 11\\r\\n">` >> 8) & 0xff
   \   000062   12....       LCALL     `??debug::?relay`; Banked call to: debug
    489          		return 2;
   \   000065   7902         MOV       R1,#0x2
   \   000067   02....       LJMP      ??MQTT_UnPacketCmd_1 & 0xFFFF
    490            }
    491          	memset(cmdid, 0, 37);								//全部清零
   \                     ??MQTT_UnPacketCmd_2:
   \   00006A                ; Setup parameters for call to function memset
   \   00006A   75..25       MOV       ?V2,#0x25
   \   00006D   75..00       MOV       ?V3,#0x0
   \   000070   78..         MOV       R0,#?V2
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
    492          	memcpy(cmdid, (const int8 *)dataPtr, 36);			//复制cmdid
   \   00007B                ; Setup parameters for call to function memcpy
   \   00007B   75..24       MOV       ?V2,#0x24
   \   00007E   78..         MOV       R0,#?V2
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
    493          	dataPtr += 36;
   \   000089   EE           MOV       A,R6
   \   00008A   2424         ADD       A,#0x24
   \   00008C   FE           MOV       R6,A
   \   00008D   5001         JNC       ??MQTT_UnPacketCmd_3
   \   00008F   0F           INC       R7
   \                     ??MQTT_UnPacketCmd_3:
   \   000090   7414         MOV       A,#0x14
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   12....       LCALL     ?Subroutine49 & 0xFFFF
    494          	
    495          	*req_len = remain_len - 44;							//命令长度 = 剩余长度(remain_len) - 2 - 5($creq) - 1(\) - cmdid长度
   \                     ??CrossCallReturnLabel_120:
   \   000098   85..82       MOV       DPL,?XSP + 0
   \   00009B   85..83       MOV       DPH,?XSP + 1
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?L_MOV_X
   \   0000A3   E5..         MOV       A,?V0
   \   0000A5   24D4         ADD       A,#-0x2c
   \   0000A7   F8           MOV       R0,A
   \   0000A8   E5..         MOV       A,?V1
   \   0000AA   34FF         ADDC      A,#-0x1
   \   0000AC   12....       LCALL     ??Subroutine90_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0000AF   7412         MOV       A,#0x12
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   F5..         MOV       ?V0,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   E0           MOVX      A,@DPTR
   \   0000B9   F5..         MOV       ?V1,A
    496          	if(req == NULL || (*req_len>MAX_REQ_PAYLOAD_LEN))
   \   0000BB   E5..         MOV       A,?V0
   \   0000BD   45..         ORL       A,?V1
   \   0000BF   6005         JZ        ??MQTT_UnPacketCmd_4
   \   0000C1   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000C4   400B         JC        ??MQTT_UnPacketCmd_5
    497          	{
    498          		debug("UnPacket mem 22\r\n");
   \                     ??MQTT_UnPacketCmd_4:
   \   0000C6                ; Setup parameters for call to function debug
   \   0000C6   7A..         MOV       R2,#`?<Constant "UnPacket mem 22\\r\\n">` & 0xff
   \   0000C8   7B..         MOV       R3,#(`?<Constant "UnPacket mem 22\\r\\n">` >> 8) & 0xff
   \   0000CA   12....       LCALL     `??debug::?relay`; Banked call to: debug
    499          		return 3;
   \   0000CD   7903         MOV       R1,#0x3
   \   0000CF   802D         SJMP      ??MQTT_UnPacketCmd_1
    500          	}
    501                    
    502          	memset(req, 0, *req_len + 1);						//清零
   \                     ??MQTT_UnPacketCmd_5:
   \   0000D1                ; Setup parameters for call to function memset
   \   0000D1   85..82       MOV       DPL,?V4
   \   0000D4   85..83       MOV       DPH,?V5
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   2401         ADD       A,#0x1
   \   0000DA   F5..         MOV       ?V2,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   3400         ADDC      A,#0x0
   \   0000E0   F5..         MOV       ?V3,A
   \   0000E2   78..         MOV       R0,#?V2
   \   0000E4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E7   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   0000EA   12....       LCALL     ?DEALLOC_XSTACK8
    503          	memcpy(req, (const int8 *)dataPtr, *req_len);		//复制命令
   \   0000ED                ; Setup parameters for call to function memcpy
   \   0000ED   85..82       MOV       DPL,?V4
   \   0000F0   85..83       MOV       DPH,?V5
   \   0000F3   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000F6   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   0000F9   12....       LCALL     ?DEALLOC_XSTACK8
    504          	
    505          	return 0;
   \   0000FC   7900         MOV       R1,#0x0
   \                     ??MQTT_UnPacketCmd_1:
   \   0000FE   7404         MOV       A,#0x4
   \   000100   02....       LJMP      ?Subroutine2 & 0xFFFF
    506          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   AA..         MOV       R2,?V0
   \   000006   AB..         MOV       R3,?V1
   \   000008                REQUIRE ??Subroutine89_0
   \   000008                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   F9           MOV       R1,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007                REQUIRE ??Subroutine91_0
   \   000007                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   C3           CLR       C
   \   000007   E0           MOVX      A,@DPTR
   \   000008   9465         SUBB      A,#0x65
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   9400         SUBB      A,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   EE           MOV       A,R6
   \   000001   FC           MOV       R4,A
   \   000002   EF           MOV       A,R7
   \   000003   FD           MOV       R5,A
   \   000004   AA..         MOV       R2,?V0
   \   000006   AB..         MOV       R3,?V1
   \   000008                REQUIRE ??Subroutine100_0
   \   000008                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0
    507          
    508          //==========================================================
    509          //	函数名称：	MQTT_PacketCmdResp
    510          //
    511          //	函数功能：	命令回复组包
    512          //
    513          //	入口参数：	cmdid：cmdid
    514          //				req：命令
    515          //				mqttPacket：包指针
    516          //
    517          //	返回参数：	0-成功		1-失败
    518          //
    519          //	说明：		
    520          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    521          uint1 MQTT_PacketCmdResp(const int8 *cmdid, const int8 *req, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketCmdResp:
    522          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 50
   \   000005   74CE         MOV       A,#-0x32
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8C..         MOV       ?V4,R4
   \   00000C   8D..         MOV       ?V5,R5
    523          	
    524          	uint16 cmdid_len = strlen(cmdid);
                 	                          ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
    525          	_Bool status = 0;
   \   00000E   C2..         CLR       ?VB.0
    526            uint8 payload[50]={0};
   \   000010   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000013   AC..         MOV       R4,?XSP + 0
   \   000015   AD..         MOV       R5,?XSP + 1
   \   000017   7432         MOV       A,#0x32
   \   000019   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    527          	
    528            sprintf(payload, "$crsp/%s", cmdid);
                   ^
Warning[Pe223]: function "sprintf" declared implicitly
   \   00001C                ; Setup parameters for call to function sprintf
   \   00001C   8A..         MOV       ?V0,R2
   \   00001E   8B..         MOV       ?V1,R3
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000025   7C..         MOV       R4,#`?<Constant "$crsp/%s">` & 0xff
   \   000027   7D..         MOV       R5,#(`?<Constant "$crsp/%s">` >> 8) & 0xff
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?XSTACK_DISP101_8
   \   00002E   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
    529          
    530          	if(MQTT_PacketPublish(MQTT_PUBLISH_ID, payload, req, strlen(req), MQTT_QOS_LEVEL0, 0, 1, mqttPacket) == 0)
                 	                                                            ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"

  	if(MQTT_PacketPublish(MQTT_PUBLISH_ID, payload, req, strlen(req), MQTT_QOS_LEVEL0, 0, 1, mqttPacket) == 0)
  	                                       ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",530  Warning[Pe167]: 
          argument of type "uint8 *" is incompatible with parameter of type
          "int8 const *"
   \   000036                ; Setup parameters for call to function strlen
   \   000036   AA..         MOV       R2,?V4
   \   000038   AB..         MOV       R3,?V5
   \   00003A   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   00003D   8A..         MOV       ?V0,R2
   \   00003F   8B..         MOV       ?V1,R3
   \   000041                ; Setup parameters for call to function MQTT_PacketPublish
   \   000041   7440         MOV       A,#0x40
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000049   90....       MOV       DPTR,#__Constant_1
   \   00004C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004F   90....       MOV       DPTR,#__Constant_0
   \   000052   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000055   E4           CLR       A
   \   000056   F5..         MOV       ?V2,A
   \   000058   F5..         MOV       ?V3,A
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   7900         MOV       R1,#0x0
   \   000066   7410         MOV       A,#0x10
   \   000068   12....       LCALL     ?XSTACK_DISP102_8
   \   00006B   7A0A         MOV       R2,#0xa
   \   00006D   7B00         MOV       R3,#0x0
   \   00006F   12....       LCALL     `??MQTT_PacketPublish::?relay`; Banked call to: MQTT_PacketPublish
   \   000072   7410         MOV       A,#0x10
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   E9           MOV       A,R1
   \   000078   6002         JZ        ??MQTT_PacketCmdResp_0
    531          		status = 0;
    532          	else
    533          		status = 1;
   \   00007A   D2..         SETB      ?VB.0
    534          		
    535          	return status;
   \                     ??MQTT_PacketCmdResp_0:
   \   00007C   A2..         MOV       C,?VB.0
   \   00007E   E4           CLR       A
   \   00007F   33           RLC       A
   \   000080   F9           MOV       R1,A
   \   000081   7432         MOV       A,#0x32
   \   000083   02....       LJMP      ?Subroutine2 & 0xFFFF
    536          
    537          }
    538          
    539          //==========================================================
    540          //	函数名称：	MQTT_PacketSubscribe
    541          //
    542          //	函数功能：	Subscribe消息组包
    543          //
    544          //	入口参数：	pkt_id：pkt_id
    545          //				qos：消息重发次数
    546          //				topics：订阅的消息
    547          //				topics_cnt：订阅的消息个数
    548          //				mqttPacket：包指针
    549          //
    550          //	返回参数：	0-成功		其他-失败
    551          //
    552          //	说明：		
    553          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          uint8 MQTT_PacketSubscribe(uint16 pkt_id, enum MqttQosLevel qos, const int8 *topics[], uint8 topics_cnt, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketSubscribe:
    555          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   E9           MOV       A,R1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EC           MOV       A,R4
   \   000021   F0           MOVX      @DPTR,A
   \   000022   A3           INC       DPTR
   \   000023   ED           MOV       A,R5
   \   000024   12....       LCALL     ?Subroutine6 & 0xFFFF
    556          	
    557          	uint32 topic_len = 0, remain_len = 0;
    558          	int16 len = 0;
    559          	uint8 i = 0;
    560          	
    561          	if(pkt_id == 0)
   \                     ??CrossCallReturnLabel_0:
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   00002F   7020         JNZ       ??MQTT_PacketSubscribe_0
    562          		return 1;
   \   000031   7901         MOV       R1,#0x1
   \   000033   02....       LJMP      ??MQTT_PacketSubscribe_1 & 0xFFFF
    563          	
    564          	//计算topic长度-------------------------------------------------------------------------
    565          	for(; i < topics_cnt; i++)
    566          	{
    567          		if(topics[i] == NULL)
    568          			return 2;
    569          		
    570          		topic_len += strlen(topics[i]);
                 		                    ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \                     ??MQTT_PacketSubscribe_2:
   \   000036                ; Setup parameters for call to function strlen
   \   000036   85..82       MOV       DPL,?XSP + 0
   \   000039   85..83       MOV       DPH,?XSP + 1
   \   00003C   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000045   12....       LCALL     ?L_ADD
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   04           INC       A
   \   000050   F0           MOVX      @DPTR,A
   \                     ??MQTT_PacketSubscribe_0:
   \   000051   7418         MOV       A,#0x18
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000059   5013         JNC       ??MQTT_PacketSubscribe_3
   \   00005B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000064   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000067   70CD         JNZ       ??MQTT_PacketSubscribe_2
   \   000069   7902         MOV       R1,#0x2
   \   00006B   02....       LJMP      ??MQTT_PacketSubscribe_1 & 0xFFFF
    571          	}
    572          	
    573          	//2 bytes packet id + topic filter(2 bytes topic + topic length + 1 byte reserve)------
    574          	remain_len = 2 + 3 * topics_cnt + topic_len;
   \                     ??MQTT_PacketSubscribe_3:
   \   00006E   7418         MOV       A,#0x18
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E0           MOVX      A,@DPTR
   \   000074   75F003       MOV       B,#0x3
   \   000077   A4           MUL       AB
   \   000078   A9F0         MOV       R1,B
   \   00007A   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00007D   12....       LCALL     ?L_ADD
   \   000080   85....       MOV       ?V0,?V4
   \   000083   85....       MOV       ?V1,?V5
    575          	
    576          	//分配内存------------------------------------------------------------------------------
    577          	MQTT_NewBuffer(mqttPacket, remain_len + 5);
   \   000086                ; Setup parameters for call to function MQTT_NewBuffer
   \   000086   90....       MOV       DPTR,#__Constant_5
   \   000089   78..         MOV       R0,#?V4
   \   00008B   12....       LCALL     ?L_ADD_X
   \   00008E   78..         MOV       R0,#?V4
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000093   741D         MOV       A,#0x1d
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
    578          	if(mqttPacket->_data == NULL)
   \   00009E   7419         MOV       A,#0x19
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   0000A6   7005         JNZ       ??MQTT_PacketSubscribe_4
    579          		return 3;
   \   0000A8   7903         MOV       R1,#0x3
   \   0000AA   02....       LJMP      ??MQTT_PacketSubscribe_1 & 0xFFFF
    580          	
    581          /*************************************固定头部***********************************************/
    582          	
    583          	//固定头部----------------------头部消息-------------------------------------------------
    584          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_SUBSCRIBE << 4 | 0x02;
   \                     ??MQTT_PacketSubscribe_4:
   \   0000AD   7419         MOV       A,#0x19
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000B5   12....       LCALL     ?L_MOV_X
   \   0000B8   7419         MOV       A,#0x19
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000C0   7482         MOV       A,#-0x7e
   \   0000C2   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   0000C5   12....       LCALL     ?L_MOV_X
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   78..         MOV       R0,#?V4
   \   0000CE   12....       LCALL     ?L_ADD_TO_X
    585          	
    586          	//固定头部----------------------剩余长度值-----------------------------------------------
    587          	len = MQTT_DumpLength(remain_len, mqttPacket->_data + mqttPacket->_len);
   \   0000D1                ; Setup parameters for call to function MQTT_DumpLength
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   78..         MOV       R0,#?V4
   \   0000D7   12....       LCALL     ?L_MOV_X
   \   0000DA   7419         MOV       A,#0x19
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL     ?Subroutine21 & 0xFFFF
    588          	if(len < 0)
   \                     ??CrossCallReturnLabel_37:
   \   0000E2   7419         MOV       A,#0x19
   \   0000E4   5009         JNC       ??MQTT_PacketSubscribe_5
    589          	{
    590          		MQTT_DeleteBuffer(mqttPacket);
   \   0000E6                ; Setup parameters for call to function MQTT_DeleteBuffer
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ?Subroutine53 & 0xFFFF
    591          		return 4;
    592          	}
   \                     ??CrossCallReturnLabel_130:
   \   0000EC   02....       LJMP      ??MQTT_PacketSubscribe_1 & 0xFFFF
    593          	else
    594          		mqttPacket->_len += len;
   \                     ??MQTT_PacketSubscribe_5:
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000F5   12....       LCALL     ?L_ADD_TO_X
    595          	
    596          /*************************************payload***********************************************/
    597          	
    598          	//payload----------------------pkt_id---------------------------------------------------
    599          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(pkt_id);
   \   0000F8   7404         MOV       A,#0x4
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   C0E0         PUSH      A
   \   000101   8E82         MOV       DPL,R6
   \   000103   8F83         MOV       DPH,R7
   \   000105   78..         MOV       R0,#?V0
   \   000107   12....       LCALL     ?L_MOV_X
   \   00010A   7419         MOV       A,#0x19
   \   00010C   12....       LCALL     ?XSTACK_DISP0_8
   \   00010F   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000112   D0E0         POP       A
   \   000114   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000117   12....       LCALL     ?L_MOV_X
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   78..         MOV       R0,#?V0
   \   000120   12....       LCALL     ?L_ADD_TO_X
    600          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(pkt_id);
   \   000123   7404         MOV       A,#0x4
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   E0           MOVX      A,@DPTR
   \   000129   C0E0         PUSH      A
   \   00012B   8E82         MOV       DPL,R6
   \   00012D   8F83         MOV       DPH,R7
   \   00012F   78..         MOV       R0,#?V0
   \   000131   12....       LCALL     ?L_MOV_X
   \   000134   7419         MOV       A,#0x19
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00013C   D0E0         POP       A
   \   00013E   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000141   12....       LCALL     ?L_MOV_X
   \   000144   8E82         MOV       DPL,R6
   \   000146   8F83         MOV       DPH,R7
   \   000148   78..         MOV       R0,#?V0
   \   00014A   12....       LCALL     ?L_ADD_TO_X
    601          	
    602          	//payload----------------------topic_name-----------------------------------------------
    603          	for(i = 0; i < topics_cnt; i++)
   \   00014D   85..82       MOV       DPL,?XSP + 0
   \   000150   85..83       MOV       DPH,?XSP + 1
   \   000153   E4           CLR       A
   \   000154   02....       LJMP      ??MQTT_PacketSubscribe_6 & 0xFFFF
    604          	{
    605          		topic_len = strlen(topics[i]);
                 		                   ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \                     ??MQTT_PacketSubscribe_7:
   \   000157   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000160   7406         MOV       A,#0x6
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000168                ; Setup parameters for call to function strlen
   \   000168   7406         MOV       A,#0x6
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   12....       LCALL     ?Subroutine28 & 0xFFFF
    606          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(topic_len);
   \                     ??CrossCallReturnLabel_54:
   \   000170   7419         MOV       A,#0x19
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000178   12....       LCALL     ?L_MOV_X
   \   00017B   7419         MOV       A,#0x19
   \   00017D   12....       LCALL     ?XSTACK_DISP0_8
   \   000180   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000183   12....       LCALL     ?L_MOV_X
   \   000186   8E82         MOV       DPL,R6
   \   000188   8F83         MOV       DPH,R7
   \   00018A   78..         MOV       R0,#?V4
   \   00018C   12....       LCALL     ?L_ADD_TO_X
    607          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(topic_len);
   \   00018F   8E82         MOV       DPL,R6
   \   000191   8F83         MOV       DPH,R7
   \   000193   78..         MOV       R0,#?V4
   \   000195   12....       LCALL     ?L_MOV_X
   \   000198   7419         MOV       A,#0x19
   \   00019A   12....       LCALL     ?XSTACK_DISP0_8
   \   00019D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001A0   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0001A3   12....       LCALL     ?L_MOV_X
   \   0001A6   8E82         MOV       DPL,R6
   \   0001A8   8F83         MOV       DPH,R7
   \   0001AA   78..         MOV       R0,#?V4
   \   0001AC   12....       LCALL     ?L_ADD_TO_X
    608          		
    609          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topics[i], topic_len);
                 		        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topics[i], topic_len);
  		                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",609  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   0001AF                ; Setup parameters for call to function strncat
   \   0001AF   8A..         MOV       ?V4,R2
   \   0001B1   8B..         MOV       ?V5,R3
   \   0001B3   78..         MOV       R0,#?V4
   \   0001B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B8   7408         MOV       A,#0x8
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0001C0   12....       LCALL     ?L_MOV_X
   \   0001C3   741B         MOV       A,#0x1b
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001CB   12....       LCALL     ?DEALLOC_XSTACK8
    610          		mqttPacket->_len += topic_len;
   \   0001CE   8E82         MOV       DPL,R6
   \   0001D0   8F83         MOV       DPH,R7
   \   0001D2   78..         MOV       R0,#?V0
   \   0001D4   12....       LCALL     ?L_ADD_TO_X
    611          		
    612          		mqttPacket->_data[mqttPacket->_len++] = qos & 0xFF;
   \   0001D7   7403         MOV       A,#0x3
   \   0001D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   C0E0         PUSH      A
   \   0001DF   8E82         MOV       DPL,R6
   \   0001E1   8F83         MOV       DPH,R7
   \   0001E3   78..         MOV       R0,#?V0
   \   0001E5   12....       LCALL     ?L_MOV_X
   \   0001E8   7419         MOV       A,#0x19
   \   0001EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001ED   12....       LCALL     ?Subroutine35 & 0xFFFF
    613          	}
   \                     ??CrossCallReturnLabel_80:
   \   0001F0   D0E0         POP       A
   \   0001F2   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   0001F5   12....       LCALL     ?L_MOV_X
   \   0001F8   8E82         MOV       DPL,R6
   \   0001FA   8F83         MOV       DPH,R7
   \   0001FC   78..         MOV       R0,#?V0
   \   0001FE   12....       LCALL     ?L_ADD_TO_X
   \   000201   85..82       MOV       DPL,?XSP + 0
   \   000204   85..83       MOV       DPH,?XSP + 1
   \   000207   E0           MOVX      A,@DPTR
   \   000208   04           INC       A
   \                     ??MQTT_PacketSubscribe_6:
   \   000209   F0           MOVX      @DPTR,A
   \   00020A   7418         MOV       A,#0x18
   \   00020C   12....       LCALL     ?XSTACK_DISP0_8
   \   00020F   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000212   5003         JNC       $+5
   \   000214   02....       LJMP      ??MQTT_PacketSubscribe_7 & 0xFFFF
    614          
    615          	return 0;
   \   000217   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketSubscribe_1:
   \   000219   02....       LJMP      ?Subroutine0 & 0xFFFF
    616          
    617          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F9           MOV       R1,A
   \   000007   7401         MOV       A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   2402         ADD       A,#0x2
   \   000002   F5..         MOV       ?V4,A
   \   000004   E4           CLR       A
   \   000005   39           ADDC      A,R1
   \   000006   F5..         MOV       ?V5,A
   \   000008   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   7904         MOV       R1,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   F9           MOV       R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   78..         MOV       R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   EB           MOV       A,R3
   \   000004   33           RLC       A
   \   000005   95E0         SUBB      A,0xE0 /* A   */
   \   000007   F5..         MOV       ?V2,A
   \   000009   F5..         MOV       ?V3,A
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   78..         MOV       R0,#?V0
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000006   E4           CLR       A
   \   000007   F5..         MOV       ?V2,A
   \   000009   F5..         MOV       ?V3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   E0           MOVX      A,@DPTR
   \   000009   C3           CLR       C
   \   00000A   98           SUBB      A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000006   E4           CLR       A
   \   000007   F5..         MOV       ?V6,A
   \   000009   F5..         MOV       ?V7,A
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   79..         MOV       R1,#?V4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   35..         ADDC      A,?V5
   \   000008   FD           MOV       R5,A
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   8E82         MOV       DPL,R6
   \   000005   F583         MOV       DPH,A
   \   000007   78..         MOV       R0,#?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   75..00       MOV       ?V0,#0x0
   \   000004   75..00       MOV       ?V1,#0x0
   \   000007   75..00       MOV       ?V2,#0x0
   \   00000A   75..00       MOV       ?V3,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   39           ADDC      A,R1
   \   000005   8A82         MOV       DPL,R2
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FE           MOV       R6,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FF           MOV       R7,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FA           MOV       R2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   8A82         MOV       DPL,R2
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET
    618          
    619          //==========================================================
    620          //	函数名称：	MQTT_UnPacketSubscrebe
    621          //
    622          //	函数功能：	Subscribe的回复消息解包
    623          //
    624          //	入口参数：	rev_data：接收到的信息
    625          //
    626          //	返回参数：	0-成功		其他-失败
    627          //
    628          //	说明：		
    629          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    630          uint8 MQTT_UnPacketSubscribe(uint8 *rev_data)
   \                     MQTT_UnPacketSubscribe:
    631          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    632          	
    633          	uint8 result = 255;
   \   000004   79FF         MOV       R1,#-0x1
    634          
    635          	if(rev_data[2] == MOSQ_MSB(MQTT_SUBSCRIBE_ID) && rev_data[3] == MOSQ_LSB(MQTT_SUBSCRIBE_ID))
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   702D         JNZ       ??MQTT_UnPacketSubscribe_0
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6414         XRL       A,#0x14
   \   000019   7021         JNZ       ??MQTT_UnPacketSubscribe_0
    636          	{
    637          		switch(rev_data[4])
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   600C         JZ        ??MQTT_UnPacketSubscribe_1
   \   000026   14           DEC       A
   \   000027   6009         JZ        ??MQTT_UnPacketSubscribe_1
   \   000029   14           DEC       A
   \   00002A   6006         JZ        ??MQTT_UnPacketSubscribe_1
   \   00002C   2482         ADD       A,#-0x7e
   \   00002E   6006         JZ        ??MQTT_UnPacketSubscribe_2
   \   000030   8008         SJMP      ??MQTT_UnPacketSubscribe_3
    638          		{
    639          			case 0x00:
    640          			case 0x01:
    641          			case 0x02:
    642          				//MQTT Subscribe OK
    643          				result = 0;
   \                     ??MQTT_UnPacketSubscribe_1:
   \   000032   7900         MOV       R1,#0x0
    644          			break;
   \   000034   8006         SJMP      ??MQTT_UnPacketSubscribe_0
    645          			
    646          			case 0x80:
    647          				//MQTT Subscribe Failed
    648          				result = 1;
   \                     ??MQTT_UnPacketSubscribe_2:
   \   000036   7901         MOV       R1,#0x1
    649          			break;
   \   000038   8002         SJMP      ??MQTT_UnPacketSubscribe_0
    650          			
    651          			default:
    652          				//MQTT Subscribe UnKnown Err
    653          				result = 2;
   \                     ??MQTT_UnPacketSubscribe_3:
   \   00003A   7902         MOV       R1,#0x2
    654          			break;
    655          		}
    656          	}
    657          	
    658          	return result;
   \                     ??MQTT_UnPacketSubscribe_0:
   \   00003C   02....       LJMP      ?Subroutine1 & 0xFFFF
    659          
    660          }
    661          
    662          //==========================================================
    663          //	函数名称：	MQTT_PacketUnSubscribe
    664          //
    665          //	函数功能：	UnSubscribe消息组包
    666          //
    667          //	入口参数：	pkt_id：pkt_id
    668          //				qos：消息重发次数
    669          //				topics：订阅的消息
    670          //				topics_cnt：订阅的消息个数
    671          //				mqttPacket：包指针
    672          //
    673          //	返回参数：	0-成功		其他-失败
    674          //
    675          //	说明：		
    676          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    677          uint8 MQTT_PacketUnSubscribe(uint16 pkt_id, const int8 *topics[], uint8 topics_cnt, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketUnSubscribe:
    678          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7404         MOV       A,#0x4
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E9           MOV       A,R1
   \   000024   12....       LCALL     ?Subroutine6 & 0xFFFF
    679          	
    680          	uint32 topic_len = 0, remain_len = 0;
    681          	int16 len = 0;
    682          	uint8 i = 0;
    683          	
    684          	if(pkt_id == 0)
   \                     ??CrossCallReturnLabel_1:
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00002F   7020         JNZ       ??MQTT_PacketUnSubscribe_0
    685          		return 1;
   \   000031   7901         MOV       R1,#0x1
   \   000033   02....       LJMP      ??MQTT_PacketUnSubscribe_1 & 0xFFFF
    686          	
    687          	//计算topic长度-------------------------------------------------------------------------
    688          	for(; i < topics_cnt; i++)
    689          	{
    690          		if(topics[i] == NULL)
    691          			return 2;
    692          		
    693          		topic_len += strlen(topics[i]);
                 		                    ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \                     ??MQTT_PacketUnSubscribe_2:
   \   000036                ; Setup parameters for call to function strlen
   \   000036   85..82       MOV       DPL,?XSP + 0
   \   000039   85..83       MOV       DPH,?XSP + 1
   \   00003C   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000045   12....       LCALL     ?L_ADD
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   04           INC       A
   \   000050   F0           MOVX      @DPTR,A
   \                     ??MQTT_PacketUnSubscribe_0:
   \   000051   7401         MOV       A,#0x1
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000059   5013         JNC       ??MQTT_PacketUnSubscribe_3
   \   00005B   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000064   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000067   70CD         JNZ       ??MQTT_PacketUnSubscribe_2
   \   000069   7902         MOV       R1,#0x2
   \   00006B   02....       LJMP      ??MQTT_PacketUnSubscribe_1 & 0xFFFF
    694          	}
    695          	
    696          	//2 bytes packet id, 2 bytes topic length + topic + 1 byte reserve---------------------
    697          	remain_len = 2 + (topics_cnt << 1) + topic_len;
   \                     ??MQTT_PacketUnSubscribe_3:
   \   00006E   7401         MOV       A,#0x1
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E0           MOVX      A,@DPTR
   \   000074   28           ADD       A,R0
   \   000075   F8           MOV       R0,A
   \   000076   E4           CLR       A
   \   000077   33           RLC       A
   \   000078   F9           MOV       R1,A
   \   000079   E8           MOV       A,R0
   \   00007A   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00007D   12....       LCALL     ?L_ADD
   \   000080   85....       MOV       ?V0,?V4
   \   000083   85....       MOV       ?V1,?V5
    698          	
    699          	//分配内存------------------------------------------------------------------------------
    700          	MQTT_NewBuffer(mqttPacket, remain_len + 5);
   \   000086                ; Setup parameters for call to function MQTT_NewBuffer
   \   000086   90....       MOV       DPTR,#__Constant_5
   \   000089   78..         MOV       R0,#?V4
   \   00008B   12....       LCALL     ?L_ADD_X
   \   00008E   78..         MOV       R0,#?V4
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000093   741A         MOV       A,#0x1a
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
    701          	if(mqttPacket->_data == NULL)
   \   00009E   7416         MOV       A,#0x16
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   0000A6   7005         JNZ       ??MQTT_PacketUnSubscribe_4
    702          		return 3;
   \   0000A8   7903         MOV       R1,#0x3
   \   0000AA   02....       LJMP      ??MQTT_PacketUnSubscribe_1 & 0xFFFF
    703          	
    704          /*************************************固定头部***********************************************/
    705          	
    706          	//固定头部----------------------头部消息-------------------------------------------------
    707          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_UNSUBSCRIBE << 4 | 0x02;
   \                     ??MQTT_PacketUnSubscribe_4:
   \   0000AD   7416         MOV       A,#0x16
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000B5   12....       LCALL     ?L_MOV_X
   \   0000B8   7416         MOV       A,#0x16
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000C0   74A2         MOV       A,#-0x5e
   \   0000C2   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0000C5   12....       LCALL     ?L_MOV_X
   \   0000C8   8E82         MOV       DPL,R6
   \   0000CA   8F83         MOV       DPH,R7
   \   0000CC   78..         MOV       R0,#?V4
   \   0000CE   12....       LCALL     ?L_ADD_TO_X
    708          	
    709          	//固定头部----------------------剩余长度值-----------------------------------------------
    710          	len = MQTT_DumpLength(remain_len, mqttPacket->_data + mqttPacket->_len);
   \   0000D1                ; Setup parameters for call to function MQTT_DumpLength
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   78..         MOV       R0,#?V4
   \   0000D7   12....       LCALL     ?L_MOV_X
   \   0000DA   7416         MOV       A,#0x16
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL     ?Subroutine21 & 0xFFFF
    711          	if(len < 0)
   \                     ??CrossCallReturnLabel_38:
   \   0000E2   7416         MOV       A,#0x16
   \   0000E4   5009         JNC       ??MQTT_PacketUnSubscribe_5
    712          	{
    713          		MQTT_DeleteBuffer(mqttPacket);
   \   0000E6                ; Setup parameters for call to function MQTT_DeleteBuffer
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ?Subroutine53 & 0xFFFF
    714          		return 4;
    715          	}
   \                     ??CrossCallReturnLabel_131:
   \   0000EC   02....       LJMP      ??MQTT_PacketUnSubscribe_1 & 0xFFFF
    716          	else
    717          		mqttPacket->_len += len;
   \                     ??MQTT_PacketUnSubscribe_5:
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000F5   12....       LCALL     ?L_ADD_TO_X
    718          	
    719          /*************************************payload***********************************************/
    720          	
    721          	//payload----------------------pkt_id---------------------------------------------------
    722          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(pkt_id);
   \   0000F8   7402         MOV       A,#0x2
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   A3           INC       DPTR
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   C0E0         PUSH      A
   \   000101   8E82         MOV       DPL,R6
   \   000103   8F83         MOV       DPH,R7
   \   000105   78..         MOV       R0,#?V0
   \   000107   12....       LCALL     ?L_MOV_X
   \   00010A   7416         MOV       A,#0x16
   \   00010C   12....       LCALL     ?XSTACK_DISP0_8
   \   00010F   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000112   D0E0         POP       A
   \   000114   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000117   12....       LCALL     ?L_MOV_X
   \   00011A   8E82         MOV       DPL,R6
   \   00011C   8F83         MOV       DPH,R7
   \   00011E   78..         MOV       R0,#?V0
   \   000120   12....       LCALL     ?L_ADD_TO_X
    723          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(pkt_id);
   \   000123   7402         MOV       A,#0x2
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   E0           MOVX      A,@DPTR
   \   000129   C0E0         PUSH      A
   \   00012B   8E82         MOV       DPL,R6
   \   00012D   8F83         MOV       DPH,R7
   \   00012F   78..         MOV       R0,#?V0
   \   000131   12....       LCALL     ?L_MOV_X
   \   000134   7416         MOV       A,#0x16
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00013C   D0E0         POP       A
   \   00013E   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000141   12....       LCALL     ?L_MOV_X
   \   000144   8E82         MOV       DPL,R6
   \   000146   8F83         MOV       DPH,R7
   \   000148   78..         MOV       R0,#?V0
   \   00014A   12....       LCALL     ?L_ADD_TO_X
    724          	
    725          	//payload----------------------topic_name-----------------------------------------------
    726          	for(i = 0; i < topics_cnt; i++)
   \   00014D   85..82       MOV       DPL,?XSP + 0
   \   000150   85..83       MOV       DPH,?XSP + 1
   \   000153   E4           CLR       A
   \   000154   02....       LJMP      ??MQTT_PacketUnSubscribe_6 & 0xFFFF
    727          	{
    728          		topic_len = strlen(topics[i]);
                 		                   ^
Warning[Pe167]: argument of type "int8 const *" is incompatible with parameter
          of type "char const *"
   \                     ??MQTT_PacketUnSubscribe_7:
   \   000157   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000160   7402         MOV       A,#0x2
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   12....       LCALL     ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000168                ; Setup parameters for call to function strlen
   \   000168   7402         MOV       A,#0x2
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   12....       LCALL     ?Subroutine28 & 0xFFFF
    729          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(topic_len);
   \                     ??CrossCallReturnLabel_55:
   \   000170   7416         MOV       A,#0x16
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000178   12....       LCALL     ?L_MOV_X
   \   00017B   7416         MOV       A,#0x16
   \   00017D   12....       LCALL     ?XSTACK_DISP0_8
   \   000180   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000183   12....       LCALL     ?L_MOV_X
   \   000186   8E82         MOV       DPL,R6
   \   000188   8F83         MOV       DPH,R7
   \   00018A   78..         MOV       R0,#?V4
   \   00018C   12....       LCALL     ?L_ADD_TO_X
    730          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(topic_len);
   \   00018F   8E82         MOV       DPL,R6
   \   000191   8F83         MOV       DPH,R7
   \   000193   78..         MOV       R0,#?V4
   \   000195   12....       LCALL     ?L_MOV_X
   \   000198   7416         MOV       A,#0x16
   \   00019A   12....       LCALL     ?XSTACK_DISP0_8
   \   00019D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001A0   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   0001A3   12....       LCALL     ?L_MOV_X
   \   0001A6   8E82         MOV       DPL,R6
   \   0001A8   8F83         MOV       DPH,R7
   \   0001AA   78..         MOV       R0,#?V4
   \   0001AC   12....       LCALL     ?L_ADD_TO_X
    731          		
    732          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topics[i], topic_len);
                 		        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topics[i], topic_len);
  		                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",732  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   0001AF                ; Setup parameters for call to function strncat
   \   0001AF   8A..         MOV       ?V4,R2
   \   0001B1   8B..         MOV       ?V5,R3
   \   0001B3   78..         MOV       R0,#?V4
   \   0001B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B8   7404         MOV       A,#0x4
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   0001C0   12....       LCALL     ?L_MOV_X
   \   0001C3   7418         MOV       A,#0x18
   \   0001C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C8   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0001CB   12....       LCALL     ?DEALLOC_XSTACK8
    733          		mqttPacket->_len += topic_len;
   \   0001CE   8E82         MOV       DPL,R6
   \   0001D0   8F83         MOV       DPH,R7
   \   0001D2   78..         MOV       R0,#?V0
   \   0001D4   12....       LCALL     ?L_ADD_TO_X
    734          	}
   \   0001D7   85..82       MOV       DPL,?XSP + 0
   \   0001DA   85..83       MOV       DPH,?XSP + 1
   \   0001DD   E0           MOVX      A,@DPTR
   \   0001DE   04           INC       A
   \                     ??MQTT_PacketUnSubscribe_6:
   \   0001DF   F0           MOVX      @DPTR,A
   \   0001E0   7401         MOV       A,#0x1
   \   0001E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001E8   5003         JNC       $+5
   \   0001EA   02....       LJMP      ??MQTT_PacketUnSubscribe_7 & 0xFFFF
    735          
    736          	return 0;
   \   0001ED   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketUnSubscribe_1:
   \   0001EF   7406         MOV       A,#0x6
   \   0001F1   02....       LJMP      ??Subroutine95_0 & 0xFFFF
    737          
    738          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   F9           MOV       R1,A
   \   000007   7404         MOV       A,#0x4
   \   000009   22           RET
    739          
    740          //==========================================================
    741          //	函数名称：	MQTT_UnPacketUnSubscribe
    742          //
    743          //	函数功能：	UnSubscribe的回复消息解包
    744          //
    745          //	入口参数：	rev_data：接收到的信息
    746          //
    747          //	返回参数：	0-成功		其他-失败
    748          //
    749          //	说明：		
    750          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    751          uint1 MQTT_UnPacketUnSubscribe(uint8 *rev_data)
   \                     MQTT_UnPacketUnSubscribe:
    752          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    753          	
    754          	uint1 result = 1;
   \   000004   7901         MOV       R1,#0x1
    755          
    756          	if(rev_data[2] == MOSQ_MSB(MQTT_UNSUBSCRIBE_ID) && rev_data[3] == MOSQ_LSB(MQTT_UNSUBSCRIBE_ID))
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   700E         JNZ       ??MQTT_UnPacketUnSubscribe_0
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   641E         XRL       A,#0x1e
   \   000019   7002         JNZ       ??MQTT_UnPacketUnSubscribe_0
    757          	{
    758          		result = 0;
   \   00001B   7900         MOV       R1,#0x0
    759          	}
    760          	
    761          	return result;
   \                     ??MQTT_UnPacketUnSubscribe_0:
   \   00001D   02....       LJMP      ?Subroutine1 & 0xFFFF
    762          
    763          }
    764          
    765          //==========================================================
    766          //	函数名称：	MQTT_PacketPublish
    767          //
    768          //	函数功能：	Pulish消息组包
    769          //
    770          //	入口参数：	pkt_id：pkt_id
    771          //				topic：发布的topic
    772          //				payload：消息体
    773          //				payload_len：消息体长度
    774          //				qos：重发次数
    775          //				retain：离线消息推送
    776          //				own：
    777          //				mqttPacket：包指针
    778          //
    779          //	返回参数：	0-成功		其他-失败
    780          //
    781          //	说明：		
    782          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    783          uint8 MQTT_PacketPublish(uint16 pkt_id, const int8 *topic,
   \                     MQTT_PacketPublish:
    784          						const int8 *payload, uint32 payload_len,
    785          						enum MqttQosLevel qos, int32 retain, int32 own,
    786          						MQTT_PACKET_STRUCTURE *mqttPacket)
    787          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   7402         MOV       A,#0x2
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E9           MOV       A,R1
   \   000024   12....       LCALL     ?Subroutine63 & 0xFFFF
    788          
    789          	uint32 total_len = 0, topic_len = 0;
    790          	int32 len = 0;
    791          	uint8 flags = 0;
    792          	
    793          	//pkt_id检查----------------------------------------------------------------------------
    794          	if(pkt_id == 0)
   \                     ??CrossCallReturnLabel_148:
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   00002F   700D         JNZ       ??MQTT_PacketPublish_0
    795          		return 1;
   \   000031   7901         MOV       R1,#0x1
   \   000033   02....       LJMP      ??MQTT_PacketPublish_1 & 0xFFFF
    796          	
    797          	//$dp为系统上传数据点的指令--------------------------------------------------------------
    798          	for(topic_len = 0; topic[topic_len] != '\0'; ++topic_len)
   \                     ??MQTT_PacketPublish_2:
   \   000036   90....       MOV       DPTR,#__Constant_1
   \   000039   78..         MOV       R0,#?V0
   \   00003B   12....       LCALL     ?L_ADD_X
   \                     ??MQTT_PacketPublish_0:
   \   00003E   A8..         MOV       R0,?V0
   \   000040   A9..         MOV       R1,?V1
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   601D         JZ        ??MQTT_PacketPublish_3
    799          	{
    800          		if((topic[topic_len] == '#') || (topic[topic_len] == '+'))
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000055   6423         XRL       A,#0x23
   \   000057   600C         JZ        ??MQTT_PacketPublish_4
   \   000059   7402         MOV       A,#0x2
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000061   642B         XRL       A,#0x2b
   \   000063   70D1         JNZ       ??MQTT_PacketPublish_2
    801          			return 2;
   \                     ??MQTT_PacketPublish_4:
   \   000065   7902         MOV       R1,#0x2
   \   000067   02....       LJMP      ??MQTT_PacketPublish_1 & 0xFFFF
    802          	}
    803          	
    804          	//Publish消息---------------------------------------------------------------------------
    805          	flags |= MQTT_PKT_PUBLISH << 4;
   \                     ??MQTT_PacketPublish_3:
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   7430         MOV       A,#0x30
   \   000072   F0           MOVX      @DPTR,A
    806          	
    807          	//retain标志----------------------------------------------------------------------------
    808          	if(retain)
   \   000073   7420         MOV       A,#0x20
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?XLOAD_R0123
   \   00007B   E8           MOV       A,R0
   \   00007C   49           ORL       A,R1
   \   00007D   4A           ORL       A,R2
   \   00007E   4B           ORL       A,R3
   \   00007F   6009         JZ        ??MQTT_PacketPublish_5
    809          		flags |= 0x01;
   \   000081   85..82       MOV       DPL,?XSP + 0
   \   000084   85..83       MOV       DPH,?XSP + 1
   \   000087   7431         MOV       A,#0x31
   \   000089   F0           MOVX      @DPTR,A
    810          	
    811          	//总长度--------------------------------------------------------------------------------
    812          	total_len = topic_len + payload_len + 2;
   \                     ??MQTT_PacketPublish_5:
   \   00008A   85....       MOV       ?V4,?V0
   \   00008D   85....       MOV       ?V5,?V1
   \   000090   85....       MOV       ?V6,?V2
   \   000093   85....       MOV       ?V7,?V3
   \   000096   741C         MOV       A,#0x1c
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   78..         MOV       R0,#?V4
   \   00009D   12....       LCALL     ?L_ADD_X
   \   0000A0   90....       MOV       DPTR,#__Constant_2
   \   0000A3   78..         MOV       R0,#?V4
   \   0000A5   12....       LCALL     ?L_ADD_X
   \   0000A8   7406         MOV       A,#0x6
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   78..         MOV       R0,#?V4
   \   0000AF   12....       LCALL     ?L_MOV_TO_X
    813          	
    814          	//qos级别--主要用于PUBLISH（发布态）消息的，保证消息传递的次数-----------------------------
    815          	switch(qos)
   \   0000B2   7401         MOV       A,#0x1
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   6024         JZ        ??MQTT_PacketPublish_6
   \   0000BA   14           DEC       A
   \   0000BB   6005         JZ        ??MQTT_PacketPublish_7
   \   0000BD   14           DEC       A
   \   0000BE   604F         JZ        ??MQTT_PacketPublish_8
   \   0000C0   8058         SJMP      ??MQTT_PacketPublish_9
    816          	{
    817          		case MQTT_QOS_LEVEL0:
    818          			flags |= MQTT_CONNECT_WILL_QOS0;	//最多一次
    819          		break;
    820          		
    821          		case MQTT_QOS_LEVEL1:
    822          			flags |= 0x02;						//最少一次
   \                     ??MQTT_PacketPublish_7:
   \   0000C2   85..82       MOV       DPL,?XSP + 0
   \   0000C5   85..83       MOV       DPH,?XSP + 1
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   D2E1         SETB      0xE0 /* A   */.1
   \                     ??MQTT_PacketPublish_10:
   \   0000CB   F0           MOVX      @DPTR,A
    823          			total_len += 2;
   \   0000CC   90....       MOV       DPTR,#__Constant_2
   \   0000CF   78..         MOV       R0,#?V4
   \   0000D1   12....       LCALL     ?L_MOV_X
   \   0000D4   7406         MOV       A,#0x6
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   78..         MOV       R0,#?V4
   \   0000DB   12....       LCALL     ?L_ADD_TO_X
    824          		break;
    825          		
    826          		case MQTT_QOS_LEVEL2:
    827          			flags |= 0x04;						//只有一次
    828          			total_len += 2;
    829          		break;
    830          		
    831          		default:
    832          		return 3;
    833          	}
    834          	
    835          	//分配内存------------------------------------------------------------------------------
    836          	MQTT_NewBuffer(mqttPacket, total_len + 3);
   \                     ??MQTT_PacketPublish_6:
   \   0000DE                ; Setup parameters for call to function MQTT_NewBuffer
   \   0000DE   7406         MOV       A,#0x6
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   78..         MOV       R0,#?V4
   \   0000E5   12....       LCALL     ?L_MOV_X
   \   0000E8   90....       MOV       DPTR,#__Constant_3
   \   0000EB   78..         MOV       R0,#?V4
   \   0000ED   12....       LCALL     ?L_ADD_X
   \   0000F0   78..         MOV       R0,#?V4
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000F5   742C         MOV       A,#0x2c
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000FD   12....       LCALL     ?DEALLOC_XSTACK8
    837          	if(mqttPacket->_data == NULL)
   \   000100   7428         MOV       A,#0x28
   \   000102   12....       LCALL     ?XSTACK_DISP0_8
   \   000105   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000108   7015         JNZ       ??MQTT_PacketPublish_11
    838          		return 4;
   \   00010A   7904         MOV       R1,#0x4
   \   00010C   02....       LJMP      ??MQTT_PacketPublish_1 & 0xFFFF
   \                     ??MQTT_PacketPublish_8:
   \   00010F   85..82       MOV       DPL,?XSP + 0
   \   000112   85..83       MOV       DPH,?XSP + 1
   \   000115   E0           MOVX      A,@DPTR
   \   000116   D2E2         SETB      0xE0 /* A   */.2
   \   000118   80B1         SJMP      ??MQTT_PacketPublish_10
   \                     ??MQTT_PacketPublish_9:
   \   00011A   7903         MOV       R1,#0x3
   \   00011C   02....       LJMP      ??MQTT_PacketPublish_1 & 0xFFFF
    839          		
    840          	memset(mqttPacket->_data, 0, total_len + 3);
   \                     ??MQTT_PacketPublish_11:
   \   00011F                ; Setup parameters for call to function memset
   \   00011F   7406         MOV       A,#0x6
   \   000121   12....       LCALL     ?XSTACK_DISP0_8
   \   000124   78..         MOV       R0,#?V4
   \   000126   12....       LCALL     ?L_MOV_X
   \   000129   E5..         MOV       A,?V4
   \   00012B   2403         ADD       A,#0x3
   \   00012D   F5..         MOV       ?V4,A
   \   00012F   5002         JNC       ??MQTT_PacketPublish_12
   \   000131   05..         INC       ?V5
   \                     ??MQTT_PacketPublish_12:
   \   000133   78..         MOV       R0,#?V4
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000138   7C00         MOV       R4,#0x0
   \   00013A   7D00         MOV       R5,#0x0
   \   00013C   742A         MOV       A,#0x2a
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000144   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000147   12....       LCALL     ?DEALLOC_XSTACK8
    841          	
    842          /*************************************固定头部***********************************************/
    843          	
    844          	//固定头部----------------------头部消息-------------------------------------------------
    845          	mqttPacket->_data[mqttPacket->_len++] = flags;
   \   00014A   7428         MOV       A,#0x28
   \   00014C   12....       LCALL     ?XSTACK_DISP0_8
   \   00014F   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000152   85..82       MOV       DPL,?XSP + 0
   \   000155   85..83       MOV       DPH,?XSP + 1
   \   000158   E0           MOVX      A,@DPTR
   \   000159   C0E0         PUSH      A
   \   00015B   8E82         MOV       DPL,R6
   \   00015D   8F83         MOV       DPH,R7
   \   00015F   78..         MOV       R0,#?V4
   \   000161   12....       LCALL     ?L_MOV_X
   \   000164   7428         MOV       A,#0x28
   \   000166   12....       LCALL     ?XSTACK_DISP0_8
   \   000169   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00016C   D0E0         POP       A
   \   00016E   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000171   12....       LCALL     ?L_MOV_X
   \   000174   8E82         MOV       DPL,R6
   \   000176   8F83         MOV       DPH,R7
   \   000178   78..         MOV       R0,#?V4
   \   00017A   12....       LCALL     ?L_ADD_TO_X
    846          	
    847          	//固定头部----------------------剩余长度值-----------------------------------------------
    848          	len = MQTT_DumpLength(total_len, mqttPacket->_data + mqttPacket->_len);
   \   00017D                ; Setup parameters for call to function MQTT_DumpLength
   \   00017D   8E82         MOV       DPL,R6
   \   00017F   8F83         MOV       DPH,R7
   \   000181   78..         MOV       R0,#?V4
   \   000183   12....       LCALL     ?L_MOV_X
   \   000186   7428         MOV       A,#0x28
   \   000188   12....       LCALL     ?XSTACK_DISP0_8
   \   00018B   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00018E   25..         ADD       A,?V4
   \   000190   FC           MOV       R4,A
   \   000191   A3           INC       DPTR
   \   000192   E0           MOVX      A,@DPTR
   \   000193   35..         ADDC      A,?V5
   \   000195   FD           MOV       R5,A
   \   000196   7406         MOV       A,#0x6
   \   000198   12....       LCALL     ?XSTACK_DISP0_8
   \   00019B   78..         MOV       R0,#?V4
   \   00019D   12....       LCALL     ?L_MOV_X
   \   0001A0   AA..         MOV       R2,?V4
   \   0001A2   AB..         MOV       R3,?V5
   \   0001A4   12....       LCALL     `??MQTT_DumpLength::?relay`; Banked call to: MQTT_DumpLength
   \   0001A7   8A..         MOV       ?V4,R2
   \   0001A9   8B..         MOV       ?V5,R3
   \   0001AB   8C..         MOV       ?V6,R4
   \   0001AD   8D..         MOV       ?V7,R5
    849          	if(len < 0)
   \   0001AF   90....       MOV       DPTR,#__Constant_0
   \   0001B2   78..         MOV       R0,#?V4
   \   0001B4   12....       LCALL     ?SL_GE_X
   \   0001B7   7428         MOV       A,#0x28
   \   0001B9   4009         JC        ??MQTT_PacketPublish_13
    850          	{
    851          		MQTT_DeleteBuffer(mqttPacket);
   \   0001BB                ; Setup parameters for call to function MQTT_DeleteBuffer
   \   0001BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BE   12....       LCALL     ?Subroutine52 & 0xFFFF
    852          		return 5;
    853          	}
   \                     ??CrossCallReturnLabel_129:
   \   0001C1   02....       LJMP      ??MQTT_PacketPublish_1 & 0xFFFF
    854          	else
    855          		mqttPacket->_len += len;
   \                     ??MQTT_PacketPublish_13:
   \   0001C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C7   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001CA   12....       LCALL     ?L_ADD_TO_X
    856          	
    857          /*************************************可变头部***********************************************/
    858          	
    859          	//可变头部----------------------写入topic长度、topic-------------------------------------
    860          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(topic_len);
   \   0001CD   8E82         MOV       DPL,R6
   \   0001CF   8F83         MOV       DPH,R7
   \   0001D1   78..         MOV       R0,#?V4
   \   0001D3   12....       LCALL     ?L_MOV_X
   \   0001D6   7428         MOV       A,#0x28
   \   0001D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DB   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001DE   E5..         MOV       A,?V1
   \   0001E0   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   0001E3   12....       LCALL     ?L_MOV_X
   \   0001E6   8E82         MOV       DPL,R6
   \   0001E8   8F83         MOV       DPH,R7
   \   0001EA   78..         MOV       R0,#?V4
   \   0001EC   12....       LCALL     ?L_ADD_TO_X
    861          	mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(topic_len);
   \   0001EF   8E82         MOV       DPL,R6
   \   0001F1   8F83         MOV       DPH,R7
   \   0001F3   78..         MOV       R0,#?V4
   \   0001F5   12....       LCALL     ?L_MOV_X
   \   0001F8   7428         MOV       A,#0x28
   \   0001FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FD   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000200   E5..         MOV       A,?V0
   \   000202   12....       LCALL     ??Subroutine93_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000205   12....       LCALL     ?L_MOV_X
   \   000208   8E82         MOV       DPL,R6
   \   00020A   8F83         MOV       DPH,R7
   \   00020C   78..         MOV       R0,#?V4
   \   00020E   12....       LCALL     ?L_ADD_TO_X
    862          	
    863          	strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topic, topic_len);
                 	        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  	strncat((int8 *)mqttPacket->_data + mqttPacket->_len, topic, topic_len);
  	                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",863  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   000211                ; Setup parameters for call to function strncat
   \   000211   85....       MOV       ?V4,?V0
   \   000214   85....       MOV       ?V5,?V1
   \   000217   78..         MOV       R0,#?V4
   \   000219   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00021C   7404         MOV       A,#0x4
   \   00021E   12....       LCALL     ?XSTACK_DISP0_8
   \   000221   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000224   12....       LCALL     ?L_MOV_X
   \   000227   742A         MOV       A,#0x2a
   \   000229   12....       LCALL     ?XSTACK_DISP0_8
   \   00022C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00022F   12....       LCALL     ?DEALLOC_XSTACK8
    864          	mqttPacket->_len += topic_len;
   \   000232   8E82         MOV       DPL,R6
   \   000234   8F83         MOV       DPH,R7
   \   000236   78..         MOV       R0,#?V0
   \   000238   12....       LCALL     ?L_ADD_TO_X
    865          	if(qos != MQTT_QOS_LEVEL0)
   \   00023B   7401         MOV       A,#0x1
   \   00023D   12....       LCALL     ?XSTACK_DISP0_8
   \   000240   E0           MOVX      A,@DPTR
   \   000241   605D         JZ        ??MQTT_PacketPublish_14
    866          	{
    867          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_MSB(pkt_id);
   \   000243   7428         MOV       A,#0x28
   \   000245   12....       LCALL     ?XSTACK_DISP0_8
   \   000248   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00024B   7404         MOV       A,#0x4
   \   00024D   12....       LCALL     ?XSTACK_DISP0_8
   \   000250   A3           INC       DPTR
   \   000251   E0           MOVX      A,@DPTR
   \   000252   C0E0         PUSH      A
   \   000254   8E82         MOV       DPL,R6
   \   000256   8F83         MOV       DPH,R7
   \   000258   78..         MOV       R0,#?V0
   \   00025A   12....       LCALL     ?L_MOV_X
   \   00025D   7428         MOV       A,#0x28
   \   00025F   12....       LCALL     ?XSTACK_DISP0_8
   \   000262   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000265   D0E0         POP       A
   \   000267   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   00026A   12....       LCALL     ?L_MOV_X
   \   00026D   8E82         MOV       DPL,R6
   \   00026F   8F83         MOV       DPH,R7
   \   000271   78..         MOV       R0,#?V0
   \   000273   12....       LCALL     ?L_ADD_TO_X
    868          		mqttPacket->_data[mqttPacket->_len++] = MOSQ_LSB(pkt_id);
   \   000276   7404         MOV       A,#0x4
   \   000278   12....       LCALL     ?XSTACK_DISP0_8
   \   00027B   E0           MOVX      A,@DPTR
   \   00027C   C0E0         PUSH      A
   \   00027E   8E82         MOV       DPL,R6
   \   000280   8F83         MOV       DPH,R7
   \   000282   78..         MOV       R0,#?V0
   \   000284   12....       LCALL     ?L_MOV_X
   \   000287   7428         MOV       A,#0x28
   \   000289   12....       LCALL     ?XSTACK_DISP0_8
   \   00028C   12....       LCALL     ?Subroutine35 & 0xFFFF
    869          	}
   \                     ??CrossCallReturnLabel_84:
   \   00028F   D0E0         POP       A
   \   000291   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000294   12....       LCALL     ?L_MOV_X
   \   000297   8E82         MOV       DPL,R6
   \   000299   8F83         MOV       DPH,R7
   \   00029B   78..         MOV       R0,#?V0
   \   00029D   12....       LCALL     ?L_ADD_TO_X
   \                     ??MQTT_PacketPublish_14:
   \   0002A0   741A         MOV       A,#0x1a
   \   0002A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A5   E0           MOVX      A,@DPTR
   \   0002A6   FC           MOV       R4,A
   \   0002A7   A3           INC       DPTR
   \   0002A8   E0           MOVX      A,@DPTR
   \   0002A9   FD           MOV       R5,A
    870          	
    871          	//可变头部----------------------写入payload----------------------------------------------
    872          	if(payload != NULL)
   \   0002AA   EC           MOV       A,R4
   \   0002AB   4D           ORL       A,R5
   \   0002AC   603E         JZ        ??MQTT_PacketPublish_15
    873          	{
    874          		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, payload, payload_len);
                 		        ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char *"

  		strncat((int8 *)mqttPacket->_data + mqttPacket->_len, payload, payload_len);
  		                                                      ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",874  Warning[Pe167]: 
          argument of type "int8 const *" is incompatible with parameter of
          type "char const *"
   \   0002AE   7428         MOV       A,#0x28
   \   0002B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B3   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0002B6                ; Setup parameters for call to function strncat
   \   0002B6   741C         MOV       A,#0x1c
   \   0002B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BB   78..         MOV       R0,#?V0
   \   0002BD   12....       LCALL     ?L_MOV_X
   \   0002C0   78..         MOV       R0,#?V0
   \   0002C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002C5   8E82         MOV       DPL,R6
   \   0002C7   8F83         MOV       DPH,R7
   \   0002C9   78..         MOV       R0,#?V0
   \   0002CB   12....       LCALL     ?L_MOV_X
   \   0002CE   742A         MOV       A,#0x2a
   \   0002D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D3   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0002D6   12....       LCALL     ?DEALLOC_XSTACK8
    875          		mqttPacket->_len += payload_len;
   \   0002D9   741C         MOV       A,#0x1c
   \   0002DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DE   78..         MOV       R0,#?V0
   \   0002E0   12....       LCALL     ?L_MOV_X
   \   0002E3   8E82         MOV       DPL,R6
   \   0002E5   8F83         MOV       DPH,R7
   \   0002E7   78..         MOV       R0,#?V0
   \   0002E9   12....       LCALL     ?L_ADD_TO_X
    876          	}
    877          	
    878          	return 0;
   \                     ??MQTT_PacketPublish_15:
   \   0002EC   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketPublish_1:
   \   0002EE   740A         MOV       A,#0xa
   \   0002F0   02....       LJMP      ??Subroutine95_0 & 0xFFFF
    879          
    880          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   12....       LCALL     `??memset::?relay`; Banked call to: memset
   \   000006   7402         MOV       A,#0x2
   \   000008   22           RET
    881          
    882          //==========================================================
    883          //	函数名称：	MQTT_UnPacketPublish
    884          //
    885          //	函数功能：	Publish消息解包
    886          //
    887          //	入口参数：	flags：MQTT相关标志信息
    888          //				pkt：指向可变头部
    889          //				size：固定头部中的剩余长度信息
    890          //
    891          //	返回参数：	0-成功		其他-失败原因
    892          //
    893          //	说明：		
    894          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   FA           MOV       R2,A
   \   000001   E5..         MOV       A,?V1
   \   000003   34FF         ADDC      A,#-0x1
   \   000005   FB           MOV       R3,A
   \   000006   8E82         MOV       DPL,R6
   \   000008   8F83         MOV       DPH,R7
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F8           MOV       R0,A
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   EA           MOV       A,R2
   \   000010   C3           CLR       C
   \   000011   98           SUBB      A,R0
   \   000012   F8           MOV       R0,A
   \   000013   EB           MOV       A,R3
   \   000014   99           SUBB      A,R1
   \   000015                REQUIRE ??Subroutine90_0
   \   000015                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    895          uint8 MQTT_UnPacketPublish(uint8 *rev_data, int8 *topic, uint16 *topic_len, int8 *payload, uint16 *payload_len, uint8 *qos, uint16 *pkt_id)
   \                     MQTT_UnPacketPublish:
    896          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    897          	
    898          	const int8 flags = rev_data[0] & 0x0F;
   \   000012   8A82         MOV       DPL,R2
   \   000014   F583         MOV       DPH,A
   \   000016   E0           MOVX      A,@DPTR
   \   000017   C0E0         PUSH      A
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   D0E0         POP       A
   \   000020   F0           MOVX      @DPTR,A
    899          	uint8 *msgPtr;
    900          	uint32 remain_len = 0;
   \   000021   7403         MOV       A,#0x3
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ??Subroutine103_0 & 0xFFFF
    901          
    902          	const int8 dup = flags & 0x08;
    903          
    904          	*qos = (flags & 0x06) >> 1;
   \                     ??CrossCallReturnLabel_364:
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   C3           CLR       C
   \   000030   13           RRC       A
   \   000031   5403         ANL       A,#0x3
   \   000033   C0E0         PUSH      A
   \   000035   741D         MOV       A,#0x1d
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00003D   D0E0         POP       A
   \   00003F   F0           MOVX      @DPTR,A
    905          	
    906          	msgPtr = rev_data + MQTT_ReadLength(rev_data + 1, 4, &remain_len) + 1;
   \   000040                ; Setup parameters for call to function MQTT_ReadLength
   \   000040   90....       MOV       DPTR,#__Constant_4
   \   000043   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000046   7407         MOV       A,#0x7
   \   000048   12....       LCALL     ?XSTACK_DISP102_8
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   A3           INC       DPTR
   \   000050   AA82         MOV       R2,DPL
   \   000052   AB83         MOV       R3,DPH
   \   000054   12....       LCALL     `??MQTT_ReadLength::?relay`; Banked call to: MQTT_ReadLength
   \   000057   7404         MOV       A,#0x4
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00005F   A882         MOV       R0,DPL
   \   000061   A983         MOV       R1,DPH
   \   000063   85..82       MOV       DPL,?XSP + 0
   \   000066   85..83       MOV       DPH,?XSP + 1
   \   000069   12....       LCALL     ??Subroutine91_0 & 0xFFFF
    907          	
    908          	if(remain_len < 2 || flags & 0x01)							//retain
   \                     ??CrossCallReturnLabel_253:
   \   00006C   90....       MOV       DPTR,#__Constant_2
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?L_MOV_X
   \   000074   7403         MOV       A,#0x3
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?UL_GT_X
   \   00007E   5003         JNC       $+5
   \   000080   02....       LJMP      ??MQTT_UnPacketPublish_0 & 0xFFFF
   \   000083   7402         MOV       A,#0x2
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E0           MOVX      A,@DPTR
   \   000089   A2E0         MOV       C,0xE0 /* A   */.0
   \   00008B   5003         JNC       $+5
   \   00008D   02....       LJMP      ??MQTT_UnPacketPublish_0 & 0xFFFF
    909          		return 255;
    910          	
    911          	*topic_len = (uint16)msgPtr[0] << 8 | msgPtr[1];
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000099   F9           MOV       R1,A
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   12....       LCALL     ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   0000A3   A3           INC       DPTR
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   FA           MOV       R2,A
   \   0000A6   7417         MOV       A,#0x17
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   FE           MOV       R6,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   FF           MOV       R7,A
   \   0000B0   8E82         MOV       DPL,R6
   \   0000B2   F583         MOV       DPH,A
   \   0000B4   EA           MOV       A,R2
   \   0000B5   12....       LCALL     ??Subroutine92_0 & 0xFFFF
    912          	if(remain_len < *topic_len + 2)
   \                     ??CrossCallReturnLabel_248:
   \   0000B8   EA           MOV       A,R2
   \   0000B9   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?UL_GT_X
   \   0000C6   5003         JNC       $+5
   \   0000C8   02....       LJMP      ??MQTT_UnPacketPublish_0 & 0xFFFF
    913          		return 255;
    914          	
    915          	if(strstr((int8 *)msgPtr + 2, CMD_TOPIC_PREFIX) != NULL)	//如果是命令下发
                 	          ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char const *"
   \   0000CB                ; Setup parameters for call to function strstr
   \   0000CB   7C..         MOV       R4,#`?<Constant "$creq">` & 0xff
   \   0000CD   7D..         MOV       R5,#(`?<Constant "$creq">` >> 8) & 0xff
   \   0000CF   85..82       MOV       DPL,?XSP + 0
   \   0000D2   85..83       MOV       DPH,?XSP + 1
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   2402         ADD       A,#0x2
   \   0000D8   FA           MOV       R2,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   3400         ADDC      A,#0x0
   \   0000DD   FB           MOV       R3,A
   \   0000DE   12....       LCALL     `??strstr::?relay`; Banked call to: strstr
   \   0000E1   EA           MOV       A,R2
   \   0000E2   4B           ORL       A,R3
   \   0000E3   6005         JZ        ??MQTT_UnPacketPublish_1
    916          		return MQTT_PKT_CMD;
   \   0000E5   790F         MOV       R1,#0xf
   \   0000E7   02....       LJMP      ??MQTT_UnPacketPublish_2 & 0xFFFF
   \                     ??MQTT_UnPacketPublish_1:
   \   0000EA   741B         MOV       A,#0x1b
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL     ?Subroutine49 & 0xFFFF
    917          	
    918          	switch(*qos)
   \                     ??CrossCallReturnLabel_121:
   \   0000F2   741D         MOV       A,#0x1d
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0000FA   600F         JZ        ??MQTT_UnPacketPublish_3
   \   0000FC   14           DEC       A
   \   0000FD   7003         JNZ       $+5
   \   0000FF   02....       LJMP      ??MQTT_UnPacketPublish_4 & 0xFFFF
   \   000102   14           DEC       A
   \   000103   7003         JNZ       $+5
   \   000105   02....       LJMP      ??MQTT_UnPacketPublish_4 & 0xFFFF
   \   000108   02....       LJMP      ??MQTT_UnPacketPublish_0 & 0xFFFF
    919          	{
    920          		case MQTT_QOS_LEVEL0:									// qos0 have no packet identifier
    921          			
    922          			if(0 != dup)
   \                     ??MQTT_UnPacketPublish_3:
   \   00010B   7402         MOV       A,#0x2
   \   00010D   12....       LCALL     ?XSTACK_DISP0_8
   \   000110   E0           MOVX      A,@DPTR
   \   000111   5408         ANL       A,#0x8
   \   000113   6003         JZ        $+5
   \   000115   02....       LJMP      ??MQTT_UnPacketPublish_0 & 0xFFFF
    923          				return 255;
    924          
    925          			if((topic == NULL) || (*topic_len)>MAX_CMDID_TOPIC_LEN)
   \   000118   E5..         MOV       A,?V6
   \   00011A   45..         ORL       A,?V7
   \   00011C   600E         JZ        ??MQTT_UnPacketPublish_5
   \   00011E   8E82         MOV       DPL,R6
   \   000120   8F83         MOV       DPH,R7
   \   000122   C3           CLR       C
   \   000123   E0           MOVX      A,@DPTR
   \   000124   9433         SUBB      A,#0x33
   \   000126   A3           INC       DPTR
   \   000127   E0           MOVX      A,@DPTR
   \   000128   9400         SUBB      A,#0x0
   \   00012A   4007         JC        ??MQTT_UnPacketPublish_6
    926                {
    927                  debug("UnPacketPublish 11.\r\n");
   \                     ??MQTT_UnPacketPublish_5:
   \   00012C                ; Setup parameters for call to function debug
   \   00012C   7A..         MOV       R2,#`?<Constant "UnPacketPublish 11.\\r\\n">` & 0xff
   \   00012E   7B..         MOV       R3,#(`?<Constant "UnPacketPublish 11.\\r\\n">` >> 8) & 0xff
   \   000130   02....       LJMP      ??MQTT_UnPacketPublish_7 & 0xFFFF
    928          			  return 255;
    929                }
    930          			memset(topic, 0, *topic_len + 1);
   \                     ??MQTT_UnPacketPublish_6:
   \   000133                ; Setup parameters for call to function memset
   \   000133   8E82         MOV       DPL,R6
   \   000135   8F83         MOV       DPH,R7
   \   000137   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013D   7C00         MOV       R4,#0x0
   \   00013F   7D00         MOV       R5,#0x0
   \   000141   AA..         MOV       R2,?V6
   \   000143   AB..         MOV       R3,?V7
   \   000145   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
    931          			memcpy(topic, (int8 *)msgPtr + 2, *topic_len);		//复制数据
   \   00014B                ; Setup parameters for call to function memcpy
   \   00014B   8E82         MOV       DPL,R6
   \   00014D   8F83         MOV       DPH,R7
   \   00014F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000152   7402         MOV       A,#0x2
   \   000154   12....       LCALL     ?XSTACK_DISP0_8
   \   000157   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00015A   12....       LCALL     ?DEALLOC_XSTACK8
    932          			
    933          			*payload_len = remain_len - 2 - *topic_len;			//为payload分配内存
   \   00015D   7403         MOV       A,#0x3
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   78..         MOV       R0,#?V0
   \   000164   12....       LCALL     ?L_MOV_X
   \   000167   E5..         MOV       A,?V0
   \   000169   24FE         ADD       A,#-0x2
   \   00016B   12....       LCALL     ?Subroutine10 & 0xFFFF
    934          			if((payload == NULL) || (*payload_len)>MAX_REQ_PAYLOAD_LEN)//如果失败
   \                     ??CrossCallReturnLabel_255:
   \   00016E   7419         MOV       A,#0x19
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000176   6005         JZ        ??MQTT_UnPacketPublish_8
   \   000178   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00017B   4007         JC        ??MQTT_UnPacketPublish_9
    935          			{
    936                  debug("UnPacketPublish 22.\r\n");
   \                     ??MQTT_UnPacketPublish_8:
   \   00017D                ; Setup parameters for call to function debug
   \   00017D   7A..         MOV       R2,#`?<Constant "UnPacketPublish 22.\\r\\n">` & 0xff
   \   00017F   7B..         MOV       R3,#(`?<Constant "UnPacketPublish 22.\\r\\n">` >> 8) & 0xff
   \   000181   02....       LJMP      ??MQTT_UnPacketPublish_7 & 0xFFFF
    937          				return 255;
    938          			}
    939          			
    940          			memset(payload, 0, *payload_len + 1);
   \                     ??MQTT_UnPacketPublish_9:
   \   000184                ; Setup parameters for call to function memset
   \   000184   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018A   7C00         MOV       R4,#0x0
   \   00018C   7D00         MOV       R5,#0x0
   \   00018E   741B         MOV       A,#0x1b
   \   000190   12....       LCALL     ?XSTACK_DISP0_8
   \   000193   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000196   12....       LCALL     ?DEALLOC_XSTACK8
    941          			memcpy(payload, (int8 *)msgPtr + 2 + *topic_len, *payload_len);
   \   000199                ; Setup parameters for call to function memcpy
   \   000199   85..82       MOV       DPL,?V4
   \   00019C   85..83       MOV       DPH,?V5
   \   00019F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001A2   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   0001A5   7402         MOV       A,#0x2
   \   0001A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AA   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0001AD   02....       LJMP      ??MQTT_UnPacketPublish_10 & 0xFFFF
    942          			
    943          		break;
    944          
    945          		case MQTT_QOS_LEVEL1:
    946          		case MQTT_QOS_LEVEL2:
    947          			
    948          			if(*topic_len + 2 > remain_len)
    949          				return 255;
    950          			
    951          			*pkt_id = (uint16)msgPtr[*topic_len + 2] << 8 | msgPtr[*topic_len + 3];
   \                     ??MQTT_UnPacketPublish_4:
   \   0001B0   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0001B3   85..82       MOV       DPL,?XSP + 0
   \   0001B6   85..83       MOV       DPH,?XSP + 1
   \   0001B9   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0001BC   E8           MOV       A,R0
   \   0001BD   FA           MOV       R2,A
   \   0001BE   E9           MOV       A,R1
   \   0001BF   FB           MOV       R3,A
   \   0001C0   741F         MOV       A,#0x1f
   \   0001C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C5   12....       LCALL     ??Subroutine99_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   0001C8   8A82         MOV       DPL,R2
   \   0001CA   8B83         MOV       DPH,R3
   \   0001CC   A3           INC       DPTR
   \   0001CD   A3           INC       DPTR
   \   0001CE   E0           MOVX      A,@DPTR
   \   0001CF   FC           MOV       R4,A
   \   0001D0   E4           CLR       A
   \   0001D1   CC           XCH       A,R4
   \   0001D2   FD           MOV       R5,A
   \   0001D3   8A82         MOV       DPL,R2
   \   0001D5   8B83         MOV       DPH,R3
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   A3           INC       DPTR
   \   0001DA   E0           MOVX      A,@DPTR
   \   0001DB   8882         MOV       DPL,R0
   \   0001DD   8983         MOV       DPH,R1
   \   0001DF   F0           MOVX      @DPTR,A
   \   0001E0   A3           INC       DPTR
   \   0001E1   ED           MOV       A,R5
   \   0001E2   F0           MOVX      @DPTR,A
    952          			if(pkt_id == 0)
   \   0001E3   E8           MOV       A,R0
   \   0001E4   49           ORL       A,R1
   \   0001E5   7003         JNZ       $+5
   \   0001E7   02....       LJMP      ??MQTT_UnPacketPublish_0 & 0xFFFF
    953          				return 255;
    954          			
    955          			//*topic = MQTT_MallocBuffer(*topic_len + 1);			//为topic分配内存
    956          			if((topic == NULL) && (*topic_len)>MAX_CMDID_TOPIC_LEN)
   \   0001EA   E5..         MOV       A,?V6
   \   0001EC   45..         ORL       A,?V7
   \   0001EE   7014         JNZ       ??MQTT_UnPacketPublish_11
   \   0001F0   8E82         MOV       DPL,R6
   \   0001F2   8F83         MOV       DPH,R7
   \   0001F4   C3           CLR       C
   \   0001F5   E0           MOVX      A,@DPTR
   \   0001F6   9433         SUBB      A,#0x33
   \   0001F8   A3           INC       DPTR
   \   0001F9   E0           MOVX      A,@DPTR
   \   0001FA   9400         SUBB      A,#0x0
   \   0001FC   4006         JC        ??MQTT_UnPacketPublish_11
    957                {     
    958                  debug("UnPacketPublish 33.\r\n");
   \   0001FE                ; Setup parameters for call to function debug
   \   0001FE   7A..         MOV       R2,#`?<Constant "UnPacketPublish 33.\\r\\n">` & 0xff
   \   000200   7B..         MOV       R3,#(`?<Constant "UnPacketPublish 33.\\r\\n">` >> 8) & 0xff
   \   000202   804C         SJMP      ??MQTT_UnPacketPublish_7
    959          				return 255;
    960                }
    961                
    962          			memset(topic, 0, *topic_len + 1);
   \                     ??MQTT_UnPacketPublish_11:
   \   000204                ; Setup parameters for call to function memset
   \   000204   8E82         MOV       DPL,R6
   \   000206   8F83         MOV       DPH,R7
   \   000208   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   00020B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00020E   7D00         MOV       R5,#0x0
   \   000210   AA..         MOV       R2,?V6
   \   000212   AB..         MOV       R3,?V7
   \   000214   12....       LCALL     ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000217   12....       LCALL     ?DEALLOC_XSTACK8
    963          			memcpy(topic, (int8 *)msgPtr + 2, *topic_len);		//复制数据
   \   00021A                ; Setup parameters for call to function memcpy
   \   00021A   8E82         MOV       DPL,R6
   \   00021C   8F83         MOV       DPH,R7
   \   00021E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000221   7402         MOV       A,#0x2
   \   000223   12....       LCALL     ?XSTACK_DISP0_8
   \   000226   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000229   12....       LCALL     ?DEALLOC_XSTACK8
    964          			
    965          			*payload_len = remain_len - 4 - *topic_len;
   \   00022C   7403         MOV       A,#0x3
   \   00022E   12....       LCALL     ?XSTACK_DISP0_8
   \   000231   78..         MOV       R0,#?V0
   \   000233   12....       LCALL     ?L_MOV_X
   \   000236   E5..         MOV       A,?V0
   \   000238   24FC         ADD       A,#-0x4
   \   00023A   12....       LCALL     ?Subroutine10 & 0xFFFF
    966          			if((payload == NULL) || (*payload_len>MAX_REQ_PAYLOAD_LEN))								//如果失败
   \                     ??CrossCallReturnLabel_256:
   \   00023D   7419         MOV       A,#0x19
   \   00023F   12....       LCALL     ?XSTACK_DISP0_8
   \   000242   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000245   6005         JZ        ??MQTT_UnPacketPublish_12
   \   000247   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00024A   4009         JC        ??MQTT_UnPacketPublish_13
    967          			{
    968                  debug("UnPacketPublish 44.\r\n");
   \                     ??MQTT_UnPacketPublish_12:
   \   00024C                ; Setup parameters for call to function debug
   \   00024C   7A..         MOV       R2,#`?<Constant "UnPacketPublish 44.\\r\\n">` & 0xff
   \   00024E   7B..         MOV       R3,#(`?<Constant "UnPacketPublish 44.\\r\\n">` >> 8) & 0xff
   \                     ??MQTT_UnPacketPublish_7:
   \   000250   12....       LCALL     `??debug::?relay`; Banked call to: debug
   \   000253   805D         SJMP      ??MQTT_UnPacketPublish_0
    969          				return 255;
    970          			}
    971          			
    972          			memset(payload, 0, *payload_len + 1);
   \                     ??MQTT_UnPacketPublish_13:
   \   000255                ; Setup parameters for call to function memset
   \   000255   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000258   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025B   7C00         MOV       R4,#0x0
   \   00025D   7D00         MOV       R5,#0x0
   \   00025F   741B         MOV       A,#0x1b
   \   000261   12....       LCALL     ?XSTACK_DISP0_8
   \   000264   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000267   12....       LCALL     ?DEALLOC_XSTACK8
    973          			memcpy(payload, (int8 *)msgPtr + 4 + *topic_len, *payload_len);
   \   00026A                ; Setup parameters for call to function memcpy
   \   00026A   85..82       MOV       DPL,?V4
   \   00026D   85..83       MOV       DPH,?V5
   \   000270   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000273   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000276   7402         MOV       A,#0x2
   \   000278   12....       LCALL     ?XSTACK_DISP0_8
   \   00027B   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00027E   A3           INC       DPTR
   \   00027F   A3           INC       DPTR
   \                     ??MQTT_UnPacketPublish_10:
   \   000280   A3           INC       DPTR
   \   000281   A3           INC       DPTR
   \   000282   AC82         MOV       R4,DPL
   \   000284   AD83         MOV       R5,DPH
   \   000286   741B         MOV       A,#0x1b
   \   000288   12....       LCALL     ?XSTACK_DISP0_8
   \   00028B   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00028E   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000291   12....       LCALL     ?DEALLOC_XSTACK8
    974          			
    975          		break;
    976          
    977          		default:
    978          			return 255;
    979          	}
    980          	
    981          	if(strchr((int8 *)topic, '+') || strchr((int8 *)topic, '#'))
                 	          ^
Warning[Pe167]: argument of type "int8 *" is incompatible with parameter of
          type "char const *"

  	if(strchr((int8 *)topic, '+') || strchr((int8 *)topic, '#'))
  	                                        ^
"C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\MqttKit.c",981  Warning[Pe167]: 
          argument of type "int8 *" is incompatible with parameter of type
          "char const *"
   \   000294                ; Setup parameters for call to function strchr
   \   000294   7C2B         MOV       R4,#0x2b
   \   000296   7D00         MOV       R5,#0x0
   \   000298   AA..         MOV       R2,?V6
   \   00029A   AB..         MOV       R3,?V7
   \   00029C   12....       LCALL     `??strchr::?relay`; Banked call to: strchr
   \   00029F   EA           MOV       A,R2
   \   0002A0   4B           ORL       A,R3
   \   0002A1   700F         JNZ       ??MQTT_UnPacketPublish_0
   \   0002A3                ; Setup parameters for call to function strchr
   \   0002A3   7C23         MOV       R4,#0x23
   \   0002A5   7D00         MOV       R5,#0x0
   \   0002A7   AA..         MOV       R2,?V6
   \   0002A9   AB..         MOV       R3,?V7
   \   0002AB   12....       LCALL     `??strchr::?relay`; Banked call to: strchr
   \   0002AE   EA           MOV       A,R2
   \   0002AF   4B           ORL       A,R3
   \   0002B0   6004         JZ        ??MQTT_UnPacketPublish_14
    982          		return 255;
   \                     ??MQTT_UnPacketPublish_0:
   \   0002B2   79FF         MOV       R1,#-0x1
   \   0002B4   8002         SJMP      ??MQTT_UnPacketPublish_2
    983          
    984          	return 0;
   \                     ??MQTT_UnPacketPublish_14:
   \   0002B6   7900         MOV       R1,#0x0
   \                     ??MQTT_UnPacketPublish_2:
   \   0002B8   7407         MOV       A,#0x7
   \   0002BA   02....       LJMP      ??Subroutine95_0 & 0xFFFF
    985          
    986          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine99_0
   \   000004                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FD           MOV       R5,A
   \   000009   AA..         MOV       R2,?V6
   \   00000B   AB..         MOV       R3,?V7
   \   00000D   12....       LCALL     ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine101_0
   \   000006                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F5..         MOV       ?V0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   3400         ADDC      A,#0x0
   \   000009   F5..         MOV       ?V1,A
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET
    987          
    988          //==========================================================
    989          //	函数名称：	MQTT_PacketPublishAck
    990          //
    991          //	函数功能：	Publish Ack消息组包
    992          //
    993          //	入口参数：	pkt_id：packet id
    994          //				mqttPacket：包指针
    995          //
    996          //	返回参数：	0-成功		1-失败原因
    997          //
    998          //	说明：		当收到的Publish消息的QoS等级为1时，需要Ack回复
    999          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1000          uint1 MQTT_PacketPublishAck(uint16 pkt_id, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPublishAck:
   1001          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   1002          
   1003          	MQTT_NewBuffer(mqttPacket, 4);
   \   00000D                ; Setup parameters for call to function MQTT_NewBuffer
   \   00000D   90....       MOV       DPTR,#__Constant_4
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000013   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000016   12....       LCALL     ?DEALLOC_XSTACK8
   1004          	if(mqttPacket->_data == NULL)
   \   000019   85..82       MOV       DPL,?V4
   \   00001C   85..83       MOV       DPH,?V5
   \   00001F   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000022   7004         JNZ       ??MQTT_PacketPublishAck_0
   1005          		return 1;
   \   000024   7901         MOV       R1,#0x1
   \   000026   806A         SJMP      ??MQTT_PacketPublishAck_1
   1006          	
   1007          /*************************************固定头部***********************************************/
   1008          	
   1009          	//固定头部----------------------头部消息-------------------------------------------------
   1010          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PUBACK << 4;
   \                     ??MQTT_PacketPublishAck_0:
   \   000028   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00002B   12....       LCALL     ?L_MOV_X
   \   00002E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000031   7440         MOV       A,#0x40
   \   000033   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000036   12....       LCALL     ?L_MOV_X
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?L_ADD_TO_X
   1011          	
   1012          	//固定头部----------------------剩余长度-------------------------------------------------
   1013          	mqttPacket->_data[mqttPacket->_len++] = 2;
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?L_MOV_X
   \   00004B   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00004E   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000051   12....       LCALL     ?L_MOV_X
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?L_ADD_TO_X
   1014          	
   1015          /*************************************可变头部***********************************************/
   1016          	
   1017          	//可变头部----------------------pkt_id长度-----------------------------------------------
   1018          	mqttPacket->_data[mqttPacket->_len++] = pkt_id >> 8;
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?L_MOV_X
   \   000066   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000069   12....       LCALL     ?L_MOV_X
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?L_ADD_TO_X
   1019          	mqttPacket->_data[mqttPacket->_len++] = pkt_id & 0xff;
   \   000075   8A82         MOV       DPL,R2
   \   000077   8B83         MOV       DPH,R3
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000081   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000084   12....       LCALL     ?L_MOV_X
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?L_ADD_TO_X
   1020          	
   1021          	return 0;
   \   000090   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketPublishAck_1:
   \   000092   02....       LJMP      ??Subroutine107_0 & 0xFFFF
   1022          
   1023          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   AA..         MOV       R2,?V4
   \   000002   AB..         MOV       R3,?V5
   \   000004                REQUIRE ??Subroutine106_0
   \   000004                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000009   7402         MOV       A,#0x2
   \   00000B   22           RET
   1024          
   1025          //==========================================================
   1026          //	函数名称：	MQTT_UnPacketPublishAck
   1027          //
   1028          //	函数功能：	Publish Ack消息解包
   1029          //
   1030          //	入口参数：	rev_data：收到的数据
   1031          //
   1032          //	返回参数：	0-成功		1-失败原因
   1033          //
   1034          //	说明：		
   1035          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1036          uint1 MQTT_UnPacketPublishAck(uint8 *rev_data)
   \                     MQTT_UnPacketPublishAck:
   1037          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1038          
   1039          	if(rev_data[1] != 2)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7019         JNZ       ??MQTT_UnPacketPublishAck_0
   1040          		return 1;
   1041          
   1042          	if(rev_data[2] == MOSQ_MSB(MQTT_PUBLISH_ID) && rev_data[3] == MOSQ_LSB(MQTT_PUBLISH_ID))
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7010         JNZ       ??MQTT_UnPacketPublishAck_0
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   640A         XRL       A,#0xa
   \   000021   7004         JNZ       ??MQTT_UnPacketPublishAck_0
   1043          		return 0;
   \   000023   7900         MOV       R1,#0x0
   \   000025   8002         SJMP      ??MQTT_UnPacketPublishAck_1
   1044          	else
   1045          		return 1;
   \                     ??MQTT_UnPacketPublishAck_0:
   \   000027   7901         MOV       R1,#0x1
   \                     ??MQTT_UnPacketPublishAck_1:
   \   000029                REQUIRE ?Subroutine1
   \   000029                ; // Fall through to label ?Subroutine1
   1046          
   1047          }
   1048          
   1049          //==========================================================
   1050          //	函数名称：	MQTT_PacketPublishRec
   1051          //
   1052          //	函数功能：	Publish Rec消息组包
   1053          //
   1054          //	入口参数：	pkt_id：packet id
   1055          //				mqttPacket：包指针
   1056          //
   1057          //	返回参数：	0-成功		1-失败原因
   1058          //
   1059          //	说明：		当收到的Publish消息的QoS等级为2时，先收到rec
   1060          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1061          uint1 MQTT_PacketPublishRec(uint16 pkt_id, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPublishRec:
   1062          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   1063          
   1064          	MQTT_NewBuffer(mqttPacket, 4);
   \   00000D                ; Setup parameters for call to function MQTT_NewBuffer
   \   00000D   90....       MOV       DPTR,#__Constant_4
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000013   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000016   12....       LCALL     ?DEALLOC_XSTACK8
   1065          	if(mqttPacket->_data == NULL)
   \   000019   85..82       MOV       DPL,?V4
   \   00001C   85..83       MOV       DPH,?V5
   \   00001F   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000022   7004         JNZ       ??MQTT_PacketPublishRec_0
   1066          		return 1;
   \   000024   7901         MOV       R1,#0x1
   \   000026   806A         SJMP      ??MQTT_PacketPublishRec_1
   1067          	
   1068          /*************************************固定头部***********************************************/
   1069          	
   1070          	//固定头部----------------------头部消息-------------------------------------------------
   1071          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PUBREC << 4;
   \                     ??MQTT_PacketPublishRec_0:
   \   000028   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00002B   12....       LCALL     ?L_MOV_X
   \   00002E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000031   7450         MOV       A,#0x50
   \   000033   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000036   12....       LCALL     ?L_MOV_X
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?L_ADD_TO_X
   1072          	
   1073          	//固定头部----------------------剩余长度-------------------------------------------------
   1074          	mqttPacket->_data[mqttPacket->_len++] = 2;
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?L_MOV_X
   \   00004B   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00004E   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000051   12....       LCALL     ?L_MOV_X
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?L_ADD_TO_X
   1075          	
   1076          /*************************************可变头部***********************************************/
   1077          	
   1078          	//可变头部----------------------pkt_id长度-----------------------------------------------
   1079          	mqttPacket->_data[mqttPacket->_len++] = pkt_id >> 8;
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?L_MOV_X
   \   000066   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000069   12....       LCALL     ?L_MOV_X
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?L_ADD_TO_X
   1080          	mqttPacket->_data[mqttPacket->_len++] = pkt_id & 0xff;
   \   000075   8A82         MOV       DPL,R2
   \   000077   8B83         MOV       DPH,R3
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000081   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000084   12....       LCALL     ?L_MOV_X
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?L_ADD_TO_X
   1081          	
   1082          	return 0;
   \   000090   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketPublishRec_1:
   \   000092   80..         SJMP      ??Subroutine107_0
   1083          
   1084          }
   1085          
   1086          //==========================================================
   1087          //	函数名称：	MQTT_UnPacketPublishRec
   1088          //
   1089          //	函数功能：	Publish Rec消息解包
   1090          //
   1091          //	入口参数：	rev_data：接收到的数据
   1092          //
   1093          //	返回参数：	0-成功		1-失败
   1094          //
   1095          //	说明：		
   1096          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1097          uint1 MQTT_UnPacketPublishRec(uint8 *rev_data)
   \                     MQTT_UnPacketPublishRec:
   1098          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1099          
   1100          	if(rev_data[1] != 2)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7019         JNZ       ??MQTT_UnPacketPublishRec_0
   1101          		return 1;
   1102          
   1103          	if(rev_data[2] == MOSQ_MSB(MQTT_PUBLISH_ID) && rev_data[3] == MOSQ_LSB(MQTT_PUBLISH_ID))
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7010         JNZ       ??MQTT_UnPacketPublishRec_0
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   640A         XRL       A,#0xa
   \   000021   7004         JNZ       ??MQTT_UnPacketPublishRec_0
   1104          		return 0;
   \   000023   7900         MOV       R1,#0x0
   \   000025   8002         SJMP      ??MQTT_UnPacketPublishRec_1
   1105          	else
   1106          		return 1;
   \                     ??MQTT_UnPacketPublishRec_0:
   \   000027   7901         MOV       R1,#0x1
   \                     ??MQTT_UnPacketPublishRec_1:
   \   000029   02....       LJMP      ?Subroutine1 & 0xFFFF
   1107          
   1108          }
   1109          
   1110          //==========================================================
   1111          //	函数名称：	MQTT_PacketPublishRel
   1112          //
   1113          //	函数功能：	Publish Rel消息组包
   1114          //
   1115          //	入口参数：	pkt_id：packet id
   1116          //				mqttPacket：包指针
   1117          //
   1118          //	返回参数：	0-成功		1-失败原因
   1119          //
   1120          //	说明：		当收到的Publish消息的QoS等级为2时，先收到rec，再回复rel
   1121          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1122          uint1 MQTT_PacketPublishRel(uint16 pkt_id, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPublishRel:
   1123          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   1124          
   1125          	MQTT_NewBuffer(mqttPacket, 4);
   \   00000D                ; Setup parameters for call to function MQTT_NewBuffer
   \   00000D   90....       MOV       DPTR,#__Constant_4
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000013   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000016   12....       LCALL     ?DEALLOC_XSTACK8
   1126          	if(mqttPacket->_data == NULL)
   \   000019   85..82       MOV       DPL,?V4
   \   00001C   85..83       MOV       DPH,?V5
   \   00001F   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000022   7004         JNZ       ??MQTT_PacketPublishRel_0
   1127          		return 1;
   \   000024   7901         MOV       R1,#0x1
   \   000026   806A         SJMP      ??MQTT_PacketPublishRel_1
   1128          	
   1129          /*************************************固定头部***********************************************/
   1130          	
   1131          	//固定头部----------------------头部消息-------------------------------------------------
   1132          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PUBREL << 4 | 0x02;
   \                     ??MQTT_PacketPublishRel_0:
   \   000028   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00002B   12....       LCALL     ?L_MOV_X
   \   00002E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000031   7462         MOV       A,#0x62
   \   000033   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000036   12....       LCALL     ?L_MOV_X
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?L_ADD_TO_X
   1133          	
   1134          	//固定头部----------------------剩余长度-------------------------------------------------
   1135          	mqttPacket->_data[mqttPacket->_len++] = 2;
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?L_MOV_X
   \   00004B   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00004E   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000051   12....       LCALL     ?L_MOV_X
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?L_ADD_TO_X
   1136          	
   1137          /*************************************可变头部***********************************************/
   1138          	
   1139          	//可变头部----------------------pkt_id长度-----------------------------------------------
   1140          	mqttPacket->_data[mqttPacket->_len++] = pkt_id >> 8;
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?L_MOV_X
   \   000066   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000069   12....       LCALL     ?L_MOV_X
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?L_ADD_TO_X
   1141          	mqttPacket->_data[mqttPacket->_len++] = pkt_id & 0xff;
   \   000075   8A82         MOV       DPL,R2
   \   000077   8B83         MOV       DPH,R3
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000081   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000084   12....       LCALL     ?L_MOV_X
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?L_ADD_TO_X
   1142          	
   1143          	return 0;
   \   000090   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketPublishRel_1:
   \   000092   02....       LJMP      ??Subroutine107_0 & 0xFFFF
   1144          
   1145          }
   1146          
   1147          //==========================================================
   1148          //	函数名称：	MQTT_UnPacketPublishRel
   1149          //
   1150          //	函数功能：	Publish Rel消息解包
   1151          //
   1152          //	入口参数：	rev_data：接收到的数据
   1153          //
   1154          //	返回参数：	0-成功		1-失败
   1155          //
   1156          //	说明：		
   1157          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1158          uint1 MQTT_UnPacketPublishRel(uint8 *rev_data, uint16 pkt_id)
   \                     MQTT_UnPacketPublishRel:
   1159          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1160          
   1161          	if(rev_data[1] != 2)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   701F         JNZ       ??MQTT_UnPacketPublishRel_0
   1162          		return 1;
   1163          
   1164          	if(rev_data[2] == MOSQ_MSB(pkt_id) && rev_data[3] == MOSQ_LSB(pkt_id))
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   C0E0         PUSH      A
   \   000017   ED           MOV       A,R5
   \   000018   F8           MOV       R0,A
   \   000019   D0E0         POP       A
   \   00001B   68           XRL       A,R0
   \   00001C   700F         JNZ       ??MQTT_UnPacketPublishRel_0
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6C           XRL       A,R4
   \   000027   7004         JNZ       ??MQTT_UnPacketPublishRel_0
   1165          		return 0;
   \   000029   7900         MOV       R1,#0x0
   \   00002B   8002         SJMP      ??MQTT_UnPacketPublishRel_1
   1166          	else
   1167          		return 1;
   \                     ??MQTT_UnPacketPublishRel_0:
   \   00002D   7901         MOV       R1,#0x1
   \                     ??MQTT_UnPacketPublishRel_1:
   \   00002F   02....       LJMP      ?Subroutine1 & 0xFFFF
   1168          
   1169          }
   1170          
   1171          //==========================================================
   1172          //	函数名称：	MQTT_PacketPublishComp
   1173          //
   1174          //	函数功能：	Publish Comp消息组包
   1175          //
   1176          //	入口参数：	pkt_id：packet id
   1177          //				mqttPacket：包指针
   1178          //
   1179          //	返回参数：	0-成功		1-失败原因
   1180          //
   1181          //	说明：		当收到的Publish消息的QoS等级为2时，先收到rec，再回复rel
   1182          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1183          uint1 MQTT_PacketPublishComp(uint16 pkt_id, MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPublishComp:
   1184          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   1185          
   1186          	MQTT_NewBuffer(mqttPacket, 4);
   \   00000D                ; Setup parameters for call to function MQTT_NewBuffer
   \   00000D   90....       MOV       DPTR,#__Constant_4
   \   000010   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000013   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000016   12....       LCALL     ?DEALLOC_XSTACK8
   1187          	if(mqttPacket->_data == NULL)
   \   000019   85..82       MOV       DPL,?V4
   \   00001C   85..83       MOV       DPH,?V5
   \   00001F   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000022   7004         JNZ       ??MQTT_PacketPublishComp_0
   1188          		return 1;
   \   000024   7901         MOV       R1,#0x1
   \   000026   806A         SJMP      ??MQTT_PacketPublishComp_1
   1189          	
   1190          /*************************************固定头部***********************************************/
   1191          	
   1192          	//固定头部----------------------头部消息-------------------------------------------------
   1193          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PUBCOMP << 4;
   \                     ??MQTT_PacketPublishComp_0:
   \   000028   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00002B   12....       LCALL     ?L_MOV_X
   \   00002E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000031   7470         MOV       A,#0x70
   \   000033   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000036   12....       LCALL     ?L_MOV_X
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?L_ADD_TO_X
   1194          	
   1195          	//固定头部----------------------剩余长度-------------------------------------------------
   1196          	mqttPacket->_data[mqttPacket->_len++] = 2;
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?L_MOV_X
   \   00004B   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00004E   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000051   12....       LCALL     ?L_MOV_X
   \   000054   8A82         MOV       DPL,R2
   \   000056   8B83         MOV       DPH,R3
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?L_ADD_TO_X
   1197          	
   1198          /*************************************可变头部***********************************************/
   1199          	
   1200          	//可变头部----------------------pkt_id长度-----------------------------------------------
   1201          	mqttPacket->_data[mqttPacket->_len++] = pkt_id >> 8;
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?L_MOV_X
   \   000066   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000069   12....       LCALL     ?L_MOV_X
   \   00006C   8A82         MOV       DPL,R2
   \   00006E   8B83         MOV       DPH,R3
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?L_ADD_TO_X
   1202          	mqttPacket->_data[mqttPacket->_len++] = pkt_id & 0xff;
   \   000075   8A82         MOV       DPL,R2
   \   000077   8B83         MOV       DPH,R3
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?L_MOV_X
   \   00007E   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000081   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000084   12....       LCALL     ?L_MOV_X
   \   000087   8A82         MOV       DPL,R2
   \   000089   8B83         MOV       DPH,R3
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?L_ADD_TO_X
   1203          	
   1204          	return 0;
   \   000090   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketPublishComp_1:
   \   000092   02....       LJMP      ??Subroutine107_0 & 0xFFFF
   1205          
   1206          }
   1207          
   1208          //==========================================================
   1209          //	函数名称：	MQTT_UnPacketPublishComp
   1210          //
   1211          //	函数功能：	Publish Comp消息解包
   1212          //
   1213          //	入口参数：	rev_data：接收到的数据
   1214          //
   1215          //	返回参数：	0-成功		1-失败
   1216          //
   1217          //	说明：		
   1218          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1219          uint1 MQTT_UnPacketPublishComp(uint8 *rev_data)
   \                     MQTT_UnPacketPublishComp:
   1220          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1221          
   1222          	if(rev_data[1] != 2)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7019         JNZ       ??MQTT_UnPacketPublishComp_0
   1223          		return 1;
   1224          
   1225          	if(rev_data[2] == MOSQ_MSB(MQTT_PUBLISH_ID) && rev_data[3] == MOSQ_LSB(MQTT_PUBLISH_ID))
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7010         JNZ       ??MQTT_UnPacketPublishComp_0
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   640A         XRL       A,#0xa
   \   000021   7004         JNZ       ??MQTT_UnPacketPublishComp_0
   1226          		return 0;
   \   000023   7900         MOV       R1,#0x0
   \   000025   8002         SJMP      ??MQTT_UnPacketPublishComp_1
   1227          	else
   1228          		return 1;
   \                     ??MQTT_UnPacketPublishComp_0:
   \   000027   7901         MOV       R1,#0x1
   \                     ??MQTT_UnPacketPublishComp_1:
   \   000029   02....       LJMP      ?Subroutine1 & 0xFFFF
   1229          
   1230          }
   1231          
   1232          //==========================================================
   1233          //	函数名称：	MQTT_PacketPing
   1234          //
   1235          //	函数功能：	心跳请求组包
   1236          //
   1237          //	入口参数：	mqttPacket：包指针
   1238          //
   1239          //	返回参数：	0-成功		1-失败
   1240          //
   1241          //	说明：		
   1242          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1243          uint1 MQTT_PacketPing(MQTT_PACKET_STRUCTURE *mqttPacket)
   \                     MQTT_PacketPing:
   1244          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1245          
   1246          	MQTT_NewBuffer(mqttPacket, 2);
   \   000009                ; Setup parameters for call to function MQTT_NewBuffer
   \   000009   90....       MOV       DPTR,#__Constant_2
   \   00000C   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00000F   12....       LCALL     ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000012   12....       LCALL     ?DEALLOC_XSTACK8
   1247          	if(mqttPacket->_data == NULL)
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   12....       LCALL     ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   00001C   7004         JNZ       ??MQTT_PacketPing_0
   1248          		return 1;
   \   00001E   7901         MOV       R1,#0x1
   \   000020   803B         SJMP      ??MQTT_PacketPing_1
   1249          	
   1250          /*************************************固定头部***********************************************/
   1251          	
   1252          	//固定头部----------------------头部消息-------------------------------------------------
   1253          	mqttPacket->_data[mqttPacket->_len++] = MQTT_PKT_PINGREQ << 4;
   \                     ??MQTT_PacketPing_0:
   \   000022   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000025   12....       LCALL     ?L_MOV_X
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   12....       LCALL     ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   00002F   74C0         MOV       A,#-0x40
   \   000031   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000034   12....       LCALL     ?L_MOV_X
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   78..         MOV       R0,#?V0
   \   00003D   12....       LCALL     ?L_ADD_TO_X
   1254          	
   1255          	//固定头部----------------------剩余长度-------------------------------------------------
   1256          	mqttPacket->_data[mqttPacket->_len++] = 0;
   \   000040   8A82         MOV       DPL,R2
   \   000042   8B83         MOV       DPH,R3
   \   000044   78..         MOV       R0,#?V0
   \   000046   12....       LCALL     ?L_MOV_X
   \   000049   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00004C   12....       LCALL     ??Subroutine98_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   00004F   12....       LCALL     ?L_MOV_X
   \   000052   8A82         MOV       DPL,R2
   \   000054   8B83         MOV       DPH,R3
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?L_ADD_TO_X
   1257          	
   1258          	return 0;
   \   00005B   7900         MOV       R1,#0x0
   \                     ??MQTT_PacketPing_1:
   \   00005D   02....       LJMP      ?Subroutine3 & 0xFFFF
   1259          
   1260          }

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "$creq">`:
   \   000000   24637265     DB "$creq"
   \            7100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "$dp">`:
   \   000000   24647000     DB "$dp"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UnPacket mem 11\\r\\n">`:
   \   000000   556E5061     DB "UnPacket mem 11\015\012"
   \            636B6574
   \            206D656D
   \            2031310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UnPacket mem 22\\r\\n">`:
   \   000000   556E5061     DB "UnPacket mem 22\015\012"
   \            636B6574
   \            206D656D
   \            2032320D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "$crsp/%s">`:
   \   000000   24637273     DB "$crsp/%s"
   \            702F2573
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UnPacketPublish 11.\\r\\n">`:
   \   000000   556E5061     DB "UnPacketPublish 11.\015\012"
   \            636B6574
   \            5075626C
   \            69736820
   \            31312E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UnPacketPublish 22.\\r\\n">`:
   \   000000   556E5061     DB "UnPacketPublish 22.\015\012"
   \            636B6574
   \            5075626C
   \            69736820
   \            32322E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UnPacketPublish 33.\\r\\n">`:
   \   000000   556E5061     DB "UnPacketPublish 33.\015\012"
   \            636B6574
   \            5075626C
   \            69736820
   \            33332E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UnPacketPublish 44.\\r\\n">`:
   \   000000   556E5061     DB "UnPacketPublish 44.\015\012"
   \            636B6574
   \            5075626C
   \            69736820
   \            34342E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5:
   \   000000   05000000     DD 5

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_200000:
   \   000000   00002000     DD 2097152

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4:
   \   000000   04000000     DD 4

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2:
   \   000000   02000000     DD 2

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3:
   \   000000   03000000     DD 3

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     26   MQTT_DeleteBuffer
      1     40   MQTT_DumpLength
      0     46   MQTT_NewBuffer
      0     82   MQTT_PacketCmdResp
        0     80   -> MQTT_PacketPublish
        0     66   -> sprintf
        0     64   -> strlen
      1     43   MQTT_PacketConnect
        0     24   -> MQTT_DeleteBuffer
        0     24   -> MQTT_DumpLength
        0     28   -> MQTT_NewBuffer
        0     26   -> osal_memset
        0     24   -> strlen
        0     26   -> strncat
      0     16   MQTT_PacketDisConnect
        0     16   -> MQTT_NewBuffer
      0     16   MQTT_PacketPing
        0     16   -> MQTT_NewBuffer
      1    110   MQTT_PacketPublish
        0     26   -> MQTT_DeleteBuffer
        0     26   -> MQTT_DumpLength
        0     30   -> MQTT_NewBuffer
        0     28   -> memset
        0     28   -> strncat
      1     18   MQTT_PacketPublishAck
        0     18   -> MQTT_NewBuffer
      1     18   MQTT_PacketPublishComp
        0     18   -> MQTT_NewBuffer
      1     18   MQTT_PacketPublishRec
        0     18   -> MQTT_NewBuffer
      1     18   MQTT_PacketPublishRel
        0     18   -> MQTT_NewBuffer
      1     35   MQTT_PacketSaveData
        0     31   -> MQTT_PacketPublish
      1     31   MQTT_PacketSubscribe
        0     24   -> MQTT_DeleteBuffer
        0     24   -> MQTT_DumpLength
        0     28   -> MQTT_NewBuffer
        0     24   -> strlen
        0     26   -> strncat
      1     28   MQTT_PacketUnSubscribe
        0     22   -> MQTT_DeleteBuffer
        0     22   -> MQTT_DumpLength
        0     26   -> MQTT_NewBuffer
        0     22   -> strlen
        0     24   -> strncat
      0     47   MQTT_ReadLength
      0     26   MQTT_UnPacketCmd
        0     22   -> MQTT_ReadLength
        0     18   -> debug
        0     20   -> memcpy
        0     20   -> memset
        0     18   -> strchr
      2      0   MQTT_UnPacketConnectAck
      1     37   MQTT_UnPacketPublish
        0     27   -> MQTT_ReadLength
        0     23   -> debug
        0     25   -> memcpy
        0     25   -> memset
        0     23   -> strchr
        0     23   -> strstr
      2      0   MQTT_UnPacketPublishAck
      2      0   MQTT_UnPacketPublishComp
      2      0   MQTT_UnPacketPublishRec
      3      0   MQTT_UnPacketPublishRel
      0     20   MQTT_UnPacketRecv
        0     20   -> MQTT_ReadLength
        0     16   -> strstr
      2      0   MQTT_UnPacketSubscribe
      2      0   MQTT_UnPacketUnSubscribe


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Constant "">
       6  ?<Constant "$creq">
       9  ?<Constant "$crsp/%s">
       4  ?<Constant "$dp">
      18  ?<Constant "UnPacket mem 11\r\n">
      18  ?<Constant "UnPacket mem 22\r\n">
      22  ?<Constant "UnPacketPublish 11.\r\n">
      22  ?<Constant "UnPacketPublish 22.\r\n">
      22  ?<Constant "UnPacketPublish 33.\r\n">
      22  ?<Constant "UnPacketPublish 44.\r\n">
      50  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       6  ??Subroutine100_0
      14  ??Subroutine101_0
       8  ??Subroutine102_0
       1  ??Subroutine103_0
       8  ??Subroutine104_0
       4  ??Subroutine105_0
       6  ??Subroutine106_0
       5  ??Subroutine107_0
       6  ??Subroutine84_0
       6  ??Subroutine85_0
       6  ??Subroutine86_0
       6  ??Subroutine87_0
       5  ??Subroutine88_0
       6  ??Subroutine89_0
       7  ??Subroutine90_0
       1  ??Subroutine91_0
       5  ??Subroutine92_0
       7  ??Subroutine93_0
      13  ??Subroutine94_0
       3  ??Subroutine95_0
       5  ??Subroutine96_0
       7  ??Subroutine97_0
       7  ??Subroutine98_0
       6  ??Subroutine99_0
       2  ?Subroutine0
       7  ?Subroutine1
      21  ?Subroutine10
       4  ?Subroutine11
       4  ?Subroutine12
       3  ?Subroutine13
      15  ?Subroutine14
      18  ?Subroutine15
       5  ?Subroutine16
       4  ?Subroutine17
      10  ?Subroutine18
      11  ?Subroutine19
       3  ?Subroutine2
       5  ?Subroutine20
      17  ?Subroutine21
      12  ?Subroutine22
       4  ?Subroutine23
       6  ?Subroutine24
      11  ?Subroutine25
      16  ?Subroutine26
      12  ?Subroutine27
      12  ?Subroutine28
       9  ?Subroutine29
       5  ?Subroutine3
      18  ?Subroutine30
       6  ?Subroutine31
       6  ?Subroutine32
       4  ?Subroutine33
       5  ?Subroutine34
       4  ?Subroutine35
       6  ?Subroutine36
      15  ?Subroutine37
       7  ?Subroutine38
      17  ?Subroutine39
      10  ?Subroutine4
       9  ?Subroutine40
       5  ?Subroutine41
       4  ?Subroutine42
       4  ?Subroutine43
       8  ?Subroutine44
      10  ?Subroutine45
      10  ?Subroutine46
       4  ?Subroutine47
       4  ?Subroutine48
       8  ?Subroutine49
       4  ?Subroutine5
      15  ?Subroutine50
       8  ?Subroutine51
       6  ?Subroutine52
       6  ?Subroutine53
       5  ?Subroutine54
       4  ?Subroutine55
      16  ?Subroutine56
      12  ?Subroutine57
      14  ?Subroutine58
      14  ?Subroutine59
      12  ?Subroutine6
      13  ?Subroutine60
       4  ?Subroutine61
       8  ?Subroutine62
      14  ?Subroutine63
      10  ?Subroutine64
       3  ?Subroutine65
      13  ?Subroutine66
      16  ?Subroutine67
      10  ?Subroutine68
       8  ?Subroutine69
      20  ?Subroutine7
       8  ?Subroutine70
      12  ?Subroutine71
       4  ?Subroutine72
       2  ?Subroutine73
       4  ?Subroutine74
       7  ?Subroutine75
      10  ?Subroutine76
      12  ?Subroutine77
      17  ?Subroutine78
       8  ?Subroutine79
      12  ?Subroutine8
       9  ?Subroutine80
       7  ?Subroutine81
       6  ?Subroutine82
       9  ?Subroutine83
       6  ?Subroutine9
      26  MQTT_DeleteBuffer
      96  MQTT_DumpLength
     119  MQTT_NewBuffer
     134  MQTT_PacketCmdResp
    1281  MQTT_PacketConnect
      96  MQTT_PacketDisConnect
      96  MQTT_PacketPing
     755  MQTT_PacketPublish
     149  MQTT_PacketPublishAck
     149  MQTT_PacketPublishComp
     148  MQTT_PacketPublishRec
     149  MQTT_PacketPublishRel
     176  MQTT_PacketSaveData
     540  MQTT_PacketSubscribe
     500  MQTT_PacketUnSubscribe
     208  MQTT_ReadLength
     259  MQTT_UnPacketCmd
      47  MQTT_UnPacketConnectAck
     701  MQTT_UnPacketPublish
      41  MQTT_UnPacketPublishAck
      44  MQTT_UnPacketPublishComp
      44  MQTT_UnPacketPublishRec
      50  MQTT_UnPacketPublishRel
     164  MQTT_UnPacketRecv
      63  MQTT_UnPacketSubscribe
      32  MQTT_UnPacketUnSubscribe
       4  __Constant_0
       4  __Constant_1
       4  __Constant_2
       4  __Constant_200000
       4  __Constant_3
       4  __Constant_4
       4  __Constant_5
     156  -- Other

 
 6 963 bytes in segment BANKED_CODE
   156 bytes in segment BANK_RELAYS
   222 bytes in segment XDATA_ROM_C
 
   156 bytes of CODE     memory
   194 bytes of CONST    memory (+ 28 bytes shared)
 6 963 bytes of HUGECODE memory

Errors: none
Warnings: 42
