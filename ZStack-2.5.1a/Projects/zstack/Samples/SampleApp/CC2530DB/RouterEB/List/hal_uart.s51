///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        27/May/2020  18:08:55 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢ /
//                          »·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Òé /
//                          )\ZStack-2.5.1a\Components\hal\target\CC2530EB\ha /
//                          l_uart.c                                          /
//    Command line       =  -f "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼° /
//                          ¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTT /
//                          Ð­Òé)\ZStack-2.5.1a\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.c /
//                          fg" (-DCPU32MHZ -DROOT=__near_func                /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg" /
//                           (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0    /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×Ê /
//                          ÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ /
//                          ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Component /
//                          s\hal\target\CC2530EB\hal_uart.c" -D ZTOOL_P1 -D  /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\RouterEB\List\" -lA                    /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\RouterEB\List\" --diag_suppress        /
//                          Pe001,Pa010 -o "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\ /
//                          Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ /
//                          ÀïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\S /
//                          amples\SampleApp\CC2530DB\RouterEB\Obj\" -e       /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.° /
//                          ¢ÀïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\Source\" -I         /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\ZMain\TI2530DB\" -I           /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\..\..\Components\hal\include\ /
//                          " -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ /
//                          ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQ /
//                          TTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\Samples\Sam /
//                          pleApp\CC2530DB\..\..\..\..\..\Components\hal\tar /
//                          get\CC2530EB\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4 /
//                          .3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7 /
//                          .°¢ÀïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\include\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×Ê /
//                          ÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ /
//                          ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\ /
//                          zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ /
//                          Components\mac\high_level\" -I                    /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\..\..\Components\mac\low_leve /
//                          l\srf04\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§ /
//                          Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢Àï /
//                          ÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\low_level\srf04\single_chip\" -I             /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\..\..\Components\mt\" -I      /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\..\..\Components\osal\include /
//                          \" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒ /
//                          Ô¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(M /
//                          QTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\..\..\..\..\..\Components\servic /
//                          es\saddr\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ /
//                          §Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢À /
//                          ïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\Component /
//                          s\services\sdata\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁ /
//                          Ï-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\Ê /
//                          µÑé7.°¢ÀïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\af\" -I                           /
//                          "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· /
//                          ¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Ò /
//                          é)\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\..\..\Components\stack\nwk\"  /
//                          -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼° /
//                          ¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTT /
//                          Ð­Òé)\ZStack-2.5.1a\Projects\zstack\Samples\Sampl /
//                          eApp\CC2530DB\..\..\..\..\..\Components\stack\sap /
//                          i\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³Ì /
//                          ÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT( /
//                          MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\..\..\Components\stack /
//                          \sec\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°À /
//                          ý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆI /
//                          OT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\..\..\..\..\Components\st /
//                          ack\sys\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§ /
//                          Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢Àï /
//                          ÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \stack\zdo\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.° /
//                          ¢ÀïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\" -I "I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ /
//                          §Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢À /
//                          ïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\f8w\" -Ohz                                 /
//    List file          =  I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢ /
//                          »·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Òé /
//                          )\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp /
//                          \CC2530DB\RouterEB\List\hal_uart.s51              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_uart

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??HalUARTInit?relay
        FUNCTION ??HalUARTInit?relay,0203H
        FUNCTION ??HalUARTInitDMA?relay,0203H
        PUBLIC ??HalUARTIsrDMA?relay
        FUNCTION ??HalUARTIsrDMA?relay,0203H
        PUBLIC ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,0203H
        FUNCTION ??HalUARTOpenDMA?relay,0203H
        PUBLIC ??HalUARTPoll?relay
        FUNCTION ??HalUARTPoll?relay,0203H
        FUNCTION ??HalUARTPollDMA?relay,0203H
        FUNCTION ??HalUARTPollISR?relay,0203H
        PUBLIC ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,0203H
        FUNCTION ??HalUARTReadDMA?relay,0203H
        PUBLIC ??HalUARTReadISR?relay
        FUNCTION ??HalUARTReadISR?relay,0203H
        PUBLIC ??HalUARTResume?relay
        FUNCTION ??HalUARTResume?relay,0203H
        FUNCTION ??HalUARTRxAvailDMA?relay,0203H
        PUBLIC ??HalUARTSuspend?relay
        FUNCTION ??HalUARTSuspend?relay,0203H
        PUBLIC ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,0203H
        FUNCTION ??HalUARTWriteDMA?relay,0203H
        PUBLIC ??HalUARTWriteISR?relay
        FUNCTION ??HalUARTWriteISR?relay,0203H
        PUBLIC ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,0203H
        PUBWEAK `??halUart1RxIsr??INTVEC 27`
        PUBWEAK `??halUart1TxIsr??INTVEC 115`
        PUBWEAK ADCCFG
        PUBWEAK DMAARM
        PUBWEAK DMAIRQ
        PUBWEAK DMAREQ
        PUBLIC HalUARTInit
        FUNCTION HalUARTInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION HalUARTInitDMA,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTIsrDMA
        FUNCTION HalUARTIsrDMA,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTOpen
        FUNCTION HalUARTOpen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION HalUARTOpenDMA,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTPoll
        FUNCTION HalUARTPoll,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION HalUARTPollDMA,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION HalUARTPollISR,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTRead
        FUNCTION HalUARTRead,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION HalUARTReadDMA,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC HalUARTReadISR
        FUNCTION HalUARTReadISR,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalUARTResume
        FUNCTION HalUARTResume,0203H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION HalUARTRxAvailDMA,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalUARTSuspend
        FUNCTION HalUARTSuspend,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalUARTWrite
        FUNCTION HalUARTWrite,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION HalUARTWriteDMA,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC HalUARTWriteISR
        FUNCTION HalUARTWriteISR,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK IEN2
        PUBWEAK P0DIR
        PUBWEAK P0IEN
        PUBWEAK P0SEL
        PUBWEAK P2DIR
        PUBWEAK PERCFG
        PUBWEAK ST0
        PUBWEAK U0BAUD
        PUBWEAK U0CSR
        PUBWEAK U0GCR
        PUBWEAK U0UCR
        PUBWEAK U1BAUD
        PUBWEAK U1DBUF
        PUBWEAK U1GCR
        PUBWEAK U1UCR
        PUBWEAK _A_IEN0
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P0
        PUBWEAK _A_U1CSR
        PUBLIC halUart1RxIsr
        FUNCTION halUart1RxIsr,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 7, STACK
        PUBLIC halUart1TxIsr
        FUNCTION halUart1TxIsr,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 7, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
HalUARTInit         SYMBOL "HalUARTInit"
??HalUARTInit?relay SYMBOL "?relay", HalUARTInit
HalUARTIsrDMA       SYMBOL "HalUARTIsrDMA"
??HalUARTIsrDMA?relay SYMBOL "?relay", HalUARTIsrDMA
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTPoll         SYMBOL "HalUARTPoll"
??HalUARTPoll?relay SYMBOL "?relay", HalUARTPoll
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
HalUARTReadISR      SYMBOL "HalUARTReadISR"
??HalUARTReadISR?relay SYMBOL "?relay", HalUARTReadISR
HalUARTResume       SYMBOL "HalUARTResume"
??HalUARTResume?relay SYMBOL "?relay", HalUARTResume
HalUARTSuspend      SYMBOL "HalUARTSuspend"
??HalUARTSuspend?relay SYMBOL "?relay", HalUARTSuspend
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
HalUARTWriteISR     SYMBOL "HalUARTWriteISR"
??HalUARTWriteISR?relay SYMBOL "?relay", HalUARTWriteISR
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
halUart1RxIsr       SYMBOL "halUart1RxIsr"
`??halUart1RxIsr??INTVEC 27` SYMBOL "??INTVEC 27", halUart1RxIsr
halUart1TxIsr       SYMBOL "halUart1TxIsr"
`??halUart1TxIsr??INTVEC 115` SYMBOL "??INTVEC 115", halUart1TxIsr

        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN dmaCh1234

// I:\zigbee\×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.3\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\µÚÆßÕÂ.×ÛºÏÊµÑé\ÊµÑé7.°¢ÀïÔÆIOT(MQTTÐ­Òé)\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_uart.c
//    1 /**************************************************************************************************
//    2   Filename:       _hal_uart.c
//    3   Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
//    4   Revision:       $Revision: 20142 $
//    5 
//    6   Description: This file contains the interface to the H/W UART driver.
//    7 
//    8 
//    9   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "hal_board_cfg.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,086H
// unsigned char volatile __sfr U0CSR
U0CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,095H
// unsigned char volatile __sfr ST0
ST0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c2H
// unsigned char volatile __sfr U0BAUD
U0BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c4H
// unsigned char volatile __sfr U0UCR
U0UCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c5H
// unsigned char volatile __sfr U0GCR
U0GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d1H
// unsigned char volatile __sfr DMAIRQ
DMAIRQ:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d7H
// unsigned char volatile __sfr DMAREQ
DMAREQ:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f8H
// union <unnamed> volatile __sfr _A_U1CSR
_A_U1CSR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f9H
// unsigned char volatile __sfr U1DBUF
U1DBUF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0faH
// unsigned char volatile __sfr U1BAUD
U1BAUD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fbH
// unsigned char volatile __sfr U1UCR
U1UCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fcH
// unsigned char volatile __sfr U1GCR
U1GCR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   45 #include "hal_defs.h"
//   46 #include "hal_types.h"
//   47 #include "hal_uart.h"
//   48 
//   49 /*********************************************************************
//   50  * MACROS
//   51  */
//   52 
//   53 /*********************************************************************
//   54  * TYPEDEFS
//   55  */
//   56 
//   57 /*********************************************************************
//   58  * CONSTANTS
//   59  */
//   60 
//   61 /*********************************************************************
//   62  * GLOBAL VARIABLES
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * GLOBAL FUNCTIONS
//   67  */
//   68 
//   69 /*********************************************************************
//   70  * LOCAL VARIABLES
//   71  */
//   72 
//   73 /*********************************************************************
//   74  * LOCAL FUNCTIONS
//   75  */
//   76 
//   77 #if HAL_UART_DMA
//   78 #include "_hal_uart_dma.c"

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static uartDMACfg_t dmaCfg
dmaCfg:
        DS 1618
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
// static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
HalUARTInitDMA:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function HalUARTInitDMA
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ANL     0xff,#0x3f
        MOV     0xff,0xff
        ANL     0xf1,#0xfe
        ORL     0xf3,#0xc
        ANL     0xf2,#0xf3
        MOV     0x86,#-0x80
        MOV     0xc4,#-0x80
        MOV     DPTR,#dmaCh1234 + 26
        MOV     A,#0x70
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x3f
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x1f
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCh1234 + 30
        MOV     A,#0xf
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x4a
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCh1234 + 16
        MOV     A,#0x70
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x3f
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCh1234 + 20
        MOVX    A,@DPTR
        ANL     A,#0x1f
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCh1234 + 22
        MOV     A,#-0x32
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf
        ORL     A,#0x10
        MOVX    @DPTR,A
        MOV     A,#(dmaCfg >> 8) & 0xff
        MOV     DPTR,#dmaCh1234 + 18
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#dmaCfg & 0xff
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCh1234 + 21
        MOV     A,#-0x70
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCh1234 + 20
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCh1234 + 23
        MOV     A,#0x12
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
        REQUIRE P2DIR
        REQUIRE PERCFG
        REQUIRE P0SEL
        REQUIRE ADCCFG
        REQUIRE U0CSR
        REQUIRE U0UCR

        RSEG BANKED_CODE:CODE:NOROOT(0)
// static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
HalUARTOpenDMA:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function HalUARTOpenDMA
        CODE
        FUNCALL HalUARTOpenDMA, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     DPTR,#dmaCfg + 1616
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??HalUARTOpenDMA_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??HalUARTOpenDMA_1
??HalUARTOpenDMA_0:
        MOV     0xc2,#-0x28
        SJMP    ??HalUARTOpenDMA_2
??HalUARTOpenDMA_1:
        MOV     0xc2,#0x3b
??HalUARTOpenDMA_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??HalUARTOpenDMA_3
        DEC     A
        JZ      ??HalUARTOpenDMA_4
        DEC     A
        JZ      ??HalUARTOpenDMA_5
        DEC     A
        JZ      ??HalUARTOpenDMA_6
        SJMP    ??HalUARTOpenDMA_7
??HalUARTOpenDMA_3:
        MOV     0xc5,#0x8
        MOV     DPTR,#dmaCfg + 1612
        MOV     A,#0x23
        SJMP    ??HalUARTOpenDMA_8
??HalUARTOpenDMA_4:
        MOV     0xc5,#0x9
        MOV     DPTR,#dmaCfg + 1612
        MOV     A,#0x12
        SJMP    ??HalUARTOpenDMA_8
??HalUARTOpenDMA_5:
        MOV     0xc5,#0xa
        MOV     DPTR,#dmaCfg + 1612
        MOV     A,#0x9
        SJMP    ??HalUARTOpenDMA_8
??HalUARTOpenDMA_6:
        MOV     0xc5,#0xa
        MOV     DPTR,#dmaCfg + 1612
        MOV     A,#0x6
        SJMP    ??HalUARTOpenDMA_8
??HalUARTOpenDMA_7:
        MOV     0xc5,#0xb
        MOV     DPTR,#dmaCfg + 1612
        MOV     A,#0x3
??HalUARTOpenDMA_8:
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_34:
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??HalUARTOpenDMA_9
        MOV     0xc4,#0x42
        ORL     0xf3,#0x10
        CLR     0x80.5
        ORL     0xfd,#0x20
        SJMP    ??HalUARTOpenDMA_10
??HalUARTOpenDMA_9:
        MOV     0xc4,#0x2
??HalUARTOpenDMA_10:
        MOV     DPTR,#0x70c1
        MOVX    A,@DPTR
        MOV     DPTR,#dmaCfg
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     0xd1,#-0x9
        MOV     0xd6,#0x8
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x3
        MOV     A,0xc2
        CPL     A
        MOV     R1,A
        MOV     R2,#dmaCfg & 0xff
        MOV     R3,#(dmaCfg >> 8) & 0xff
        LCALL   ??osal_memset?relay
        ORL     0x86,#0x40
        MOV     DPTR,#dmaCfg + 1615
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCfg + 1614
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock1
        REQUIRE U0BAUD
        REQUIRE U0GCR
        REQUIRE U0UCR
        REQUIRE P0SEL
        REQUIRE _A_P0
        REQUIRE P0DIR
        REQUIRE DMAIRQ
        REQUIRE DMAARM
        REQUIRE U0CSR

        RSEG BANKED_CODE:CODE:NOROOT(0)
// static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(unsigned char *, uint16)
HalUARTReadDMA:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function HalUARTReadDMA
        CODE
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_27
??HalUARTReadDMA_0:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,0xc2
        CPL     A
        MOV     ?V0 + 1,A
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCfg + 800
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCfg + 800
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#-0x70
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x1
        JC      ??HalUARTReadDMA_1
        MOV     DPTR,#dmaCfg + 800
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
??HalUARTReadDMA_1:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_27:
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        JNC     ??HalUARTReadDMA_2
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,0xc2
        JZ      ??HalUARTReadDMA_0
??HalUARTReadDMA_2:
        CLR     0x80.5
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        REQUIRE U0BAUD
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     DPTR,#dmaCfg + 800
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R6,A
        MOV     A,R7
        RLC     A
        MOV     R7,A
        MOV     A,#dmaCfg & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(dmaCfg >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
// static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(unsigned char *, uint16)
HalUARTWriteDMA:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function HalUARTWriteDMA
        CODE
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPTR,#dmaCfg + 1610
        MOVX    A,@DPTR
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_37:
        ADD     A,R4
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#-0x6f
        MOV     A,R3
        SUBB    A,#0x1
        JC      ??HalUARTWriteDMA_0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
??HalUARTWriteDMA_0:
        MOV     A,0xa8
        MOV     ?V0 + 0,A
        CLR     0xa8.7
        MOV     DPTR,#dmaCfg + 1610
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??CrossCallReturnLabel_2
??HalUARTWriteDMA_2:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_30:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_21:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        CLR     C
        MOV     A,R2
        SUBB    A,R4
        MOV     A,R3
        SUBB    A,R5
        JC      ??HalUARTWriteDMA_2
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
        MOV     DPTR,#dmaCfg + 1610
        MOVX    A,@DPTR
        XRL     A,?V0 + 4
        JZ      ??HalUARTWriteDMA_3
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??CrossCallReturnLabel_3
??HalUARTWriteDMA_4:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_31:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_22:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        CLR     C
        MOV     A,R2
        SUBB    A,R4
        MOV     A,R3
        SUBB    A,R5
        JC      ??HalUARTWriteDMA_4
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V0 + 0,A
        CLR     0xa8.7
??HalUARTWriteDMA_3:
        MOV     DPL,?V0 + 4
        MOV     R4,DPL
        MOV     A,R4
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     A,R4
        XRL     A,#0x1
        CLR     C
        RLC     A
        MOV     R0,A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_50:
        JNZ     ??HalUARTWriteDMA_5
        MOV     DPTR,#dmaCfg + 1615
        MOV     A,#0x1
        MOVX    @DPTR,A
??HalUARTWriteDMA_5:
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
??HalUARTWriteDMA_1:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+-1
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     A,?V0 + 4
        MOV     ?V0 + 2,A
        MOV     B,#-0x70
        MUL     AB
        XCH     A,?V0 + 2
        MOV     ?V0 + 0,B
        ADD     A,?V0 + 0
        MOV     ?V0 + 3,A
        MOV     A,#(dmaCfg + 38) & 0xff
        ADD     A,R6
        MOV     ?V0 + 0,A
        MOV     A,#((dmaCfg + 806) >> 8) & 0xff
        ADDC    A,R7
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 3
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_17
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_18
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,#(dmaCfg + 70) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((dmaCfg + 1606) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
// static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
HalUARTPollDMA:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function HalUARTPollDMA
        CODE
        FUNCALL HalUARTPollDMA, HalUARTRxAvailDMA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalUARTPollDMA, HalUARTIsrDMA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     R6,#0x0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ      $+5
        LJMP    ??HalUARTPollDMA_0 & 0xFFFF
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
        MOV     A,R3
        RLC     A
        MOV     R3,A
        MOV     A,#dmaCfg & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(dmaCfg >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,0xc2
        JNZ     ??HalUARTPollDMA_1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_26:
        JC      ??HalUARTPollDMA_2
        MOV     R0,#0x0
        MOV     R1,#0x0
??HalUARTPollDMA_2:
        MOV     DPTR,#dmaCfg + 800
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??HalUARTPollDMA_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??HalUARTPollDMA_3:
        JNZ     ??CrossCallReturnLabel_53
??HalUARTPollDMA_1:
        MOV     DPTR,#dmaCfg + 802
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??HalUARTPollDMA_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??HalUARTPollDMA_4:
        JZ      ??HalUARTPollDMA_5
        MOV     DPTR,#dmaCfg + 802
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??HalUARTPollDMA_6
        MOV     A,0x95
        INC     DPTR
        MOVX    @DPTR,A
??HalUARTPollDMA_6:
        MOV     DPTR,#dmaCfg + 804
        MOV     A,#0x21
        SJMP    ??HalUARTPollDMA_7
??HalUARTPollDMA_5:
        MOV     DPTR,#dmaCfg + 804
        MOVX    A,@DPTR
        JZ      ??HalUARTPollDMA_8
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,0x95
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     DPTR,#dmaCfg + 804
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??HalUARTPollDMA_9
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOVX    @DPTR,A
        MOV     A,0x95
        INC     DPTR
        SJMP    ??HalUARTPollDMA_7
??HalUARTPollDMA_9:
        CLR     A
??HalUARTPollDMA_7:
        MOVX    @DPTR,A
??HalUARTPollDMA_8:
        ; Setup parameters for call to function HalUARTRxAvailDMA
        LCALL   ??HalUARTRxAvailDMA?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x80
        MOV     A,R1
        SUBB    A,#0x1
        JC      ??HalUARTPollDMA_10
        INC     R6
        SJMP    ??HalUARTPollDMA_11
??HalUARTPollDMA_0:
        MOV     DPTR,#dmaCfg + 804
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??HalUARTPollDMA_11
??HalUARTPollDMA_10:
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x48
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??HalUARTPollDMA_12
        INC     R6
        INC     R6
        SETB    0x80.5
        SJMP    ??HalUARTPollDMA_11
??HalUARTPollDMA_12:
        MOV     A,R0
        ORL     A,R1
        JZ      ??HalUARTPollDMA_11
        MOV     DPTR,#dmaCfg + 804
        MOVX    A,@DPTR
        JNZ     ??HalUARTPollDMA_11
        MOV     R6,#0x4
??HalUARTPollDMA_11:
        MOV     DPTR,#dmaCfg + 1611
        MOVX    A,@DPTR
        JZ      ??HalUARTPollDMA_13
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R6
        SETB    0xE0 /* A   */.4
        MOV     R6,A
??HalUARTPollDMA_13:
        MOV     DPTR,#dmaCfg + 1614
        MOVX    A,@DPTR
        JZ      ??HalUARTPollDMA_14
        MOV     A,0x95
        MOV     R1,A
        MOV     DPTR,#dmaCfg + 1613
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R1
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     DPTR,#dmaCfg + 1612
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??HalUARTPollDMA_14
        MOV     DPTR,#dmaCfg + 1614
        CLR     A
        MOVX    @DPTR,A
??HalUARTPollDMA_14:
        MOV     DPTR,#dmaCfg + 1615
        MOVX    A,@DPTR
        JZ      ??HalUARTPollDMA_15
        MOV     DPTR,#dmaCfg + 1614
        MOVX    A,@DPTR
        JNZ     ??HalUARTPollDMA_15
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     R0,A
        MOV     B,#-0x70
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(dmaCfg + 38) & 0xff
        ADD     A,R0
        MOV     A,#((dmaCfg + 806) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPTR,#dmaCh1234 + 24
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     B,#-0x70
        MUL     AB
        MOV     R0,A
        MOV     A,#(dmaCfg + 38) & 0xff
        ADD     A,R0
        MOV     DPTR,#dmaCh1234 + 25
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     DPTR,#dmaCh1234 + 29
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_40:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#dmaCh1234 + 28
        MOVX    A,@DPTR
        ANL     A,#0xe0
        ORL     A,R0
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        XRL     A,#0x1
        MOVX    @DPTR,A
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R0,A
        CLR     0xa8.7
        MOV     0xd6,#0x10
??HalUARTPollDMA_16:
        NOP
        MOV     A,0xd6
        MOV     C,0xE0 /* A   */.4
        JNC     ??HalUARTPollDMA_16
        MOV     0xd1,#-0x11
        MOV     0xd7,#0x10
        MOV     A,R0
        SJMP    ??HalUARTPollDMA_17
??HalUARTPollDMA_15:
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R2,A
        CLR     0xa8.7
        MOV     DPTR,#dmaCfg + 1610
        MOVX    A,@DPTR
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_51:
        JZ      ??HalUARTPollDMA_18
        MOV     A,0xd6
        MOV     C,0xE0 /* A   */.4
        JC      ??HalUARTPollDMA_18
        MOV     A,0xd1
        MOV     C,0xE0 /* A   */.4
        JC      ??HalUARTPollDMA_18
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        ; Setup parameters for call to function HalUARTIsrDMA
        LCALL   ??HalUARTIsrDMA?relay
        SJMP    ??HalUARTPollDMA_19
??HalUARTPollDMA_18:
        MOV     A,R2
??HalUARTPollDMA_17:
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
??HalUARTPollDMA_19:
        MOV     A,R6
        JZ      ??HalUARTPollDMA_20
        MOV     DPTR,#dmaCfg + 1616
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_48:
        JZ      ??HalUARTPollDMA_20
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x0
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
??HalUARTPollDMA_20:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock25
        REQUIRE U0BAUD
        REQUIRE ST0
        REQUIRE _A_P0
        REQUIRE _A_IEN0
        REQUIRE DMAARM
        REQUIRE DMAIRQ
        REQUIRE DMAREQ

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_15
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_16
        CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond28) CFA_SP SP+-5
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     DPTR,#dmaCfg + 800
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_51
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_48
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_49
        CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond33) CFA_SP SP+-5
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_23
        CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond34) CFA_SP SP+-5
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_24
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_15
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_16
        CFI (cfiCond38) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond38) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond38) CFA_SP SP+-5
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond41) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond41) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond41) CFA_SP SP+-5
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        CLR     C
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond45) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond45) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond45) CFA_SP SP+-5
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_44:
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_41
        CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond48) CFA_SP SP+-5
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_39
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_0
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_1
        CFI (cfiCond51) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond51) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond51) CFA_SP SP+-5
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_51
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_40
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_41
        CFI (cfiCond56) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond56) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond56) CFA_SP SP+-5
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_39
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_0
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_1
        CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond59) CFA_SP SP+-5
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV     A,#(dmaCfg + 70) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((dmaCfg + 1606) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker65 Using cfiCommon1
        CFI (cfiPicker65) NoFunction
        CFI (cfiPicker65) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCfg + 1610
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:CODE:NOROOT(0)
// static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
HalUARTRxAvailDMA:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI Function HalUARTRxAvailDMA
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_16:
        JNZ     ??HalUARTRxAvailDMA_0
        MOV     R0,#0x0
        MOV     R1,#0x0
??HalUARTRxAvailDMA_1:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        CLR     C
        RLC     A
        MOV     R4,A
        MOV     A,R5
        RLC     A
        MOV     R5,A
        MOV     A,#dmaCfg & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#(dmaCfg >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,0xc2
        JNZ     ??HalUARTRxAvailDMA_2
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
??HalUARTRxAvailDMA_2:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_25:
        JC      ??HalUARTRxAvailDMA_1
??HalUARTRxAvailDMA_0:
        SJMP    ??Subroutine29_0
        CFI EndBlock cfiBlock66
        REQUIRE U0BAUD

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond68) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond68) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond68) CFA_SP SP+-5
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x70
        MOV     A,R1
        SUBB    A,#0x1
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond71) CFA_SP SP+-5
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,R1
        RLC     A
        MOV     R1,A
        MOV     A,#dmaCfg & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(dmaCfg >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,0xc2
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
HalUARTIsrDMA:
        CFI Block cfiBlock73 Using cfiCommon0
        CFI Function HalUARTIsrDMA
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     0xd1,#-0x11
        MOV     DPTR,#dmaCfg + 1610
        MOVX    A,@DPTR
        XRL     A,#0x1
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_41:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCfg + 1611
        INC     A
        MOVX    @DPTR,A
        MOV     A,0x95
        MOV     DPTR,#dmaCfg + 1613
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??HalUARTIsrDMA_0
        MOV     DPTR,#dmaCfg + 1615
        MOV     A,#0x1
        MOVX    @DPTR,A
??HalUARTIsrDMA_0:
        SJMP    ??Subroutine29_0
        CFI EndBlock cfiBlock73
        REQUIRE DMAIRQ
        REQUIRE ST0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond75) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond75) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond75) CFA_SP SP+-5
        CFI Block cfiPicker76 Using cfiCommon1
        CFI (cfiPicker76) NoFunction
        CFI (cfiPicker76) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#dmaCfg + 1610
        MOVX    A,@DPTR
        CLR     C
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_43:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock77 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock77
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
        CFI Block cfiBlock78 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock78
//   79 #endif
//   80 #if HAL_UART_ISR
//   81 #include "_hal_uart_isr.c"

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// static uartISRCfg_t isrCfg
isrCfg:
        DS 265
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant uint16 HalUARTReadISR(unsigned char *, uint16)
HalUARTReadISR:
        CFI Block cfiBlock79 Using cfiCommon0
        CFI Function HalUARTReadISR
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_28
??HalUARTReadISR_0:
        MOV     A,#isrCfg & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(isrCfg >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        INC     A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        CLR     C
        SUBB    A,#-0x80
        JC      ??HalUARTReadISR_1
        MOV     DPTR,#isrCfg + 128
        CLR     A
        MOVX    @DPTR,A
??HalUARTReadISR_1:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??HalUARTReadISR_2
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        JC      ??HalUARTReadISR_0
??HalUARTReadISR_2:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond80 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker83 Using cfiCommon1
        CFI (cfiPicker83) NoFunction
        CFI (cfiPicker83) Picker
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiPicker83

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant uint16 HalUARTWriteISR(unsigned char *, uint16)
HalUARTWriteISR:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function HalUARTWriteISR
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     DPTR,#isrCfg + 260
        LCALL   ??Subroutine30_0 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     DPTR,#isrCfg + 260
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,R0
        JNC     ??HalUARTWriteISR_0
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??HalUARTWriteISR_1
??HalUARTWriteISR_2:
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??CrossCallReturnLabel_29
??HalUARTWriteISR_0:
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x7f
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        JNC     ??HalUARTWriteISR_2
??HalUARTWriteISR_1:
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??HalUARTWriteISR_3
??HalUARTWriteISR_4:
        MOVX    A,@DPTR
        INC     A
??HalUARTWriteISR_5:
        MOVX    @DPTR,A
        ORL     0x9a,#0x8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_29:
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        MOV     A,R1
        SUBB    A,R5
        JNC     ??HalUARTWriteISR_6
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPTR,#isrCfg + 261
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#(isrCfg + 132) & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#((isrCfg + 132) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     DPTR,#isrCfg + 262
        CLR     A
        MOVX    @DPTR,A
        MOV     DPTR,#isrCfg + 261
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x7f
        JC      ??HalUARTWriteISR_4
        CLR     A
        SJMP    ??HalUARTWriteISR_5
??HalUARTWriteISR_6:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
??HalUARTWriteISR_3:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock84
        REQUIRE IEN2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_6
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_7
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_4
        CFI (cfiCond91) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond91) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond91) CFA_SP SP+-5
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_5
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
// static __banked_func __xdata_reentrant void HalUARTPollISR(void)
HalUARTPollISR:
        CFI Block cfiBlock94 Using cfiCommon0
        CFI Function HalUARTPollISR
        CODE
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#isrCfg + 263
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_49:
        JZ      ??HalUARTPollISR_0
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_46:
        JC      ??HalUARTPollISR_1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        SJMP    ??HalUARTPollISR_2
??HalUARTPollISR_1:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
??HalUARTPollISR_2:
        MOV     R1,A
        MOV     R2,#0x0
        MOV     DPTR,#isrCfg + 130
        MOVX    A,@DPTR
        JZ      ??HalUARTPollISR_3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,0x95
        CLR     C
        SUBB    A,R3
        MOV     R3,A
        MOV     DPTR,#isrCfg + 130
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R3
        CLR     C
        SUBB    A,R4
        JNC     ??HalUARTPollISR_4
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R3
        SJMP    ??HalUARTPollISR_5
??HalUARTPollISR_4:
        CLR     A
??HalUARTPollISR_5:
        MOVX    @DPTR,A
??HalUARTPollISR_3:
        MOV     A,0x95
        INC     DPTR
        MOVX    @DPTR,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x7f
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??HalUARTPollISR_6
??HalUARTPollISR_7:
        INC     R2
        SJMP    ??HalUARTPollISR_8
??HalUARTPollISR_6:
        CLR     C
        MOV     A,R0
        SUBB    A,#0x30
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??HalUARTPollISR_9
        INC     R2
        SJMP    ??HalUARTPollISR_7
??HalUARTPollISR_9:
        MOV     A,R0
        ORL     A,R1
        JZ      ??HalUARTPollISR_8
        MOV     DPTR,#isrCfg + 130
        MOVX    A,@DPTR
        JNZ     ??HalUARTPollISR_8
        MOV     R2,#0x4
??HalUARTPollISR_8:
        MOV     DPTR,#isrCfg + 262
        MOVX    A,@DPTR
        JZ      ??HalUARTPollISR_10
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R2
        SETB    0xE0 /* A   */.4
        MOV     R2,A
??HalUARTPollISR_10:
        MOV     A,R2
        JZ      ??HalUARTPollISR_0
        ; Setup parameters for indirect call
        MOV     R1,#0x1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
??HalUARTPollISR_0:
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock94
        REQUIRE ST0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker97 Using cfiCommon1
        CFI (cfiPicker97) NoFunction
        CFI (cfiPicker97) Picker
        MOV     DPTR,#isrCfg + 128
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiPicker97
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
        CFI Block cfiCond98 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond99) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond99) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond99) CFA_SP SP+-5
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        RET
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond102 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_50
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker104 Using cfiCommon1
        CFI (cfiPicker104) NoFunction
        CFI (cfiPicker104) Picker
        LCALL   ??Subroutine28_0 & 0xFFFF
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiPicker104
??CrossCallReturnLabel_42:
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
        CFI Block cfiCond105 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond106) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond106) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond106) CFA_SP SP+-5
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_51
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant __interrupt void halUart1RxIsr(void)
halUart1RxIsr:
        CFI Block cfiBlock110 Using cfiCommon1
        CFI Function halUart1RxIsr
        CODE
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    PSW
        CFI PSW Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        MOV     A,R0
        CFI R0 A
        PUSH    A
        CFI R0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        MOV     A,R1
        CFI R1 A
        PUSH    A
        CFI R1 Frame(CFA_SP, 6)
        CFI CFA_SP SP+-6
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 7)
        CFI CFA_SP SP+-7
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 8)
        CFI CFA_SP SP+-8
        ; Saved register size: 6
        ; Auto size: 0
        MOV     A,0xf9
        PUSH    A
        CFI CFA_SP SP+-9
        MOV     DPTR,#isrCfg + 129
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#isrCfg & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(isrCfg >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+-8
        MOVX    @DPTR,A
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??halUart1RxIsr_0
        MOV     A,0x95
        MOV     DPTR,#isrCfg + 131
        MOVX    @DPTR,A
??halUart1RxIsr_0:
        MOV     DPTR,#isrCfg + 129
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#-0x80
        JC      ??halUart1RxIsr_1
        CLR     A
        MOVX    @DPTR,A
??halUart1RxIsr_1:
        INC     DPTR
        MOV     A,#-0x3a
        MOVX    @DPTR,A
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-7
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-6
        POP     A
        CFI R1 A
        CFI CFA_SP SP+-5
        MOV     R1,A
        CFI EndBlock cfiBlock110
        REQUIRE ?Subroutine3
        REQUIRE U1DBUF
        REQUIRE ST0
        ; // Fall through to label ?Subroutine3

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock111 Using cfiCommon1
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI A Frame(CFA_SP, 3)
        CFI PSW Frame(CFA_SP, 4)
        CFI R0 Frame(CFA_SP, 5)
        POP     A
        CFI CFA_SP SP+-4
        CFI R0 A
        MOV     R0,A
        CFI R0 SameValue
        POP     PSW
        CFI CFA_SP SP+-3
        CFI PSW SameValue
        POP     A
        CFI CFA_SP SP+-2
        CFI A SameValue
        RETI
        CFI EndBlock cfiBlock111

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant __interrupt void halUart1TxIsr(void)
halUart1TxIsr:
        CFI Block cfiBlock112 Using cfiCommon1
        CFI Function halUart1TxIsr
        CODE
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    PSW
        CFI PSW Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        MOV     A,R0
        CFI R0 A
        PUSH    A
        CFI R0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 6)
        CFI CFA_SP SP+-6
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 7)
        CFI CFA_SP SP+-7
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 8)
        CFI CFA_SP SP+-8
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 9)
        CFI CFA_SP SP+-9
        ; Saved register size: 7
        ; Auto size: 0
        MOV     DPTR,#isrCfg + 260
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??halUart1TxIsr_0
        ANL     0x9a,#0xf7
        INC     DPTR
        MOV     A,#0x1
        SJMP    ??halUart1TxIsr_1
??halUart1TxIsr_0:
        CLR     0xe8.2
        MOV     DPTR,#isrCfg + 260
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     A,#(isrCfg + 132) & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#((isrCfg + 132) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     0xf9,A
        MOV     DPTR,#isrCfg + 260
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JC      ??halUart1TxIsr_2
        CLR     A
??halUart1TxIsr_1:
        MOVX    @DPTR,A
??halUart1TxIsr_2:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-8
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-7
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-6
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-5
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock112
        REQUIRE IEN2
        REQUIRE _A_IRCON2
        REQUIRE U1DBUF
//   82 #endif
//   83 #if HAL_UART_USB
//   84 #include "_hal_uart_usb.c"
//   85 #endif
//   86 
//   87 /******************************************************************************
//   88  * @fn      HalUARTInit
//   89  *
//   90  * @brief   Initialize the UART
//   91  *
//   92  * @param   none
//   93  *
//   94  * @return  none
//   95  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   96 void HalUARTInit(void)
HalUARTInit:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI Function HalUARTInit
        CODE
//   97 {
        FUNCALL HalUARTInit, HalUARTInitDMA
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   98 #if HAL_UART_DMA
//   99   HalUARTInitDMA();
        ; Setup parameters for call to function HalUARTInitDMA
        LCALL   ??HalUARTInitDMA?relay
//  100 #endif
//  101 #if HAL_UART_ISR
//  102   HalUARTInitISR();
        ANL     0xff,#0x3f
        MOV     0xff,0xff
        ANL     0xf1,#0xfd
        ORL     0xf3,#0x30
        ANL     0xf2,#0xcf
        MOV     0xf8,#-0x80
        MOV     0xfb,#-0x80
//  103 #endif
//  104 #if HAL_UART_USB
//  105   HalUARTInitUSB();
//  106 #endif
//  107 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock113
        REQUIRE P2DIR
        REQUIRE PERCFG
        REQUIRE P0SEL
        REQUIRE ADCCFG
        REQUIRE _A_U1CSR
        REQUIRE U1UCR
//  108 
//  109 /******************************************************************************
//  110  * @fn      HalUARTOpen
//  111  *
//  112  * @brief   Open a port according tp the configuration specified by parameter.
//  113  *
//  114  * @param   port   - UART port
//  115  *          config - contains configuration information
//  116  *
//  117  * @return  Status of the function call
//  118  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  119 uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
HalUARTOpen:
        CFI Block cfiBlock114 Using cfiCommon0
        CFI Function HalUARTOpen
        CODE
//  120 {
        FUNCALL HalUARTOpen, HalUARTOpenDMA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  121   (void)port;
//  122   (void)config;
//  123 
//  124 #if (HAL_UART_DMA == 1)
//  125   if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
        JNZ     ??HalUARTOpen_0
        ; Setup parameters for call to function HalUARTOpenDMA
        LCALL   ??HalUARTOpenDMA?relay
        SJMP    ??HalUARTOpen_1
//  126 #endif
//  127 #if (HAL_UART_DMA == 2)
//  128   if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
//  129 #endif
//  130 #if (HAL_UART_ISR == 1)
//  131   if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
//  132 #endif
//  133 #if (HAL_UART_ISR == 2)
//  134   if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
??HalUARTOpen_0:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??HalUARTOpen_1
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     DPTR,#isrCfg + 263
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??HalUARTOpen_2
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      ??HalUARTOpen_2
        MOV     0xfa,#0x3b
        SJMP    ??HalUARTOpen_3
??HalUARTOpen_2:
        MOV     0xfa,#-0x28
??HalUARTOpen_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??HalUARTOpen_4
        DEC     A
        JZ      ??HalUARTOpen_5
        DEC     A
        JZ      ??HalUARTOpen_6
        DEC     A
        JNZ     ??HalUARTOpen_7
??HalUARTOpen_6:
        MOV     0xfc,#0xa
        SJMP    ??HalUARTOpen_8
??HalUARTOpen_5:
        MOV     0xfc,#0x9
        SJMP    ??HalUARTOpen_8
??HalUARTOpen_4:
        MOV     0xfc,#0x8
        SJMP    ??HalUARTOpen_8
??HalUARTOpen_7:
        MOV     0xfc,#0xb
??HalUARTOpen_8:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??HalUARTOpen_9
        MOV     0xfb,#0x42
        ORL     0xf3,#0x30
        SJMP    ??HalUARTOpen_10
??HalUARTOpen_9:
        MOV     0xfb,#0x2
??HalUARTOpen_10:
        SETB    0xf8.6
        SETB    0xa8.3
        SETB    0xe8.2
//  135 #endif
//  136 #if (HAL_UART_USB)
//  137   HalUARTOpenUSB(config);
//  138 #endif
//  139   
//  140   return HAL_UART_SUCCESS;
??HalUARTOpen_1:
        MOV     R1,#0x0
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock114
        REQUIRE U1BAUD
        REQUIRE U1GCR
        REQUIRE U1UCR
        REQUIRE P0SEL
        REQUIRE _A_U1CSR
        REQUIRE _A_IEN0
        REQUIRE _A_IRCON2
//  141 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond115 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker117 Using cfiCommon1
        CFI (cfiPicker117) NoFunction
        CFI (cfiPicker117) Picker
        MOV     A,R2
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_52:
        RET
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX    A,@DPTR
        XRL     A,#0x3
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120
//  142 
//  143 /*****************************************************************************
//  144  * @fn      HalUARTRead
//  145  *
//  146  * @brief   Read a buffer from the UART
//  147  *
//  148  * @param   port - USART module designation
//  149  *          buf  - valid data buffer at least 'len' bytes in size
//  150  *          len  - max length number of bytes to copy to 'buf'
//  151  *
//  152  * @return  length of buffer that was read
//  153  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  154 uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
HalUARTRead:
        CFI Block cfiBlock121 Using cfiCommon0
        CFI Function HalUARTRead
        CODE
//  155 {
        FUNCALL HalUARTRead, HalUARTReadDMA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalUARTRead, HalUARTReadISR
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  156   (void)port;
//  157   (void)buf;
//  158   (void)len;
//  159 
//  160 #if (HAL_UART_DMA == 1)
//  161   if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
        JNZ     ??HalUARTRead_0
        ; Setup parameters for call to function HalUARTReadDMA
        LCALL   ??HalUARTReadDMA?relay
        SJMP    ??HalUARTRead_1
//  162 #endif
//  163 #if (HAL_UART_DMA == 2)
//  164   if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
//  165 #endif
//  166 #if (HAL_UART_ISR == 1)
//  167   if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
//  168 #endif
//  169 #if (HAL_UART_ISR == 2)
//  170   if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
??HalUARTRead_0:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??HalUARTRead_2
        ; Setup parameters for call to function HalUARTReadISR
        LCALL   ??HalUARTReadISR?relay
        SJMP    ??HalUARTRead_1
//  171 #endif
//  172 
//  173 #if HAL_UART_USB
//  174   return HalUARTRx(buf, len);
//  175 #else
//  176   return 0;
??HalUARTRead_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock121
??HalUARTRead_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  177 #endif
//  178 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock122 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock122
//  179 
//  180 /******************************************************************************
//  181  * @fn      HalUARTWrite
//  182  *
//  183  * @brief   Write a buffer to the UART.
//  184  *
//  185  * @param   port - UART port
//  186  *          buf  - pointer to the buffer that will be written, not freed
//  187  *          len  - length of
//  188  *
//  189  * @return  length of the buffer that was sent
//  190  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  191 uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
HalUARTWrite:
        CFI Block cfiBlock123 Using cfiCommon0
        CFI Function HalUARTWrite
        CODE
//  192 {
        FUNCALL HalUARTWrite, HalUARTWriteDMA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalUARTWrite, HalUARTWriteISR
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  193   (void)port;
//  194   (void)buf;
//  195   (void)len;
//  196 
//  197 #if (HAL_UART_DMA == 1)
//  198   if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
        JNZ     ??HalUARTWrite_0
        ; Setup parameters for call to function HalUARTWriteDMA
        LCALL   ??HalUARTWriteDMA?relay
        SJMP    ??HalUARTWrite_1
//  199 #endif
//  200 #if (HAL_UART_DMA == 2)
//  201   if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
//  202 #endif
//  203 #if (HAL_UART_ISR == 1)
//  204   if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
//  205 #endif
//  206 #if (HAL_UART_ISR == 2)
//  207   if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
??HalUARTWrite_0:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??HalUARTWrite_2
        ; Setup parameters for call to function HalUARTWriteISR
        LCALL   ??HalUARTWriteISR?relay
        SJMP    ??HalUARTWrite_1
//  208 #endif
//  209 
//  210 #if HAL_UART_USB
//  211   HalUARTTx(buf, len);
//  212   return len;
//  213 #else
//  214   return 0;
??HalUARTWrite_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??HalUARTWrite_1:
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock123
//  215 #endif
//  216 }
//  217 
//  218 /******************************************************************************
//  219  * @fn      HalUARTSuspend
//  220  *
//  221  * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
//  222  *
//  223  * @param   None
//  224  *
//  225  * @return  None
//  226  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  227 void HalUARTSuspend( void )
HalUARTSuspend:
        CFI Block cfiBlock124 Using cfiCommon0
        CFI Function HalUARTSuspend
        CODE
//  228 {
        ; Saved register size: 0
        ; Auto size: 0
//  229 #if HAL_UART_DMA
//  230   HalUARTSuspendDMA();
        SETB    0x80.5
        ANL     0x86,#0xbf
        ORL     0xab,#0x10
//  231 #endif
//  232 #if HAL_UART_ISR
//  233   HalUARTSuspendISR();
        CLR     0xf8.6
//  234 #endif
//  235 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock124
        REQUIRE _A_U1CSR
        REQUIRE _A_P0
        REQUIRE U0CSR
        REQUIRE P0IEN
//  236 
//  237 /******************************************************************************
//  238  * @fn      HalUARTResume
//  239  *
//  240  * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
//  241  *
//  242  * @param   None
//  243  *
//  244  * @return  None
//  245  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  246 void HalUARTResume( void )
HalUARTResume:
        CFI Block cfiBlock125 Using cfiCommon0
        CFI Function HalUARTResume
        CODE
//  247 {
        ; Saved register size: 0
        ; Auto size: 0
//  248 #if HAL_UART_DMA
//  249   HalUARTResumeDMA();
        ANL     0xab,#0xef
        ORL     0xc4,#0x80
        ORL     0x86,#0x40
        CLR     0x80.5
//  250 #endif
//  251 #if HAL_UART_ISR
//  252   HalUARTResumeISR();
        ORL     0xfb,#0x80
        SETB    0xf8.6
//  253 #endif
//  254 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock125
        REQUIRE U1UCR
        REQUIRE _A_U1CSR
        REQUIRE P0IEN
        REQUIRE U0UCR
        REQUIRE U0CSR
        REQUIRE _A_P0
//  255 
//  256 /***************************************************************************************************
//  257  * @fn      HalUARTPoll
//  258  *
//  259  * @brief   Poll the UART.
//  260  *
//  261  * @param   none
//  262  *
//  263  * @return  none
//  264  *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 void HalUARTPoll(void)
HalUARTPoll:
        CFI Block cfiBlock126 Using cfiCommon0
        CFI Function HalUARTPoll
        CODE
//  266 {
        FUNCALL HalUARTPoll, HalUARTPollDMA
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalUARTPoll, HalUARTPollISR
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  267 #if HAL_UART_DMA
//  268   HalUARTPollDMA();
        ; Setup parameters for call to function HalUARTPollDMA
        LCALL   ??HalUARTPollDMA?relay
//  269 #endif
//  270 #if HAL_UART_ISR
//  271   HalUARTPollISR();
        ; Setup parameters for call to function HalUARTPollISR
        LCALL   ??HalUARTPollISR?relay
//  272 #endif
//  273 #if HAL_UART_USB
//  274   HalUARTPollUSB();
//  275 #endif
//  276 }
        LJMP    ??Subroutine29_0 & 0xFFFF
        CFI EndBlock cfiBlock126
//  277 
//  278 /**************************************************************************************************
//  279  * @fn      Hal_UART_RxBufLen()
//  280  *
//  281  * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
//  282  *
//  283  * @param   port - UART port
//  284  *
//  285  * @return  length of current Rx Buffer
//  286  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  287 uint16 Hal_UART_RxBufLen( uint8 port )
Hal_UART_RxBufLen:
        CFI Block cfiBlock127 Using cfiCommon0
        CFI Function Hal_UART_RxBufLen
        CODE
//  288 {
        FUNCALL Hal_UART_RxBufLen, HalUARTRxAvailDMA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  289   (void)port;
//  290 
//  291 #if (HAL_UART_DMA == 1)
//  292   if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
        JNZ     ??Hal_UART_RxBufLen_0
        ; Setup parameters for call to function HalUARTRxAvailDMA
        LCALL   ??HalUARTRxAvailDMA?relay
        SJMP    ??Hal_UART_RxBufLen_1
//  293 #endif
//  294 #if (HAL_UART_DMA == 2)
//  295   if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
//  296 #endif
//  297 #if (HAL_UART_ISR == 1)
//  298   if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
//  299 #endif
//  300 #if (HAL_UART_ISR == 2)
//  301   if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
??Hal_UART_RxBufLen_0:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??Hal_UART_RxBufLen_2
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_47:
        JC      ??Hal_UART_RxBufLen_3
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     R2,A
        SUBB    A,0xE0 /* A   */
??Hal_UART_RxBufLen_4:
        MOV     R3,A
        SJMP    ??Hal_UART_RxBufLen_1
??Hal_UART_RxBufLen_3:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        SJMP    ??Hal_UART_RxBufLen_4
//  302 #endif
//  303 #if HAL_UART_USB
//  304   return HalUARTRxAvailUSB();
//  305 #else
//  306   return 0;
??Hal_UART_RxBufLen_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Hal_UART_RxBufLen_1:
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock127
//  307 #endif
//  308 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker130 Using cfiCommon1
        CFI (cfiPicker130) NoFunction
        CFI (cfiPicker130) Picker
        MOV     A,#-0x80
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        ADD     A,R2
        RET
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond131 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond132 Using cfiCommon0
        CFI (cfiCond132) NoFunction
        CFI (cfiCond132) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond132) CFA_SP SP+0
        CFI (cfiCond132) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker133 Using cfiCommon1
        CFI (cfiPicker133) NoFunction
        CFI (cfiPicker133) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#isrCfg + 128
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        RET
        CFI EndBlock cfiCond131
        CFI EndBlock cfiCond132
        CFI EndBlock cfiPicker133

        COMMON INTVEC:CODE:ROOT(0)
        ORG 27
`??halUart1RxIsr??INTVEC 27`:
        LJMP       (halUart1RxIsr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 115
`??halUart1TxIsr??INTVEC 115`:
        LJMP       (halUart1TxIsr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTInitDMA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTInitDMA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTOpenDMA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTOpenDMA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTReadDMA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTReadDMA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTWriteDMA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTWriteDMA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTPollDMA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTPollDMA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTRxAvailDMA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTRxAvailDMA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTIsrDMA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTIsrDMA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTReadISR?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTReadISR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTWriteISR?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTWriteISR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTPollISR?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTPollISR

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTOpen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTOpen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTRead?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTWrite?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTSuspend?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTSuspend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTResume?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTResume

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalUARTPoll?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalUARTPoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Hal_UART_RxBufLen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Hal_UART_RxBufLen

        END
//  309 
//  310 /******************************************************************************
//  311 ******************************************************************************/
// 
// 2 052 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//     6 bytes in segment INTVEC
//   167 bytes in segment NEAR_CODE
//    23 bytes in segment SFR_AN
// 1 883 bytes in segment XDATA_Z
// 
// 2 327 bytes of CODE  memory (+  6 bytes shared)
//     0 bytes of DATA  memory (+ 23 bytes shared)
// 1 883 bytes of XDATA memory
//
//Errors: none
//Warnings: none
