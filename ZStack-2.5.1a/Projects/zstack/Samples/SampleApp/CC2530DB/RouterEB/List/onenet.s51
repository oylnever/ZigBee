///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        15/Jun/2019  15:15:49 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          Source\onenet.c                                   /
//    Command line       =  -f H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼ /
//                          °¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ /
//                          edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg /
//                           (-DCPU32MHZ -DROOT=__near_func                   /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg    /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ× /
//                          ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ /
//                          ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zs /
//                          tack\Samples\SampleApp\Source\onenet.c -D         /
//                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D           /
//                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC           /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\RouterEB\List\ -lA                       /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\RouterEB\List\ --diag_suppress           /
//                          Pe001,Pa010 -o H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷ /
//                          Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\RouterEB\Obj\ -e          /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ /
//                          §Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý /
//                          ³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstack\Sampl /
//                          es\SampleApp\CC2530DB\..\Source\ -I               /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\ZMain\TI2530DB\ -I              /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\hal\include\   /
//                          -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼ /
//                          °¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ /
//                          edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\hal\target\ /
//                          CC2530EB\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ /
//                          §Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý /
//                          ³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstack\Sampl /
//                          es\SampleApp\CC2530DB\..\..\..\..\..\Components\m /
//                          ac\include\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷ /
//                          Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \mac\high_level\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ /
//                          -V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ· /
//                          þÎñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\Compo /
//                          nents\mac\low_level\srf04\ -I                     /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\mac\low_level\ /
//                          srf04\single_chip\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×Ê /
//                          ÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\Ô /
//                          Æ·þÎñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mt\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷ /
//                          Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstack\Sam /
//                          ples\SampleApp\CC2530DB\..\..\..\..\..\Components /
//                          \osal\include\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V /
//                          4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎ /
//                          ñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstack\ /
//                          Samples\SampleApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\services\saddr\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ× /
//                          ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ /
//                          ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Co /
//                          mponents\services\sdata\ -I                       /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\stack\af\ -I   /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\stack\nwk\ -I  /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\stack\sapi\    /
//                          -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼ /
//                          °¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ /
//                          edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\stack\sec\  /
//                          -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼ /
//                          °¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ /
//                          edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\stack\sys\  /
//                          -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼ /
//                          °¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ /
//                          edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\stack\zdo\  /
//                          -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼ /
//                          °¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ /
//                          edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\zmac\ -I    /
//                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz /
//    List file          =  H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª /
//                          ·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp /
//                          \ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ /
//                          CC2530DB\RouterEB\List\onenet.s51                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME onenet

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??EDP_CheckConnectOK?relay
        FUNCTION ??EDP_CheckConnectOK?relay,0203H
        PUBLIC ??OneNet_DevLink?relay
        FUNCTION ??OneNet_DevLink?relay,0203H
        PUBLIC ??OneNet_FillLedAndBuzzerBuf?relay
        FUNCTION ??OneNet_FillLedAndBuzzerBuf?relay,0203H
        PUBLIC ??OneNet_FillTempBuf?relay
        FUNCTION ??OneNet_FillTempBuf?relay,0203H
        PUBLIC ??OneNet_SendLedAndBuzzerData?relay
        FUNCTION ??OneNet_SendLedAndBuzzerData?relay,0203H
        PUBLIC ??OneNet_SendTempData?relay
        FUNCTION ??OneNet_SendTempData?relay,0203H
        PUBLIC EDP_CheckConnectOK
        FUNCTION EDP_CheckConnectOK,0201H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC OneNet_DevLink
        FUNCTION OneNet_DevLink,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC OneNet_FillLedAndBuzzerBuf
        FUNCTION OneNet_FillLedAndBuzzerBuf,021203H
        ARGFRAME XSTACK, 163, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 36, STACK
        PUBLIC OneNet_FillTempBuf
        FUNCTION OneNet_FillTempBuf,021203H
        ARGFRAME XSTACK, 159, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 34, STACK
        PUBLIC OneNet_SendLedAndBuzzerData
        FUNCTION OneNet_SendLedAndBuzzerData,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 163, STACK
        PUBLIC OneNet_SendTempData
        FUNCTION OneNet_SendTempData,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 159, STACK
        PUBWEAK __Constant_1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
EDP_PacketConnect1  SYMBOL "EDP_PacketConnect1"
ESP8266_SendData    SYMBOL "ESP8266_SendData"
EDP_DeleteBuffer    SYMBOL "EDP_DeleteBuffer"
memset              SYMBOL "memset"
strcpy              SYMBOL "strcpy"
sprintf             SYMBOL "sprintf"
strcat              SYMBOL "strcat"
strlen              SYMBOL "strlen"
EDP_PacketSaveData  SYMBOL "EDP_PacketSaveData"
??EDP_DeleteBuffer?relay SYMBOL "?relay", EDP_DeleteBuffer
??EDP_PacketConnect1?relay SYMBOL "?relay", EDP_PacketConnect1
??EDP_PacketSaveData?relay SYMBOL "?relay", EDP_PacketSaveData
??ESP8266_SendData?relay SYMBOL "?relay", ESP8266_SendData
??memset?relay      SYMBOL "?relay", memset
??sprintf?relay     SYMBOL "?relay", sprintf
??strcat?relay      SYMBOL "?relay", strcat
??strcpy?relay      SYMBOL "?relay", strcpy
??strlen?relay      SYMBOL "?relay", strlen
EDP_CheckConnectOK  SYMBOL "EDP_CheckConnectOK"
??EDP_CheckConnectOK?relay SYMBOL "?relay", EDP_CheckConnectOK
OneNet_DevLink      SYMBOL "OneNet_DevLink"
??OneNet_DevLink?relay SYMBOL "?relay", OneNet_DevLink
OneNet_FillLedAndBuzzerBuf SYMBOL "OneNet_FillLedAndBuzzerBuf"
??OneNet_FillLedAndBuzzerBuf?relay SYMBOL "?relay", OneNet_FillLedAndBuzzerBuf
OneNet_FillTempBuf  SYMBOL "OneNet_FillTempBuf"
??OneNet_FillTempBuf?relay SYMBOL "?relay", OneNet_FillTempBuf
OneNet_SendLedAndBuzzerData SYMBOL "OneNet_SendLedAndBuzzerData"
??OneNet_SendLedAndBuzzerData?relay SYMBOL "?relay", OneNet_SendLedAndBuzzerData
OneNet_SendTempData SYMBOL "OneNet_SendTempData"
??OneNet_SendTempData?relay SYMBOL "?relay", OneNet_SendTempData

        EXTERN EDP_PacketConnect1
        FUNCTION EDP_PacketConnect1,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ESP8266_SendData
        FUNCTION ESP8266_SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 157, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN EDP_DeleteBuffer
        FUNCTION EDP_DeleteBuffer,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 157, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 159, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcat
        FUNCTION strcat,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN EDP_PacketSaveData
        FUNCTION EDP_PacketSaveData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 161, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??EDP_DeleteBuffer?relay
        FUNCTION ??EDP_DeleteBuffer?relay,00H
        EXTERN ??EDP_PacketConnect1?relay
        FUNCTION ??EDP_PacketConnect1?relay,00H
        EXTERN ??EDP_PacketSaveData?relay
        FUNCTION ??EDP_PacketSaveData?relay,00H
        EXTERN ??ESP8266_SendData?relay
        FUNCTION ??ESP8266_SendData?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strcat?relay
        FUNCTION ??strcat?relay,00H
        EXTERN ??strcpy?relay
        FUNCTION ??strcpy?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H

// H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\onenet.c
//    1 /**
//    2 	************************************************************
//    3 	************************************************************
//    4 	************************************************************
//    5 	*	ÎÄ¼þÃû£º 	onenet.c
//    6 	*
//    7 	*	×÷Õß£º 		ÕÅ¼ÌÈð
//    8 	*
//    9 	*	ÈÕÆÚ£º 		2017-05-08
//   10 	*
//   11 	*	°æ±¾£º 		V1.1
//   12 	*
//   13 	*	ËµÃ÷£º 		ÓëonenetÆ½Ì¨µÄÊý¾Ý½»»¥½Ó¿Ú²ã
//   14 	*
//   15 	*	°æ±¾ÐÞ¸Ä¼ÇÂ¼£º	V1.0£ºÐ­Òé·â×°¡¢·µ»ØÅÐ¶Ï¶¼ÔÚÍ¬Ò»¸öÎÄ¼þ£¬²¢ÇÒ²»Í¬Ð­Òé½Ó¿Ú²»Í¬¡£
//   16 	*				V1.1£ºÌá¹©Í³Ò»½Ó¿Ú¹©Ó¦ÓÃ²ãÊ¹ÓÃ£¬¸ù¾Ý²»Í¬Ð­ÒéÎÄ¼þÀ´·â×°Ð­ÒéÏà¹ØµÄÄÚÈÝ¡£
//   17 	
//   18 	*
//   19 	************************************************************
//   20 	************************************************************
//   21 	************************************************************
//   22 **/
//   23 
//   24 
//   25 //Ð­ÒéÎÄ¼þ
//   26 #include "onenet.h"
//   27 #include "edpkit.h"
//   28 
//   29 //C¿â
//   30 //#include <string.h>
//   31 //#include <stdio.h>
//   32 
//   33 
//   34 #define DEVID	"530217468"
//   35 
//   36 #define APIKEY	"GngB=tqyPDpSvq0j8w=ni3jJPbE="
//   37 
//   38 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   39 _Bool EDP_CheckConnectOK()
EDP_CheckConnectOK:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function EDP_CheckConnectOK
        CODE
//   40 {
        ; Saved register size: 0
        ; Auto size: 0
//   41  
//   42   return 0;
        CLR     C
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   43 }
//   44 //==========================================================
//   45 //	º¯ÊýÃû³Æ£º	OneNet_DevLink
//   46 //
//   47 //	º¯Êý¹¦ÄÜ£º	Óëonenet´´½¨Á¬½Ó
//   48 //
//   49 //	Èë¿Ú²ÎÊý£º	ÎÞ
//   50 //
//   51 //	·µ»Ø²ÎÊý£º	1-³É¹¦	0-Ê§°Ü
//   52 //
//   53 //	ËµÃ÷£º		ÓëonenetÆ½Ì¨½¨Á¢Á¬½Ó
//   54 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   55 _Bool OneNet_DevLink(void)
OneNet_DevLink:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function OneNet_DevLink
        CODE
//   56 {
        FUNCALL OneNet_DevLink, EDP_PacketConnect1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_DevLink, ESP8266_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_DevLink, EDP_DeleteBuffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
//   57 	
//   58 	EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};				//Ð­Òé°ü
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {(uint8 *)0, 0L, 0L, 0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {(uint8 *)0, 0L, 0L, 0}>` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//   59 	
//   60 	unsigned char status = 1;
//   61 	
//   62 
//   63 	if(EDP_PacketConnect1(DEVID, APIKEY, 256, &edpPacket) == 0)		//¸ù¾Ýdevid ºÍ apikey·â×°Ð­Òé°ü
        ; Setup parameters for call to function EDP_PacketConnect1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R4,#`?<Constant "GngB=tqyPDpSvq0j8w=ni...">` & 0xff
        MOV     R5,#(`?<Constant "GngB=tqyPDpSvq0j8w=ni...">` >> 8) & 0xff
        MOV     R2,#`?<Constant "530217468">` & 0xff
        MOV     R3,#(`?<Constant "530217468">` >> 8) & 0xff
        LCALL   ??EDP_PacketConnect1?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_0
//   64 	{
//   65 		
//   66 		ESP8266_SendData(edpPacket._data, edpPacket._len);			//ÉÏ´«Æ½Ì¨
        ; Setup parameters for call to function ESP8266_SendData
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
//   67 
//   68     //status=EDP_CheckConnectOK();
//   69   
//   70 	//	delay_ms(500);      //ÑÓ³ÙµÈ´ýÊ±¼ä´óÓÚ300ms Ò»¶¨Òª¼Ó ²»È»Á¬²»ÉÏ
//   71 		EDP_DeleteBuffer(&edpPacket);								//É¾°ü
//   72 	}
//   73 	
//   74 	return status;
??CrossCallReturnLabel_0:
        SETB    C
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   75 	
//   76 }
//   77 
//   78 //ÎÂ¶ÈµÄÄÚÈÝ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   79 unsigned char OneNet_FillTempBuf(char *buf,double t)
OneNet_FillTempBuf:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function OneNet_FillTempBuf
        CODE
//   80 {
        FUNCALL OneNet_FillTempBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillTempBuf, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillTempBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillTempBuf, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillTempBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillTempBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillTempBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillTempBuf, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
//   81 	
//   82 	char text[16];
//   83 	
//   84 	memset(text, 0, sizeof(text));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x10
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//   85 	
//   86 	strcpy(buf, "{");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "{">` & 0xff
        MOV     R5,#(`?<Constant "{">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcpy?relay
//   87 	
//   88 	memset(text, 0, sizeof(text));
        ; Setup parameters for call to function memset
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//   89 	sprintf(text, "\"temp\":%.1f", t);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,#`?<Constant "\\"temp\\":%.1f">` & 0xff
        MOV     R5,#(`?<Constant "\\"temp\\":%.1f">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//   90 	strcat(buf, text);
        ; Setup parameters for call to function strcat
        LCALL   ?Subroutine3 & 0xFFFF
//   91 	
//   92 	strcat(buf, "}");
//   93 	memset(text, 0, sizeof(text));
??CrossCallReturnLabel_14:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//   94 	return strlen(buf);
        ; Setup parameters for call to function strlen
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R1,A
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   95 
//   96 }
//   97 
//   98 //==========================================================
//   99 //	º¯ÊýÃû³Æ£º	OneNet_SendTempData
//  100 //
//  101 //	º¯Êý¹¦ÄÜ£º	ÉÏ´«ÎÂ¶ÈÊý¾Ýµ½Æ½Ì¨
//  102 //
//  103 //	Èë¿Ú²ÎÊý£º	data£º·¢ËÍµÄÎÂ¶È
//  104 //
//  105 //	·µ»Ø²ÎÊý£º	ÎÞ
//  106 //
//  107 //	ËµÃ÷£º		
//  108 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  109 void OneNet_SendTempData(int t, int h)
OneNet_SendTempData:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function OneNet_SendTempData
        CODE
//  110 {
        FUNCALL OneNet_SendTempData, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 157, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 157, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_SendTempData, OneNet_FillTempBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 159, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 159, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_SendTempData, EDP_PacketSaveData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 159, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 159, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_SendTempData, ESP8266_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 155, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 155, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_SendTempData, EDP_DeleteBuffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 155, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 155, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 139
        MOV     A,#0x75
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 155)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//  111 	
//  112 	EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};												//Ð­Òé°ü
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {(uint8 *)0, 0L, 0L, 0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {(uint8 *)0, 0L, 0L, 0}>_1` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  113 	
//  114 	char buf[128];
//  115 	
//  116 	short body_len = 0, i = 0;
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
//  117 
//  118 	memset(buf, 0, sizeof(buf));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 2,#-0x80
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 157)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 155)
//  119 	body_len = OneNet_FillTempBuf(buf,t);																	//»ñÈ¡µ±Ç°ÐèÒª·¢ËÍµÄÊý¾ÝÁ÷µÄ×Ü³¤¶È
        ; Setup parameters for call to function OneNet_FillTempBuf
        MOV     A,?V0 + 5
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_TO_FLT
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 159)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??OneNet_FillTempBuf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 155)
        MOV     A,R1
        MOV     R6,A
//  120 	
//  121 	if(body_len)
        JZ      ??CrossCallReturnLabel_1
//  122 	{
//  123 		if(EDP_PacketSaveData(DEVID, body_len, NULL, kTypeSimpleJsonWithoutTime, &edpPacket) == 0)	//·â°ü
        ; Setup parameters for call to function EDP_PacketSaveData
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 157)
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 159)
        MOV     R1,#0x3
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "530217468">` & 0xff
        MOV     R3,#(`?<Constant "530217468">` >> 8) & 0xff
        LCALL   ??EDP_PacketSaveData?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 155)
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_1
        SJMP    ??CrossCallReturnLabel_20
//  124 		{
//  125 			for(; i < body_len; i++)
//  126 				edpPacket._data[edpPacket._len++] = buf[i];
??OneNet_SendTempData_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_18:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_16:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_TO_X
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_22:
        JC      ??OneNet_SendTempData_0
//  127 			
//  128 			ESP8266_SendData(edpPacket._data, edpPacket._len);										//ÉÏ´«Êý¾Ýµ½Æ½Ì¨
        ; Setup parameters for call to function ESP8266_SendData
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
//  129 			
//  130 			EDP_DeleteBuffer(&edpPacket);															//É¾°ü	
//  131 		}
//  132 	}
//  133 	
//  134 }
??CrossCallReturnLabel_1:
        MOV     A,#-0x75
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 155)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 157)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ESP8266_SendData?relay
        ; Setup parameters for call to function EDP_DeleteBuffer
        ; Setup parameters for call to function EDP_DeleteBuffer
        ; Setup parameters for call to function EDP_DeleteBuffer
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??EDP_DeleteBuffer?relay
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  135 
//  136 
//  137 //ÎÂ¶ÈµÄÄÚÈÝ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  138 unsigned char OneNet_FillLedAndBuzzerBuf(char *buf,int led1, int led2, int led3, int buzzer)
OneNet_FillLedAndBuzzerBuf:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function OneNet_FillLedAndBuzzerBuf
        CODE
//  139 {
        FUNCALL OneNet_FillLedAndBuzzerBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_FillLedAndBuzzerBuf, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x26
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  140 	
//  141 	char text[16];
//  142 	
//  143 	memset(text, 0, sizeof(text));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 8,#0x10
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  144 	
//  145 	strcpy(buf, "{");
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "{">` & 0xff
        MOV     R5,#(`?<Constant "{">` >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcpy?relay
//  146 
//  147     //led1
//  148 	memset(text, 0, sizeof(text));
        ; Setup parameters for call to function memset
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  149 	sprintf(text, "\"led1\":%d", led1);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#`?<Constant "\\"led1\\":%d">` & 0xff
        MOV     R5,#(`?<Constant "\\"led1\\":%d">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  150 	strcat(buf, text);
        ; Setup parameters for call to function strcat
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine9 & 0xFFFF
//  151 	
//  152     //led2
//  153 	memset(text, 0, sizeof(text));
??CrossCallReturnLabel_28:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  154 	strcat(buf, ",");
        MOV     ?V0 + 0,#`?<Constant ",">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant ",">` >> 8) & 0xff
        ; Setup parameters for call to function strcat
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcat?relay
//  155 	sprintf(text, "\"led2\":%d", led2);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#`?<Constant "\\"led2\\":%d">` & 0xff
        MOV     R5,#(`?<Constant "\\"led2\\":%d">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  156 	strcat(buf, text);
        ; Setup parameters for call to function strcat
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcat?relay
//  157 
//  158     //led3
//  159 	memset(text, 0, sizeof(text));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 2,#0x10
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  160 	strcat(buf, ",");
        ; Setup parameters for call to function strcat
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcat?relay
//  161 	sprintf(text, "\"led3\":%d", led3);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#`?<Constant "\\"led3\\":%d">` & 0xff
        MOV     R5,#(`?<Constant "\\"led3\\":%d">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  162 	strcat(buf, text);
        ; Setup parameters for call to function strcat
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcat?relay
//  163 
//  164     //buzzer
//  165 	memset(text, 0, sizeof(text));
        ; Setup parameters for call to function memset
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  166 	strcat(buf, ",");
        ; Setup parameters for call to function strcat
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcat?relay
//  167 	sprintf(text, "\"buzzer\":%d", buzzer);
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#`?<Constant "\\"buzzer\\":%d">` & 0xff
        MOV     R5,#(`?<Constant "\\"buzzer\\":%d">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  168 	strcat(buf, text);
        ; Setup parameters for call to function strcat
        LCALL   ?Subroutine3 & 0xFFFF
//  169 
//  170 	strcat(buf, "}");
//  171 	memset(text, 0, sizeof(text));
??CrossCallReturnLabel_15:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 34)
//  172 	return strlen(buf);
        ; Setup parameters for call to function strlen
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R1,A
        MOV     A,#0x10
        CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  173 
//  174 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Valid
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcat?relay
        ; Setup parameters for call to function strcat
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "}">` & 0xff
        MOV     R5,#(`?<Constant "}">` >> 8) & 0xff
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_29:
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 34)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_14
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_15
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 34)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??strcat?relay
        ; Setup parameters for call to function memset
        ; Setup parameters for call to function memset
        ; Setup parameters for call to function memset
        MOV     ?V0 + 0,#0x10
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 157)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 159)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??memset?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33
//  175 
//  176 
//  177 //==========================================================
//  178 //	º¯ÊýÃû³Æ£º	OneNet_SendLedAndBuzzerData
//  179 //
//  180 //	º¯Êý¹¦ÄÜ£º	ÉÏ´«LEDºÍ·äÃùÆ÷×´Ì¬Êý¾Ýµ½Æ½Ì¨
//  181 //
//  182 //	Èë¿Ú²ÎÊý£º	led1, int led2, int led3, int buzzer£¬Òª·¢ËÍµÄ×´Ì¬
//  183 //
//  184 //	·µ»Ø²ÎÊý£º	ÎÞ
//  185 //
//  186 //	ËµÃ÷£º		
//  187 //==========================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  188 void OneNet_SendLedAndBuzzerData(int led1, int led2, int led3, int buzzer)
OneNet_SendLedAndBuzzerData:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI Function OneNet_SendLedAndBuzzerData
        CODE
//  189 {
        FUNCALL OneNet_SendLedAndBuzzerData, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 159, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 159, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_SendLedAndBuzzerData, OneNet_FillLedAndBuzzerBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 163, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 163, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_SendLedAndBuzzerData, EDP_PacketSaveData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 161, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 161, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_SendLedAndBuzzerData, ESP8266_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 157, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 157, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OneNet_SendLedAndBuzzerData, EDP_DeleteBuffer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 157, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 157, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 139
        MOV     A,#0x75
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 157)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#-0x63
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#-0x61
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  190 	
//  191 	EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};												//Ð­Òé°ü
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {(uint8 *)0, 0L, 0L, 0}>_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant {(uint8 *)0, 0L, 0L, 0}>_2` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  192 	
//  193 	char buf[128];
//  194 	
//  195 	short body_len = 0, i = 0;
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
//  196 
//  197 	memset(buf, 0, sizeof(buf));
        ; Setup parameters for call to function memset
        MOV     ?V0 + 8,#-0x80
        MOV     ?V0 + 9,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 159)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 157)
//  198 	body_len = OneNet_FillLedAndBuzzerBuf(buf,led1, led2, led3, buzzer);																	//»ñÈ¡µ±Ç°ÐèÒª·¢ËÍµÄÊý¾ÝÁ÷µÄ×Ü³¤¶È
        ; Setup parameters for call to function OneNet_FillLedAndBuzzerBuf
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 159)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 161)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 163)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??OneNet_FillLedAndBuzzerBuf?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 157)
        MOV     A,R1
        MOV     R6,A
//  199     
//  200 	if(body_len)
        JZ      ??CrossCallReturnLabel_2
//  201 	{
//  202 		if(EDP_PacketSaveData(DEVID, body_len, NULL, kTypeSimpleJsonWithoutTime, &edpPacket) == 0)	//·â°ü
        ; Setup parameters for call to function EDP_PacketSaveData
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 159)
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 161)
        MOV     R1,#0x3
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "530217468">` & 0xff
        MOV     R3,#(`?<Constant "530217468">` >> 8) & 0xff
        LCALL   ??EDP_PacketSaveData?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 157)
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_2
        SJMP    ??CrossCallReturnLabel_21
//  203 		{
//  204 			for(; i < body_len; i++)
//  205 				edpPacket._data[edpPacket._len++] = buf[i];
??OneNet_SendLedAndBuzzerData_0:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_19:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_17:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_ADD_TO_X
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_23:
        JC      ??OneNet_SendLedAndBuzzerData_0
//  206 			
//  207 			ESP8266_SendData(edpPacket._data, edpPacket._len);										//ÉÏ´«Êý¾Ýµ½Æ½Ì¨
        ; Setup parameters for call to function ESP8266_SendData
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine1 & 0xFFFF
//  208 			
//  209 			EDP_DeleteBuffer(&edpPacket);															//É¾°ü	
//  210 		}
//  211 	}
//  212 	
//  213 }
??CrossCallReturnLabel_2:
        MOV     A,#-0x75
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 155)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 157)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,R6
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 155)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 157)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 155)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 157)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 155)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+-1
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 157)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,?V0 + 4
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 5
        MOV     DPL,R0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??EDP_CheckConnectOK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    EDP_CheckConnectOK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OneNet_DevLink?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OneNet_DevLink

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OneNet_FillTempBuf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OneNet_FillTempBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OneNet_SendTempData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OneNet_SendTempData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OneNet_FillLedAndBuzzerBuf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OneNet_FillLedAndBuzzerBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??OneNet_SendLedAndBuzzerData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    OneNet_SendLedAndBuzzerData

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {(uint8 *)0, 0L, 0L, 0}>`:
        DATA16
        DW 0H
        DATA32
        DD 0
        DD 0
        DATA8
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "530217468">`:
        DB "530217468"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GngB=tqyPDpSvq0j8w=ni...">`:
        DB "GngB=tqyPDpSvq0j8w=ni3jJPbE="

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "{">`:
        DB "{"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"temp\\":%.1f">`:
        DB "\"temp\":%.1f"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "}">`:
        DB "}"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {(uint8 *)0, 0L, 0L, 0}>_1`:
        DATA16
        DW 0H
        DATA32
        DD 0
        DD 0
        DATA8
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"led1\\":%d">`:
        DB "\"led1\":%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ",">`:
        DB ","

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"led2\\":%d">`:
        DB "\"led2\":%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"led3\\":%d">`:
        DB "\"led3\":%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"buzzer\\":%d">`:
        DB "\"buzzer\":%d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {(uint8 *)0, 0L, 0L, 0}>_2`:
        DATA16
        DW 0H
        DATA32
        DD 0
        DD 0
        DATA8
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        END
//  214 
//  215 
// 
// 1 268 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//   136 bytes in segment XDATA_ROM_C
// 
// 1 304 bytes of CODE  memory
//   132 bytes of CONST memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: 15
