###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         15/Jun/2019  15:15:26 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\Sou #
#                          rce\EdpKit.c                                       #
#    Command line       =  -f H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼° #
#                          ¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ed #
#                          p\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg     #
#                          (-DCPU32MHZ -DROOT=__near_func                     #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg        #
#                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×Ê #
#                          ÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ #
#                          ·þÎñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstac #
#                          k\Samples\SampleApp\Source\EdpKit.c -D ZTOOL_P1    #
#                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D     #
#                          LCD_SUPPORTED=DEBUG -lC H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ× #
#                          ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\Ô #
#                          Æ·þÎñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\RouterEB\List\ -lA   #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\RouterEB\List\ --diag_suppress Pe001,Pa010   #
#                          -o H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼° #
#                          ¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ed #
#                          p\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\RouterEB\Obj\ -e --no_code_motion         #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼° #
#                          ¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ed #
#                          p\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§ #
#                          Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì #
#                          \onenet_edp\ZStack-2.5.1a\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\Source\ -I                   #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\ZMain\TI2530DB\ -I                  #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\hal\include\ -I    #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\hal\target\CC2530E #
#                          B\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒ #
#                          Ô¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet #
#                          _edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\..\..\..\..\..\Components\mac\include\ #
#                           -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼ #
#                          °¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_e #
#                          dp\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\mac\high_level #
#                          \ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ #
#                          ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ #
#                          edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\Components\mac\low_level #
#                          \srf04\ -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï° #
#                          Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\o #
#                          nenet_edp\ZStack-2.5.1a\Projects\zstack\Samples\Sa #
#                          mpleApp\CC2530DB\..\..\..\..\..\Components\mac\low #
#                          _level\srf04\single_chip\ -I                       #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\mt\ -I             #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\osal\include\ -I   #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\services\saddr\    #
#                          -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼° #
#                          ¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_ed #
#                          p\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\services\sdata\ #
#                           -I H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼ #
#                          °¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_e #
#                          dp\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\..\..\Components\stack\af\ -I   #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\nwk\ -I      #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\sapi\ -I     #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\sec\ -I      #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\sys\ -I      #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\stack\zdo\ -I      #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\zmac\ -I           #
#                          H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz     #
#    List file          =  H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\RouterEB\List\EdpKit.lst                     #
#    Object file        =  H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª· #
#                          ¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\RouterEB\Obj\EdpKit.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

H:\zigbee\¿ª·¢°å\ÌÔ±¦ËùÓÃ×ÊÁÏ-V4.2\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\8.WiFiÍ¸´«Íø¹Ø\ÔÆ·þÎñÆ÷Àý³Ì\onenet_edp\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\EdpKit.c
      1          /**
      2          	************************************************************
      3          	************************************************************
      4          	************************************************************
      5          	*	ÎÄ¼þÃû£º 	EdpKit.c
      6          	*
      7          	*	×÷Õß£º 		
      8          	*
      9          	*	ÈÕÆÚ£º 		2017-09-13
     10          	*
     11          	*	°æ±¾£º 		V1.1
     12          	*
     13          	*	ËµÃ÷£º 		EDPÐ­Òé
     14          	*
     15          	*	ÐÞ¸Ä¼ÇÂ¼£º	V1.1£º½«strncpyÌæ»»Îªmemcpy£¬½â¾öÇ±ÔÚbug
     16          	************************************************************
     17          	************************************************************
     18          	************************************************************
     19          **/
     20          
     21          //Ð­ÒéÍ·ÎÄ¼þ
     22          #include "EdpKit.h"
     23          
     24          
     25          //C¿â
     26          //#include <string.h>
     27          
     28          
     29          //==========================================================
     30          //	º¯ÊýÃû³Æ£º	EDP_NewBuffer
     31          //
     32          //	º¯Êý¹¦ÄÜ£º	ÉêÇëÄÚ´æ
     33          //
     34          //	Èë¿Ú²ÎÊý£º	edpPacket£º°ü½á¹¹Ìå
     35          //				size£º´óÐ¡
     36          //
     37          //	·µ»Ø²ÎÊý£º	ÎÞ
     38          //
     39          //	ËµÃ÷£º		1.¿ÉÊ¹ÓÃ¶¯Ì¬·ÖÅäÀ´·ÖÅäÄÚ´æ
     40          //				2.¿ÉÊ¹ÓÃ¾Ö²¿»òÈ«¾ÖÊý×éÀ´Ö¸¶¨ÄÚ´æ
     41          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          void EDP_NewBuffer(EDP_PACKET_STRUCTURE *edpPacket, uint32 size)
   \                     EDP_NewBuffer:
     43          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   7414         MOV     A,#0x14
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   78..         MOV     R0,#?V0 + 8
   \   000010   12....       LCALL   ?L_MOV_X
     44          	
     45          	uint32 i = 0;
   \   000013   90....       MOV     DPTR,#__Constant_0
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
     46          
     47          	if(edpPacket->_data == NULL)
   \   00001B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   704F         JNZ     ??EDP_NewBuffer_0
     48          	{
     49          		edpPacket->_memFlag = MEM_FLAG_ALLOC;
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
     50          		
     51          		edpPacket->_data = (uint8 *)EDP_MallocBuffer(size);
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   85....       MOV     ?V0 + 0,?V0 + 8
   \   000034   85....       MOV     ?V0 + 1,?V0 + 9
   \   000037   AA..         MOV     R2,?V0 + 0
   \   000039   AB..         MOV     R3,?V0 + 1
   \   00003B   12....       LCALL   ??osal_mem_alloc?relay
   \   00003E   12....       LCALL   ?Subroutine36 & 0xFFFF
     52          		if(edpPacket->_data != NULL)
   \                     ??CrossCallReturnLabel_174:
   \   000041   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000044   607B         JZ      ??EDP_NewBuffer_1
     53          		{
     54          			edpPacket->_len = 0;
   \   000046   90....       MOV     DPTR,#__Constant_0
   \   000049   12....       LCALL   ?XLOAD_R2345
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   12....       LCALL   ?XSTORE_R2345
     55          			
     56          			edpPacket->_size = size;
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   78..         MOV     R0,#?V0 + 8
   \   000061   12....       LCALL   ?L_MOV_TO_X
     57          
     58          			for(; i < edpPacket->_size; i++)
   \                     ??EDP_NewBuffer_2:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   78..         MOV     R0,#?V0 + 4
   \   000070   12....       LCALL   ?UL_GE_X
   \   000073   404C         JC      ??EDP_NewBuffer_1
     59          				edpPacket->_data[i] = 0;
   \   000075   12....       LCALL   ?Subroutine14 & 0xFFFF
     60          		}
     61          	}
   \                     ??CrossCallReturnLabel_20:
   \   000078   12....       LCALL   ?L_ADD_X
   \   00007B   80E7         SJMP    ??EDP_NewBuffer_2
     62          	else
     63          	{
     64          		edpPacket->_memFlag = MEM_FLAG_STATIC;
   \                     ??EDP_NewBuffer_0:
   \   00007D   7402         MOV     A,#0x2
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8006         SJMP    ??EDP_NewBuffer_3
     65          		
     66          		for(; i < edpPacket->_size; i++)
     67          			edpPacket->_data[i] = 0;
   \                     ??EDP_NewBuffer_4:
   \   000082   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000085   12....       LCALL   ?L_ADD_X
   \                     ??EDP_NewBuffer_3:
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   78..         MOV     R0,#?V0 + 4
   \   000094   12....       LCALL   ?UL_GE_X
   \   000097   50E9         JNC     ??EDP_NewBuffer_4
     68          		
     69          		edpPacket->_len = 0;
   \   000099   90....       MOV     DPTR,#__Constant_0
   \   00009C   12....       LCALL   ?XLOAD_R2345
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   12....       LCALL   ?XSTORE_R2345
     70          		
     71          		if(edpPacket->_size < size)
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   78..         MOV     R0,#?V0 + 8
   \   0000B4   12....       LCALL   ?UL_GT_X
   \   0000B7   5008         JNC     ??EDP_NewBuffer_1
     72          			edpPacket->_data = NULL;
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   E4           CLR     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   F0           MOVX    @DPTR,A
     73          	}
     74          
     75          }
   \                     ??EDP_NewBuffer_1:
   \   0000C1                REQUIRE ?Subroutine0
   \   0000C1                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85....       MOV     ?V0 + 0,?V0 + 4
   \   000003   85....       MOV     ?V0 + 1,?V0 + 5
   \   000006   8E82         MOV     DPL,R6
   \   000008   8F83         MOV     DPH,R7
   \   00000A   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   00000D   E4           CLR     A
   \   00000E   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#__Constant_1
   \   000004   78..         MOV     R0,#?V0 + 4
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   35..         ADDC    A,?V0 + 1
   \   000008   8882         MOV     DPL,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine71_0
   \   000004                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine77_0
   \   000004                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET
     76          
     77          //==========================================================
     78          //	º¯ÊýÃû³Æ£º	EDP_DeleteBuffer
     79          //
     80          //	º¯Êý¹¦ÄÜ£º	ÊÍ·ÅÊý¾ÝÄÚ´æ
     81          //
     82          //	Èë¿Ú²ÎÊý£º	edpPacket£º°ü½á¹¹Ìå
     83          //
     84          //	·µ»Ø²ÎÊý£º	ÎÞ
     85          //
     86          //	ËµÃ÷£º		µ±Ê¹ÓÃµÄ¾Ö²¿»òÈ«¾ÖÊý×éÊ±²»ÊÍ·ÅÄÚ´æ
     87          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     88          void EDP_DeleteBuffer(EDP_PACKET_STRUCTURE *edpPacket)
   \                     EDP_DeleteBuffer:
     89          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     90          
     91          	if(edpPacket->_memFlag == MEM_FLAG_ALLOC)
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   700A         JNZ     ??EDP_DeleteBuffer_0
     92          		EDP_FreeBuffer(edpPacket->_data);
   \   00001C                ; Setup parameters for call to function osal_mem_free
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000023   12....       LCALL   ??osal_mem_free?relay
     93          	
     94          	edpPacket->_data = NULL;
   \                     ??EDP_DeleteBuffer_0:
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E4           CLR     A
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   F0           MOVX    @DPTR,A
     95          	edpPacket->_len = 0;
   \   00002E   90....       MOV     DPTR,#__Constant_0
   \   000031   12....       LCALL   ?XLOAD_R2345
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   12....       LCALL   ?XSTORE_R2345
     96          	edpPacket->_size = 0;
   \   00003D   90....       MOV     DPTR,#__Constant_0
   \   000040   12....       LCALL   ?XLOAD_R2345
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ?XSTORE_R2345
     97          	edpPacket->_memFlag = MEM_FLAG_NULL;
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
     98          
     99          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   12....       LCALL   ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   22           RET
    100          
    101          
    102          //==========================================================
    103          //	º¯ÊýÃû³Æ£º	EDP_UnPacketRecv
    104          //
    105          //	º¯Êý¹¦ÄÜ£º	EDPÊý¾Ý½ÓÊÕÀàÐÍÅÐ¶Ï
    106          //
    107          //	Èë¿Ú²ÎÊý£º	dataPtr£º½ÓÊÕµÄÊý¾ÝÖ¸Õë
    108          //
    109          //	·µ»Ø²ÎÊý£º	0-³É¹¦		ÆäËû-Ê§°ÜÔ­Òò
    110          //
    111          //	ËµÃ÷£º		
    112          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 EDP_UnPacketRecv(uint8 *dataPtr)
   \                     EDP_UnPacketRecv:
    114          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    115          	
    116          	return dataPtr[0];
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008                REQUIRE ?Subroutine1
   \   000008                ; // Fall through to label ?Subroutine1
    117          
    118          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   D083         POP     DPH
   \   000004   D082         POP     DPL
   \   000006   02....       LJMP    ?BRET
    119          
    120          //==========================================================
    121          //	º¯ÊýÃû³Æ£º	EDP_PacketConnect1
    122          //
    123          //	º¯Êý¹¦ÄÜ£º	µÇÂ¼·½Ê½1×é°ü
    124          //
    125          //	Èë¿Ú²ÎÊý£º	devid£ºÉè±¸ID
    126          //				apikey£ºAPIKEY
    127          //				cTime£ºÁ¬½Ó±£³ÖÊ±¼ä
    128          //				edpPacket£º°üÖ¸Õë
    129          //
    130          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    131          //
    132          //	ËµÃ÷£º		
    133          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          uint1 EDP_PacketConnect1(const int8 *devid, const int8 *apikey, uint16 cTime, EDP_PACKET_STRUCTURE *edpPacket)
   \                     EDP_PacketConnect1:
    135          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 10,R2
   \   000007   8B..         MOV     ?V0 + 11,R3
   \   000009   8C..         MOV     ?V0 + 12,R4
   \   00000B   8D..         MOV     ?V0 + 13,R5
   \   00000D   7416         MOV     A,#0x16
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine9 & 0xFFFF
    136          	
    137          	uint8 devid_len = strlen(devid);
                 	                  ^
Warning[Pe223]: function "strlen" declared implicitly
    138          	uint8 apikey_len = strlen(apikey);
    139          
    140          	//·ÖÅäÄÚ´æ---------------------------------------------------------------------
    141          	EDP_NewBuffer(edpPacket, 56);
   \                     ??CrossCallReturnLabel_11:
   \   00001B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001E   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    142          	if(edpPacket->_data == NULL)
   \   000024   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000027   7005         JNZ     ??EDP_PacketConnect1_0
    143          		return 1;
   \   000029   7901         MOV     R1,#0x1
   \   00002B   02....       LJMP    ??EDP_PacketConnect1_1 & 0xFFFF
    144          	
    145          	//Byte0£ºÁ¬½ÓÀàÐÍ--------------------------------------------------------------
    146          	edpPacket->_data[0] = CONNREQ;
   \                     ??EDP_PacketConnect1_0:
   \   00002E   12....       LCALL   ?Subroutine10 & 0xFFFF
    147          	edpPacket->_len++;
   \                     ??CrossCallReturnLabel_13:
   \   000031   12....       LCALL   ?L_MOV_X
   \   000034   85..82       MOV     DPL,?V0 + 0
   \   000037   85..83       MOV     DPH,?V0 + 1
   \   00003A   78..         MOV     R0,#?V0 + 4
   \   00003C   12....       LCALL   ?L_ADD_TO_X
    148          	
    149          	//Byte1£ºÊ£ÓàÏûÏ¢³¤¶È----------------------------------------------------------
    150          	edpPacket->_data[1] = 13 + devid_len + apikey_len;
   \   00003F   E5..         MOV     A,?V0 + 8
   \   000041   25..         ADD     A,?V0 + 9
   \   000043   240D         ADD     A,#0xd
   \   000045   C0E0         PUSH    A
   \   000047   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00004A   A3           INC     DPTR
   \   00004B   D0E0         POP     A
   \   00004D   12....       LCALL   ??Subroutine65_0 & 0xFFFF
    151          	edpPacket->_len++;
   \                     ??CrossCallReturnLabel_123:
   \   000050   12....       LCALL   ?L_MOV_X
   \   000053   85..82       MOV     DPL,?V0 + 0
   \   000056   85..83       MOV     DPH,?V0 + 1
   \   000059   78..         MOV     R0,#?V0 + 4
   \   00005B   12....       LCALL   ?L_ADD_TO_X
    152          	
    153          	//Byte2~3£ºÐ­ÒéÃû³¤¶È----------------------------------------------------------
    154          	edpPacket->_data[2] = 0;
   \   00005E   12....       LCALL   ?Subroutine7 & 0xFFFF
    155          	edpPacket->_data[3] = 3;
    156          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_7:
   \   000061   12....       LCALL   ?L_MOV_X
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   12....       LCALL   ?L_ADD_TO_X
    157          	
    158          	//Byte4~6£ºÐ­ÒéÃû--------------------------------------------------------------
    159          	strncat((int8 *)edpPacket->_data + 4, "EDP", 3);
                 	^
Warning[Pe223]: function "strncat" declared implicitly
   \   00006F                ; Setup parameters for call to function strncat
   \   00006F   75..03       MOV     ?V0 + 4,#0x3
   \   000072   75..00       MOV     ?V0 + 5,#0x0
   \   000075   78..         MOV     R0,#?V0 + 4
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
    160          	edpPacket->_len += 3;
   \   000080   90....       MOV     DPTR,#__Constant_3
   \   000083   78..         MOV     R0,#?V0 + 4
   \   000085   12....       LCALL   ?L_MOV_X
   \   000088   85..82       MOV     DPL,?V0 + 0
   \   00008B   85..83       MOV     DPH,?V0 + 1
   \   00008E   78..         MOV     R0,#?V0 + 4
   \   000090   12....       LCALL   ?L_ADD_TO_X
    161          	
    162          	//Byte7£ºÐ­Òé°æ±¾--------------------------------------------------------------
    163          	edpPacket->_data[7] = 1;
   \   000093   12....       LCALL   ?Subroutine11 & 0xFFFF
    164          	edpPacket->_len++;
   \                     ??CrossCallReturnLabel_15:
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   85..82       MOV     DPL,?V0 + 0
   \   00009C   85..83       MOV     DPH,?V0 + 1
   \   00009F   78..         MOV     R0,#?V0 + 4
   \   0000A1   12....       LCALL   ?L_ADD_TO_X
    165          	
    166          	//Byte8£ºÁ¬½Ó±êÖ¾--------------------------------------------------------------
    167          	edpPacket->_data[8] = 0x40;
   \   0000A4   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A7   7440         MOV     A,#0x40
   \   0000A9   12....       LCALL   ??Subroutine65_0 & 0xFFFF
    168          	edpPacket->_len++;
   \                     ??CrossCallReturnLabel_124:
   \   0000AC   12....       LCALL   ?L_MOV_X
   \   0000AF   85..82       MOV     DPL,?V0 + 0
   \   0000B2   85..83       MOV     DPH,?V0 + 1
   \   0000B5   78..         MOV     R0,#?V0 + 4
   \   0000B7   12....       LCALL   ?L_ADD_TO_X
    169          	
    170          	//Byte9~10£ºÁ¬½Ó±£³ÖÊ±¼ä-------------------------------------------------------
    171          	edpPacket->_data[9] = MOSQ_MSB(cTime);
   \   0000BA   12....       LCALL   ?Subroutine5 & 0xFFFF
    172          	edpPacket->_data[10] = MOSQ_LSB(cTime);
    173          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_0:
   \   0000BD   12....       LCALL   ?L_MOV_X
   \   0000C0   85..82       MOV     DPL,?V0 + 0
   \   0000C3   85..83       MOV     DPH,?V0 + 1
   \   0000C6   78..         MOV     R0,#?V0 + 4
   \   0000C8   12....       LCALL   ?L_ADD_TO_X
    174          	
    175          	//Byte11~12£ºDEVID³¤¶È---------------------------------------------------------
    176          	edpPacket->_data[11] = MOSQ_MSB(devid_len);
   \   0000CB   12....       LCALL   ?Subroutine8 & 0xFFFF
    177          	edpPacket->_data[12] = MOSQ_LSB(devid_len);
   \                     ??CrossCallReturnLabel_9:
   \   0000CE   E5..         MOV     A,?V0 + 8
   \   0000D0   12....       LCALL   ??Subroutine64_0 & 0xFFFF
    178          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_117:
   \   0000D3   12....       LCALL   ?L_MOV_X
   \   0000D6   85..82       MOV     DPL,?V0 + 0
   \   0000D9   85..83       MOV     DPH,?V0 + 1
   \   0000DC   78..         MOV     R0,#?V0 + 4
   \   0000DE   12....       LCALL   ?L_ADD_TO_X
    179          	
    180          	//Byte13~13+devid_len£ºDEVID---------------------------------------------------
    181          	strncat((int8 *)edpPacket->_data + 13, devid, devid_len);
   \   0000E1   85..82       MOV     DPL,?V0 + 8
   \   0000E4   8582..       MOV     ?V0 + 2,DPL
   \   0000E7   75..00       MOV     ?V0 + 3,#0x0
   \   0000EA                ; Setup parameters for call to function strncat
   \   0000EA   78..         MOV     R0,#?V0 + 2
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EF   AC..         MOV     R4,?V0 + 10
   \   0000F1   AD..         MOV     R5,?V0 + 11
   \   0000F3   8E82         MOV     DPL,R6
   \   0000F5   8F83         MOV     DPH,R7
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   240D         ADD     A,#0xd
   \   0000FA   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
    182          	edpPacket->_len += devid_len;
   \   000100   85....       MOV     ?V0 + 4,?V0 + 8
   \   000103   E4           CLR     A
   \   000104   F5..         MOV     ?V0 + 5,A
   \   000106   F5..         MOV     ?V0 + 6,A
   \   000108   F5..         MOV     ?V0 + 7,A
   \   00010A   85..82       MOV     DPL,?V0 + 0
   \   00010D   85..83       MOV     DPH,?V0 + 1
   \   000110   78..         MOV     R0,#?V0 + 4
   \   000112   12....       LCALL   ?L_ADD_TO_X
    183          	
    184          	//Byte13+devid_len~13+devid_len+2£ºAPIKEY³¤¶È----------------------------------
    185          	edpPacket->_data[13 + devid_len] = MOSQ_MSB(apikey_len);
   \   000115   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000118   240D         ADD     A,#0xd
   \   00011A   12....       LCALL   ?Subroutine22 & 0xFFFF
    186          	edpPacket->_data[14 + devid_len] = MOSQ_LSB(apikey_len);
   \                     ??CrossCallReturnLabel_144:
   \   00011D   240E         ADD     A,#0xe
   \   00011F   12....       LCALL   ?Subroutine35 & 0xFFFF
    187          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_115:
   \   000122   12....       LCALL   ?L_MOV_X
   \   000125   85..82       MOV     DPL,?V0 + 0
   \   000128   85..83       MOV     DPH,?V0 + 1
   \   00012B   78..         MOV     R0,#?V0 + 4
   \   00012D   12....       LCALL   ?L_ADD_TO_X
    188          	
    189          	//Byte15+devid_len~15+devid_len+apikey_len£ºAPIKEY-----------------------------
    190          	strncat((int8 *)edpPacket->_data + 15 + devid_len, apikey, apikey_len);
   \   000130                ; Setup parameters for call to function strncat
   \   000130   85....       MOV     ?V0 + 4,?V0 + 9
   \   000133   75..00       MOV     ?V0 + 5,#0x0
   \   000136   78..         MOV     R0,#?V0 + 4
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   AC..         MOV     R4,?V0 + 12
   \   00013D   AD..         MOV     R5,?V0 + 13
   \   00013F   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000142   240F         ADD     A,#0xf
   \   000144   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
    191          	edpPacket->_len += apikey_len;
   \   00014A   E4           CLR     A
   \   00014B   F5..         MOV     ?V0 + 6,A
   \   00014D   F5..         MOV     ?V0 + 7,A
   \   00014F   85..82       MOV     DPL,?V0 + 0
   \   000152   85..83       MOV     DPH,?V0 + 1
   \   000155   78..         MOV     R0,#?V0 + 4
   \   000157   12....       LCALL   ?L_ADD_TO_X
    192          	
    193          	return 0;
   \   00015A   7900         MOV     R1,#0x0
   \                     ??EDP_PacketConnect1_1:
   \   00015C                REQUIRE ?Subroutine2
   \   00015C                ; // Fall through to label ?Subroutine2
    194          
    195          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine63_0
   \   000004                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   12....       LCALL   ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   FA           MOV     R2,A
   \   000001   E9           MOV     A,R1
   \   000002   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F582         MOV     DPL,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E5..         MOV     A,?V0 + 9
   \   000009                REQUIRE ??Subroutine64_0
   \   000009                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   7418         MOV     A,#0x18
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F582         MOV     DPL,A
   \   000002   E9           MOV     A,R1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009                REQUIRE ??Subroutine66_0
   \   000009                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   25..         ADD     A,?V0 + 2
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7C..         MOV     R4,#`?<Constant "EDP">` & 0xff
   \   000002   7D..         MOV     R5,#(`?<Constant "EDP">` >> 8) & 0xff
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   E0           MOVX    A,@DPTR
   \   000009   2404         ADD     A,#0x4
   \   00000B                REQUIRE ??Subroutine67_0
   \   00000B                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   FA           MOV     R2,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??strncat?relay
   \   000006   7402         MOV     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000007   7410         MOV     A,#0x10
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   2402         ADD     A,#0x2
   \   00000D   F5..         MOV     ?V0 + 0,A
   \   00000F   EF           MOV     A,R7
   \   000010   3400         ADDC    A,#0x0
   \   000012   F5..         MOV     ?V0 + 1,A
   \   000014   90....       MOV     DPTR,#__Constant_1
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005                ; Setup parameters for call to function strlen
   \   000005                ; Setup parameters for call to function strlen
   \   000005   12....       LCALL   ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000008   F5..         MOV     ?V0 + 8,A
   \   00000A                ; Setup parameters for call to function strlen
   \   00000A                ; Setup parameters for call to function strlen
   \   00000A   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00000D   F5..         MOV     ?V0 + 9,A
   \   00000F                ; Setup parameters for call to function EDP_NewBuffer
   \   00000F                ; Setup parameters for call to function EDP_NewBuffer
   \   00000F   90....       MOV     DPTR,#__Constant_38
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   240B         ADD     A,#0xb
   \   000007   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   E0           MOVX    A,@DPTR
   \   000011   240C         ADD     A,#0xc
   \   000013   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E4           CLR     A
   \   000006   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000009   7403         MOV     A,#0x3
   \   00000B   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#__Constant_2
   \   000004   78..         MOV     R0,#?V0 + 4
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 3
   \   000006   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E5..         MOV     A,?V0 + 2
   \   000012   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   AA..         MOV     R2,?V0 + 12
   \   000002   AB..         MOV     R3,?V0 + 13
   \   000004                REQUIRE ??Subroutine68_0
   \   000004                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   12....       LCALL   ??strlen?relay
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine73_0
   \   000004                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine74_0
   \   000002                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine78_0
   \   000004                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   12....       LCALL   ??EDP_NewBuffer?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    196          
    197          //==========================================================
    198          //	º¯ÊýÃû³Æ£º	EDP_PacketConnect2
    199          //
    200          //	º¯Êý¹¦ÄÜ£º	µÇÂ¼·½Ê½2×é°ü
    201          //
    202          //	Èë¿Ú²ÎÊý£º	devid£ºÉè±¸ID
    203          //				auth_key£º¼øÈ¨ÐÅÏ¢
    204          //				cTime£ºÁ¬½Ó±£³ÖÊ±¼ä
    205          //				edpPacket£º°üÖ¸Õë
    206          //
    207          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    208          //
    209          //	ËµÃ÷£º		
    210          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          uint1 EDP_PacketConnect2(const int8 *proid, const int8 *auth_key, uint16 cTime, EDP_PACKET_STRUCTURE *edpPacket)
   \                     EDP_PacketConnect2:
    212          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 10,R2
   \   000007   8B..         MOV     ?V0 + 11,R3
   \   000009   8C..         MOV     ?V0 + 12,R4
   \   00000B   8D..         MOV     ?V0 + 13,R5
   \   00000D   7416         MOV     A,#0x16
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine9 & 0xFFFF
    213          	
    214          	uint8 proid_len = strlen(proid);
                 	                  ^
Warning[Pe223]: function "strlen" declared implicitly
    215          	uint8 authkey_len = strlen(auth_key);
    216          
    217          	//·ÖÅäÄÚ´æ---------------------------------------------------------------------
    218          	EDP_NewBuffer(edpPacket, 56);
   \                     ??CrossCallReturnLabel_12:
   \   00001B   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001E   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    219          	if(edpPacket->_data == NULL)
   \   000024   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000027   7005         JNZ     ??EDP_PacketConnect2_0
    220          		return 1;
   \   000029   7901         MOV     R1,#0x1
   \   00002B   02....       LJMP    ??EDP_PacketConnect2_1 & 0xFFFF
    221          	
    222          	//Byte0£ºÁ¬½ÓÀàÐÍ--------------------------------------------------------------
    223          	edpPacket->_data[0] = CONNREQ;
   \                     ??EDP_PacketConnect2_0:
   \   00002E   12....       LCALL   ?Subroutine10 & 0xFFFF
    224          	edpPacket->_len++;
   \                     ??CrossCallReturnLabel_14:
   \   000031   12....       LCALL   ?L_MOV_X
   \   000034   85..82       MOV     DPL,?V0 + 0
   \   000037   85..83       MOV     DPH,?V0 + 1
   \   00003A   78..         MOV     R0,#?V0 + 4
   \   00003C   12....       LCALL   ?L_ADD_TO_X
    225          	
    226          	//Byte1£ºÊ£ÓàÏûÏ¢³¤¶È----------------------------------------------------------
    227          	edpPacket->_data[1] = 15 + proid_len + authkey_len;
   \   00003F   E5..         MOV     A,?V0 + 8
   \   000041   25..         ADD     A,?V0 + 9
   \   000043   240F         ADD     A,#0xf
   \   000045   C0E0         PUSH    A
   \   000047   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00004A   A3           INC     DPTR
   \   00004B   D0E0         POP     A
   \   00004D   12....       LCALL   ??Subroutine65_0 & 0xFFFF
    228          	edpPacket->_len++;
   \                     ??CrossCallReturnLabel_125:
   \   000050   12....       LCALL   ?L_MOV_X
   \   000053   85..82       MOV     DPL,?V0 + 0
   \   000056   85..83       MOV     DPH,?V0 + 1
   \   000059   78..         MOV     R0,#?V0 + 4
   \   00005B   12....       LCALL   ?L_ADD_TO_X
    229          	
    230          	//Byte2~3£ºÐ­ÒéÃû³¤¶È----------------------------------------------------------
    231          	edpPacket->_data[2] = 0;
   \   00005E   12....       LCALL   ?Subroutine7 & 0xFFFF
    232          	edpPacket->_data[3] = 3;
    233          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_8:
   \   000061   12....       LCALL   ?L_MOV_X
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   78..         MOV     R0,#?V0 + 4
   \   00006C   12....       LCALL   ?L_ADD_TO_X
    234          	
    235          	//Byte4~6£ºÐ­ÒéÃû--------------------------------------------------------------
    236          	strncat((int8 *)edpPacket->_data + 4, "EDP", 3);
                 	^
Warning[Pe223]: function "strncat" declared implicitly
   \   00006F                ; Setup parameters for call to function strncat
   \   00006F   75..03       MOV     ?V0 + 4,#0x3
   \   000072   75..00       MOV     ?V0 + 5,#0x0
   \   000075   78..         MOV     R0,#?V0 + 4
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
    237          	edpPacket->_len += 3;
   \   000080   90....       MOV     DPTR,#__Constant_3
   \   000083   78..         MOV     R0,#?V0 + 4
   \   000085   12....       LCALL   ?L_MOV_X
   \   000088   85..82       MOV     DPL,?V0 + 0
   \   00008B   85..83       MOV     DPH,?V0 + 1
   \   00008E   78..         MOV     R0,#?V0 + 4
   \   000090   12....       LCALL   ?L_ADD_TO_X
    238          	
    239          	//Byte7£ºÐ­Òé°æ±¾--------------------------------------------------------------
    240          	edpPacket->_data[7] = 1;
   \   000093   12....       LCALL   ?Subroutine11 & 0xFFFF
    241          	edpPacket->_len++;
   \                     ??CrossCallReturnLabel_16:
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   85..82       MOV     DPL,?V0 + 0
   \   00009C   85..83       MOV     DPH,?V0 + 1
   \   00009F   78..         MOV     R0,#?V0 + 4
   \   0000A1   12....       LCALL   ?L_ADD_TO_X
    242          	
    243          	//Byte8£ºÁ¬½Ó±êÖ¾--------------------------------------------------------------
    244          	edpPacket->_data[8] = 0xC0;
   \   0000A4   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000A7   74C0         MOV     A,#-0x40
   \   0000A9   12....       LCALL   ??Subroutine65_0 & 0xFFFF
    245          	edpPacket->_len++;
   \                     ??CrossCallReturnLabel_126:
   \   0000AC   12....       LCALL   ?L_MOV_X
   \   0000AF   85..82       MOV     DPL,?V0 + 0
   \   0000B2   85..83       MOV     DPH,?V0 + 1
   \   0000B5   78..         MOV     R0,#?V0 + 4
   \   0000B7   12....       LCALL   ?L_ADD_TO_X
    246          	
    247          	//Byte9~10£ºÁ¬½Ó±£³ÖÊ±¼ä-------------------------------------------------------
    248          	edpPacket->_data[9] = MOSQ_MSB(cTime);
   \   0000BA   12....       LCALL   ?Subroutine5 & 0xFFFF
    249          	edpPacket->_data[10] = MOSQ_LSB(cTime);
    250          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_1:
   \   0000BD   12....       LCALL   ?L_MOV_X
   \   0000C0   85..82       MOV     DPL,?V0 + 0
   \   0000C3   85..83       MOV     DPH,?V0 + 1
   \   0000C6   78..         MOV     R0,#?V0 + 4
   \   0000C8   12....       LCALL   ?L_ADD_TO_X
    251          	
    252          	//Byte11~12£ºDEVID³¤¶È---------------------------------------------------------
    253          	edpPacket->_data[11] = 0;
   \   0000CB   12....       LCALL   ?Subroutine8 & 0xFFFF
    254          	edpPacket->_data[12] = 0;
   \                     ??CrossCallReturnLabel_10:
   \   0000CE   E4           CLR     A
   \   0000CF   12....       LCALL   ??Subroutine64_0 & 0xFFFF
    255          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_118:
   \   0000D2   12....       LCALL   ?L_MOV_X
   \   0000D5   85..82       MOV     DPL,?V0 + 0
   \   0000D8   85..83       MOV     DPH,?V0 + 1
   \   0000DB   78..         MOV     R0,#?V0 + 4
   \   0000DD   12....       LCALL   ?L_ADD_TO_X
    256          	
    257          	//Byte13~14£ºPROID³¤¶È---------------------------------------------------------
    258          	edpPacket->_data[13] = MOSQ_MSB(proid_len);
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   240D         ADD     A,#0xd
   \   0000E7   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000EA   E4           CLR     A
   \   0000EB   F0           MOVX    @DPTR,A
    259          	edpPacket->_data[14] = MOSQ_LSB(proid_len);
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   240E         ADD     A,#0xe
   \   0000F3   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000F6   E5..         MOV     A,?V0 + 8
   \   0000F8   12....       LCALL   ??Subroutine64_0 & 0xFFFF
    260          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_119:
   \   0000FB   12....       LCALL   ?L_MOV_X
   \   0000FE   85..82       MOV     DPL,?V0 + 0
   \   000101   85..83       MOV     DPH,?V0 + 1
   \   000104   78..         MOV     R0,#?V0 + 4
   \   000106   12....       LCALL   ?L_ADD_TO_X
    261          	
    262          	//Byte15~15+proid_len£ºRPOID---------------------------------------------------
    263          	strncat((int8 *)edpPacket->_data + 15, proid, proid_len);
   \   000109   85..82       MOV     DPL,?V0 + 8
   \   00010C   8582..       MOV     ?V0 + 2,DPL
   \   00010F   75..00       MOV     ?V0 + 3,#0x0
   \   000112                ; Setup parameters for call to function strncat
   \   000112   78..         MOV     R0,#?V0 + 2
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   AC..         MOV     R4,?V0 + 10
   \   000119   AD..         MOV     R5,?V0 + 11
   \   00011B   8E82         MOV     DPL,R6
   \   00011D   8F83         MOV     DPH,R7
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   240F         ADD     A,#0xf
   \   000122   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000125   12....       LCALL   ?DEALLOC_XSTACK8
    264          	edpPacket->_len += proid_len;
   \   000128   85....       MOV     ?V0 + 4,?V0 + 8
   \   00012B   E4           CLR     A
   \   00012C   F5..         MOV     ?V0 + 5,A
   \   00012E   F5..         MOV     ?V0 + 6,A
   \   000130   F5..         MOV     ?V0 + 7,A
   \   000132   85..82       MOV     DPL,?V0 + 0
   \   000135   85..83       MOV     DPH,?V0 + 1
   \   000138   78..         MOV     R0,#?V0 + 4
   \   00013A   12....       LCALL   ?L_ADD_TO_X
    265          	
    266          	//Byte15+devid_len~15+proid_len+1£ºAPIKEY³¤¶È----------------------------------
    267          	edpPacket->_data[15 + proid_len] = MOSQ_MSB(authkey_len);
   \   00013D   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000140   240F         ADD     A,#0xf
   \   000142   12....       LCALL   ?Subroutine22 & 0xFFFF
    268          	edpPacket->_data[16 + proid_len] = MOSQ_LSB(authkey_len);
   \                     ??CrossCallReturnLabel_145:
   \   000145   2410         ADD     A,#0x10
   \   000147   12....       LCALL   ?Subroutine35 & 0xFFFF
    269          	edpPacket->_len += 2;
   \                     ??CrossCallReturnLabel_116:
   \   00014A   12....       LCALL   ?L_MOV_X
   \   00014D   85..82       MOV     DPL,?V0 + 0
   \   000150   85..83       MOV     DPH,?V0 + 1
   \   000153   78..         MOV     R0,#?V0 + 4
   \   000155   12....       LCALL   ?L_ADD_TO_X
    270          	
    271          	//Byte17+proid_len~17+proid_len+apikey_len£ºAPIKEY-----------------------------
    272          	strncat((int8 *)edpPacket->_data + 17 + proid_len, auth_key, authkey_len);
   \   000158                ; Setup parameters for call to function strncat
   \   000158   85....       MOV     ?V0 + 4,?V0 + 9
   \   00015B   75..00       MOV     ?V0 + 5,#0x0
   \   00015E   78..         MOV     R0,#?V0 + 4
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000163   AC..         MOV     R4,?V0 + 12
   \   000165   AD..         MOV     R5,?V0 + 13
   \   000167   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00016A   2411         ADD     A,#0x11
   \   00016C   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00016F   12....       LCALL   ?DEALLOC_XSTACK8
    273          	edpPacket->_len += authkey_len;
   \   000172   E4           CLR     A
   \   000173   F5..         MOV     ?V0 + 6,A
   \   000175   F5..         MOV     ?V0 + 7,A
   \   000177   85..82       MOV     DPL,?V0 + 0
   \   00017A   85..83       MOV     DPH,?V0 + 1
   \   00017D   78..         MOV     R0,#?V0 + 4
   \   00017F   12....       LCALL   ?L_ADD_TO_X
    274          	
    275          	return 0;
   \   000182   7900         MOV     R1,#0x0
   \                     ??EDP_PacketConnect2_1:
   \   000184   02....       LJMP    ?Subroutine2 & 0xFFFF
    276          
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   22           RET
    278          
    279          //==========================================================
    280          //	º¯ÊýÃû³Æ£º	EDP_UnPacketConnectRsp
    281          //
    282          //	º¯Êý¹¦ÄÜ£º	Á¬½Ó»Ø¸´½â°ü
    283          //
    284          //	Èë¿Ú²ÎÊý£º	rev_data£º½ÓÊÕµ½µÄÊý¾Ý
    285          //
    286          //	·µ»Ø²ÎÊý£º	µÇÂ¼½á¹û
    287          //
    288          //	ËµÃ÷£º		
    289          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    290          uint8 EDP_UnPacketConnectRsp(uint8 *rev_data)
   \                     EDP_UnPacketConnectRsp:
    291          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    292          
    293          	//0		Á¬½Ó³É¹¦
    294          	//1		ÑéÖ¤Ê§°Ü£ºÐ­Òé´íÎó
    295          	//2		ÑéÖ¤Ê§°Ü£ºÉè±¸ID¼øÈ¨Ê§°Ü
    296          	//3		ÑéÖ¤Ê§°Ü£º·þÎñÆ÷Ê§°Ü
    297          	//4		ÑéÖ¤Ê§°Ü£ºÓÃ»§ID¼øÈ¨Ê§°Ü
    298          	//5		ÑéÖ¤Ê§°Ü£ºÎ´ÊÚÈ¨
    299          	//6		ÑéÖ¤Ê§°Ü£ºÊÚÈ¨ÂëÎÞÐ§
    300          	//7		ÑéÖ¤Ê§°Ü£º¼¤»îÂëÎ´·ÖÅä
    301          	//8		ÑéÖ¤Ê§°Ü£º¸ÃÉè±¸ÒÑ±»¼¤»î
    302          	//9		ÑéÖ¤Ê§°Ü£ºÖØ¸´·¢ËÍÁ¬½ÓÇëÇó°ü
    303          	return rev_data[3];
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   02....       LJMP    ?Subroutine1 & 0xFFFF
    304          
    305          }
    306          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          int32 WriteRemainlen(uint8 *buf, uint32 len_val, uint16 write_pos)
   \                     WriteRemainlen:
    308          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 8,R2
   \   000007   8B..         MOV     ?V0 + 9,R3
   \   000009   7412         MOV     A,#0x12
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   12....       LCALL   ?L_MOV_X
    309          	
    310          	int32 remaining_count = 0;
   \   000013   90....       MOV     DPTR,#__Constant_0
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
    311          	uint8 byte = 0;
    312          
    313          	do
    314          	{
    315          		byte = len_val % 128;
   \                     ??WriteRemainlen_0:
   \   00001B   E5..         MOV     A,?V0 + 0
   \   00001D   547F         ANL     A,#0x7f
   \   00001F   FE           MOV     R6,A
    316          		len_val = len_val >> 7;
   \   000020   7407         MOV     A,#0x7
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?UL_SHR
    317          		/* If there are more digits to encode, set the top bit of this digit */
    318          		if (len_val > 0)
   \   000027   A9..         MOV     R1,?V0 + 1
   \   000029   AA..         MOV     R2,?V0 + 2
   \   00002B   AB..         MOV     R3,?V0 + 3
   \   00002D   E5..         MOV     A,?V0 + 0
   \   00002F   49           ORL     A,R1
   \   000030   4A           ORL     A,R2
   \   000031   4B           ORL     A,R3
   \   000032   6004         JZ      ??WriteRemainlen_1
    319          		{
    320          			byte = byte | 0x80;
   \   000034   EE           MOV     A,R6
   \   000035   D2E7         SETB    0xE0 /* A   */.7
   \   000037   FE           MOV     R6,A
    321          		}
    322          		buf[write_pos++] = byte;
   \                     ??WriteRemainlen_1:
   \   000038   E5..         MOV     A,?V0 + 8
   \   00003A   2C           ADD     A,R4
   \   00003B   F582         MOV     DPL,A
   \   00003D   E5..         MOV     A,?V0 + 9
   \   00003F   3D           ADDC    A,R5
   \   000040   F583         MOV     DPH,A
   \   000042   EE           MOV     A,R6
   \   000043   F0           MOVX    @DPTR,A
   \   000044   EC           MOV     A,R4
   \   000045   2401         ADD     A,#0x1
   \   000047   0C           INC     R4
   \   000048   ED           MOV     A,R5
   \   000049   3400         ADDC    A,#0x0
   \   00004B   FD           MOV     R5,A
    323          		remaining_count++;
   \   00004C   90....       MOV     DPTR,#__Constant_1
   \   00004F   78..         MOV     R0,#?V0 + 4
   \   000051   12....       LCALL   ?L_ADD_X
    324          	} while(len_val > 0 && remaining_count < 5);
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   45..         ORL     A,?V0 + 1
   \   000058   45..         ORL     A,?V0 + 2
   \   00005A   45..         ORL     A,?V0 + 3
   \   00005C   600A         JZ      ??WriteRemainlen_2
   \   00005E   90....       MOV     DPTR,#__Constant_5
   \   000061   78..         MOV     R0,#?V0 + 4
   \   000063   12....       LCALL   ?SL_GE_X
   \   000066   50B3         JNC     ??WriteRemainlen_0
    325          
    326          	return --write_pos;
   \                     ??WriteRemainlen_2:
   \   000068   EC           MOV     A,R4
   \   000069   24FF         ADD     A,#-0x1
   \   00006B   F5..         MOV     ?V0 + 0,A
   \   00006D   ED           MOV     A,R5
   \   00006E   34FF         ADDC    A,#-0x1
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   FB           MOV     R3,A
   \   000073   E4           CLR     A
   \   000074   FC           MOV     R4,A
   \   000075   FD           MOV     R5,A
   \   000076   7F0A         MOV     R7,#0xa
   \   000078   02....       LJMP    ?BANKED_LEAVE_XDATA
    327          }
    328          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    329          int32 ReadRemainlen(int8 *buf, uint32 *len_val, uint16 read_pos)
   \                     ReadRemainlen:
    330          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 10,R2
   \   000007   8B..         MOV     ?V0 + 11,R3
   \   000009   8C..         MOV     ?V0 + 8,R4
   \   00000B   8D..         MOV     ?V0 + 9,R5
   \   00000D   7414         MOV     A,#0x14
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
    331          	
    332              uint32 multiplier = 1;
   \   000017   90....       MOV     DPTR,#__Constant_1
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
    333              uint32 len_len = 0;
    334              uint8 onebyte = 0;
    335          	
    336              *len_val = 0;
   \   00001F   90....       MOV     DPTR,#__Constant_0
   \   000022   12....       LCALL   ?XLOAD_R2345
   \   000025   85..82       MOV     DPL,?V0 + 8
   \   000028   85..83       MOV     DPH,?V0 + 9
   \   00002B   12....       LCALL   ?XSTORE_R2345
   \   00002E   7B05         MOV     R3,#0x5
    337          	
    338              do
    339          	{
    340                  onebyte = buf[read_pos++];
   \                     ??ReadRemainlen_0:
   \   000030   E5..         MOV     A,?V0 + 10
   \   000032   2E           ADD     A,R6
   \   000033   F582         MOV     DPL,A
   \   000035   E5..         MOV     A,?V0 + 11
   \   000037   3F           ADDC    A,R7
   \   000038   F583         MOV     DPH,A
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FA           MOV     R2,A
   \   00003C   12....       LCALL   ?Subroutine43 & 0xFFFF
    341          
    342                  *len_val += (onebyte & 0x7f) * multiplier;
   \                     ??CrossCallReturnLabel_71:
   \   00003F   EA           MOV     A,R2
   \   000040   547F         ANL     A,#0x7f
   \   000042   F5..         MOV     ?V0 + 4,A
   \   000044   E4           CLR     A
   \   000045   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000048   79..         MOV     R1,#?V0 + 0
   \   00004A   12....       LCALL   ?L_MUL
   \   00004D   85..82       MOV     DPL,?V0 + 8
   \   000050   85..83       MOV     DPH,?V0 + 9
   \   000053   78..         MOV     R0,#?V0 + 4
   \   000055   12....       LCALL   ?L_ADD_TO_X
    343                  multiplier <<= 7;
   \   000058   7407         MOV     A,#0x7
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?L_SHL
    344          
    345                  len_len++;
    346                  if (len_len > 4)
   \   00005F   1B           DEC     R3
   \   000060   EB           MOV     A,R3
   \   000061   700A         JNZ     ??ReadRemainlen_1
    347          		{
    348                      return -1;/*len of len more than 4;*/
   \   000063   7AFF         MOV     R2,#-0x1
   \   000065   7BFF         MOV     R3,#-0x1
   \   000067   7CFF         MOV     R4,#-0x1
   \   000069   7DFF         MOV     R5,#-0x1
   \   00006B   8010         SJMP    ??ReadRemainlen_2
    349                  }
    350              } while((onebyte & 0x80) != 0);
   \                     ??ReadRemainlen_1:
   \   00006D   EA           MOV     A,R2
   \   00006E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000070   40BE         JC      ??ReadRemainlen_0
    351          	
    352              return read_pos;
   \   000072   8E..         MOV     ?V0 + 0,R6
   \   000074   8F..         MOV     ?V0 + 1,R7
   \   000076   AA..         MOV     R2,?V0 + 0
   \   000078   AB..         MOV     R3,?V0 + 1
   \   00007A   E4           CLR     A
   \   00007B   FC           MOV     R4,A
   \   00007C   FD           MOV     R5,A
   \                     ??ReadRemainlen_2:
   \   00007D   02....       LJMP    ?Subroutine0 & 0xFFFF
    353          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F5..         MOV     ?V0 + 5,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 6,A
   \   000007   F5..         MOV     ?V0 + 7,A
   \   000009   78..         MOV     R0,#?V0 + 4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   EE           MOV     A,R6
   \   000001   2401         ADD     A,#0x1
   \   000003   0E           INC     R6
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   22           RET
    354          
    355          //==========================================================
    356          //	º¯ÊýÃû³Æ£º	EDP_PacketSaveJson
    357          //
    358          //	º¯Êý¹¦ÄÜ£º	·â×°Ð­ÒéÍ·
    359          //
    360          //	Èë¿Ú²ÎÊý£º	devid£ºÉè±¸ID(¿ÉÎª¿Õ)
    361          //				send_buf£ºjson»º´æbuf
    362          //				send_len£ºjson×Ü³¤
    363          //				type_bin_head£ºbinÎÄ¼þµÄÏûÏ¢Í·
    364          //				type£ºÀàÐÍ
    365          //				edpPacket£º°üÖ¸Õë
    366          //
    367          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    368          //
    369          //	ËµÃ÷£º		µ±²»ÎªType2µÄÊ±ºò£¬type_bin_head¿ÉÎªNULL
    370          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   E4           CLR     A
   \   000004                REQUIRE ??Subroutine65_0
   \   000004                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          uint8 EDP_PacketSaveData(const int8 *devid, int16 send_len, int8 *type_bin_head, SaveDataType type, EDP_PACKET_STRUCTURE *edpPacket)
   \                     EDP_PacketSaveData:
    372          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 10,R2
   \   000007   8B..         MOV     ?V0 + 11,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   89..         MOV     ?V0 + 9,R1
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 12,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 13,A
   \   00001B   7418         MOV     A,#0x18
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 3,A
    373          
    374          	int16 remain_len = 0;
    375          	uint8 devid_len = strlen(devid);
                 	                  ^
Warning[Pe223]: function "strlen" declared implicitly
   \   000027                ; Setup parameters for call to function strlen
   \   000027   12....       LCALL   ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00002A   F5..         MOV     ?V0 + 8,A
    376          	
    377          	if(type == 2 && type_bin_head == NULL)
   \   00002C   7402         MOV     A,#0x2
   \   00002E   65..         XRL     A,?V0 + 9
   \   000030   700B         JNZ     ??EDP_PacketSaveData_0
   \   000032   E5..         MOV     A,?V0 + 12
   \   000034   45..         ORL     A,?V0 + 13
   \   000036   7011         JNZ     ??EDP_PacketSaveData_1
    378          		return 1;
   \   000038   7901         MOV     R1,#0x1
   \   00003A   02....       LJMP    ??EDP_PacketSaveData_2 & 0xFFFF
    379          	
    380          	if(type == 2)
    381          		EDP_NewBuffer(edpPacket, strlen(type_bin_head));
    382          	else
    383          		EDP_NewBuffer(edpPacket, send_len + 24);
   \                     ??EDP_PacketSaveData_0:
   \   00003D                ; Setup parameters for call to function EDP_NewBuffer
   \   00003D   E5..         MOV     A,?V0 + 0
   \   00003F   2418         ADD     A,#0x18
   \   000041   F5..         MOV     ?V0 + 4,A
   \   000043   E5..         MOV     A,?V0 + 1
   \   000045   3400         ADDC    A,#0x0
   \   000047   800A         SJMP    ??EDP_PacketSaveData_3
   \                     ??EDP_PacketSaveData_1:
   \   000049                ; Setup parameters for call to function EDP_NewBuffer
   \   000049                ; Setup parameters for call to function strlen
   \   000049   AA..         MOV     R2,?V0 + 12
   \   00004B   AB..         MOV     R3,?V0 + 13
   \   00004D   12....       LCALL   ??strlen?relay
   \   000050   8A..         MOV     ?V0 + 4,R2
   \   000052   EB           MOV     A,R3
   \                     ??EDP_PacketSaveData_3:
   \   000053   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000059   AA..         MOV     R2,?V0 + 2
   \   00005B   AB..         MOV     R3,?V0 + 3
   \   00005D   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
    384          	if(edpPacket->_data == NULL)
   \   000063   85..82       MOV     DPL,?V0 + 2
   \   000066   85..83       MOV     DPH,?V0 + 3
   \   000069   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00006C   7005         JNZ     ??EDP_PacketSaveData_4
    385          		return 2;
   \   00006E   7902         MOV     R1,#0x2
   \   000070   02....       LJMP    ??EDP_PacketSaveData_2 & 0xFFFF
    386          
    387          	//Byte0£ºÏûÏ¢ÀàÐÍ--------------------------------------------------------------
    388          	edpPacket->_data[edpPacket->_len++] = SAVEDATA;
   \                     ??EDP_PacketSaveData_4:
   \   000073   E5..         MOV     A,?V0 + 2
   \   000075   2402         ADD     A,#0x2
   \   000077   FE           MOV     R6,A
   \   000078   E5..         MOV     A,?V0 + 3
   \   00007A   3400         ADDC    A,#0x0
   \   00007C   FF           MOV     R7,A
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   78..         MOV     R0,#?V0 + 4
   \   000083   12....       LCALL   ?L_MOV_X
   \   000086   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000089   7480         MOV     A,#-0x80
   \   00008B   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00008E   12....       LCALL   ?L_MOV_X
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   78..         MOV     R0,#?V0 + 4
   \   000097   12....       LCALL   ?L_ADD_TO_X
    389          	
    390          	if(devid)
   \   00009A   E5..         MOV     A,?V0 + 10
   \   00009C   45..         ORL     A,?V0 + 11
   \   00009E   7003         JNZ     $+5
   \   0000A0   02....       LJMP    ??EDP_PacketSaveData_5 & 0xFFFF
    391          	{
    392          		if(type == 2)
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   65..         XRL     A,?V0 + 9
   \   0000A7   7007         JNZ     ??EDP_PacketSaveData_6
    393          			remain_len = 12 + strlen(type_bin_head) + send_len;
   \   0000A9                ; Setup parameters for call to function strlen
   \   0000A9   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000AC   240C         ADD     A,#0xc
   \   0000AE   8010         SJMP    ??EDP_PacketSaveData_7
    394          		else
    395          			remain_len = 8 + send_len + devid_len;
   \                     ??EDP_PacketSaveData_6:
   \   0000B0   85....       MOV     ?V0 + 4,?V0 + 8
   \   0000B3   E5..         MOV     A,?V0 + 0
   \   0000B5   25..         ADD     A,?V0 + 4
   \   0000B7   F8           MOV     R0,A
   \   0000B8   E5..         MOV     A,?V0 + 1
   \   0000BA   3400         ADDC    A,#0x0
   \   0000BC   F9           MOV     R1,A
   \   0000BD   E8           MOV     A,R0
   \   0000BE   2408         ADD     A,#0x8
   \                     ??EDP_PacketSaveData_7:
   \   0000C0   F8           MOV     R0,A
   \   0000C1   E9           MOV     A,R1
   \   0000C2   12....       LCALL   ?Subroutine38 & 0xFFFF
    396          		
    397          		//Ê£ÓàÏûÏ¢³¤¶È-------------------------------------------------------------
    398          		edpPacket->_len += WriteRemainlen(edpPacket->_data, remain_len, edpPacket->_len);
   \                     ??CrossCallReturnLabel_61:
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   78..         MOV     R0,#?V0 + 4
   \   0000CE   12....       LCALL   ?L_MOV_X
   \   0000D1   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   8A..         MOV     ?V0 + 4,R2
   \   0000D9   8B..         MOV     ?V0 + 5,R3
   \   0000DB   8C..         MOV     ?V0 + 6,R4
   \   0000DD   8D..         MOV     ?V0 + 7,R5
   \   0000DF   8E82         MOV     DPL,R6
   \   0000E1   8F83         MOV     DPH,R7
   \   0000E3   78..         MOV     R0,#?V0 + 4
   \   0000E5   12....       LCALL   ?L_ADD_TO_X
    399          		
    400          		//±êÖ¾--bit7:1-ÓÐdevid£¬0-ÎÞdevid		bit6:1-ÓÐÏûÏ¢±àºÅ£¬0-ÎÞÏûÏ¢±àºÅ----
    401          		edpPacket->_data[edpPacket->_len++] = 0xC0;
   \   0000E8   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000EB   12....       LCALL   ?L_MOV_X
   \   0000EE   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000F1   74C0         MOV     A,#-0x40
   \   0000F3   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   0000F6   12....       LCALL   ?L_MOV_X
   \   0000F9   8E82         MOV     DPL,R6
   \   0000FB   8F83         MOV     DPH,R7
   \   0000FD   78..         MOV     R0,#?V0 + 4
   \   0000FF   12....       LCALL   ?L_ADD_TO_X
    402          		
    403          		//DEVID³¤¶È---------------------------------------------------------------
    404          		edpPacket->_data[edpPacket->_len++] = 0;
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   78..         MOV     R0,#?V0 + 4
   \   000108   12....       LCALL   ?L_MOV_X
   \   00010B   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00010E   12....       LCALL   ?L_MOV_X
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   78..         MOV     R0,#?V0 + 4
   \   000117   12....       LCALL   ?L_ADD_TO_X
    405          		edpPacket->_data[edpPacket->_len++] = devid_len;
   \   00011A   8E82         MOV     DPL,R6
   \   00011C   8F83         MOV     DPH,R7
   \   00011E   78..         MOV     R0,#?V0 + 4
   \   000120   12....       LCALL   ?L_MOV_X
   \   000123   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000126   E5..         MOV     A,?V0 + 8
   \   000128   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00012B   12....       LCALL   ?L_MOV_X
   \   00012E   8E82         MOV     DPL,R6
   \   000130   8F83         MOV     DPH,R7
   \   000132   78..         MOV     R0,#?V0 + 4
   \   000134   12....       LCALL   ?L_ADD_TO_X
    406          		
    407          		//DEVID------------------------------------------------------------------
    408          		strncat((int8 *)edpPacket->_data + edpPacket->_len, devid, devid_len);
                 		^
Warning[Pe223]: function "strncat" declared implicitly
   \   000137                ; Setup parameters for call to function strncat
   \   000137   85....       MOV     ?V0 + 4,?V0 + 8
   \   00013A   75..00       MOV     ?V0 + 5,#0x0
   \   00013D   78..         MOV     R0,#?V0 + 4
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   AC..         MOV     R4,?V0 + 10
   \   000144   AD..         MOV     R5,?V0 + 11
   \   000146   8E82         MOV     DPL,R6
   \   000148   8F83         MOV     DPH,R7
   \   00014A   78..         MOV     R0,#?V0 + 4
   \   00014C   12....       LCALL   ?L_MOV_X
   \   00014F   EA           MOV     A,R2
   \   000150   25..         ADD     A,?V0 + 4
   \   000152   FA           MOV     R2,A
   \   000153   EB           MOV     A,R3
   \   000154   35..         ADDC    A,?V0 + 5
   \   000156   FB           MOV     R3,A
   \   000157   12....       LCALL   ??strncat?relay
   \   00015A   7402         MOV     A,#0x2
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
    409          		edpPacket->_len += devid_len;
   \   00015F   85....       MOV     ?V0 + 4,?V0 + 8
   \   000162   E4           CLR     A
   \   000163   F5..         MOV     ?V0 + 5,A
   \   000165   F5..         MOV     ?V0 + 6,A
   \   000167   F5..         MOV     ?V0 + 7,A
   \   000169   8E82         MOV     DPL,R6
   \   00016B   8F83         MOV     DPH,R7
   \   00016D   78..         MOV     R0,#?V0 + 4
   \   00016F   12....       LCALL   ?L_ADD_TO_X
    410          		
    411          		//ÏûÏ¢±àºÅ----------------------------------------------------------------
    412          		edpPacket->_data[edpPacket->_len++] = MSG_ID_HIGH;
   \   000172   85..82       MOV     DPL,?V0 + 2
   \   000175   85..83       MOV     DPH,?V0 + 3
   \   000178   12....       LCALL   ??Subroutine76_0 & 0xFFFF
    413          		edpPacket->_data[edpPacket->_len++] = MSG_ID_LOW;
    414          	}
   \                     ??CrossCallReturnLabel_195:
   \   00017B   8056         SJMP    ??EDP_PacketSaveData_8
    415          	else
    416          	{
    417          		if(type == 2)
   \                     ??EDP_PacketSaveData_5:
   \   00017D   7402         MOV     A,#0x2
   \   00017F   65..         XRL     A,?V0 + 9
   \   000181   7009         JNZ     ??EDP_PacketSaveData_9
    418          			remain_len = 10 + strlen(type_bin_head) + send_len;
   \   000183                ; Setup parameters for call to function strlen
   \   000183   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000186   240A         ADD     A,#0xa
   \   000188   F8           MOV     R0,A
   \   000189   E9           MOV     A,R1
   \   00018A   8007         SJMP    ??EDP_PacketSaveData_10
    419          		else
    420          			remain_len = 6 + send_len;
   \                     ??EDP_PacketSaveData_9:
   \   00018C   E5..         MOV     A,?V0 + 0
   \   00018E   2406         ADD     A,#0x6
   \   000190   F8           MOV     R0,A
   \   000191   E5..         MOV     A,?V0 + 1
   \                     ??EDP_PacketSaveData_10:
   \   000193   12....       LCALL   ?Subroutine38 & 0xFFFF
    421          		 
    422          		//Ê£ÓàÏûÏ¢³¤¶È------------------------------------------------------------
    423          		edpPacket->_len += WriteRemainlen(edpPacket->_data, remain_len, edpPacket->_len);
   \                     ??CrossCallReturnLabel_62:
   \   000196   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000199   8E82         MOV     DPL,R6
   \   00019B   8F83         MOV     DPH,R7
   \   00019D   78..         MOV     R0,#?V0 + 4
   \   00019F   12....       LCALL   ?L_MOV_X
   \   0001A2   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A8   8A..         MOV     ?V0 + 4,R2
   \   0001AA   8B..         MOV     ?V0 + 5,R3
   \   0001AC   8C..         MOV     ?V0 + 6,R4
   \   0001AE   8D..         MOV     ?V0 + 7,R5
   \   0001B0   8E82         MOV     DPL,R6
   \   0001B2   8F83         MOV     DPH,R7
   \   0001B4   78..         MOV     R0,#?V0 + 4
   \   0001B6   12....       LCALL   ?L_ADD_TO_X
    424          		
    425          		//±êÖ¾--bit7:1-ÓÐdevid£¬0-ÎÞdevid		bit6:1-ÓÐÏûÏ¢±àºÅ£¬0-ÎÞÏûÏ¢±àºÅ----
    426          		edpPacket->_data[edpPacket->_len++] = 0x40;
   \   0001B9   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001BC   12....       LCALL   ?L_MOV_X
   \   0001BF   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0001C2   7440         MOV     A,#0x40
   \   0001C4   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0001C7   12....       LCALL   ?L_MOV_X
   \   0001CA   8E82         MOV     DPL,R6
   \   0001CC   8F83         MOV     DPH,R7
   \   0001CE   78..         MOV     R0,#?V0 + 4
   \   0001D0   12....       LCALL   ?L_ADD_TO_X
    427          		
    428          		//ÏûÏ¢±àºÅ----------------------------------------------------------------
    429          		edpPacket->_data[edpPacket->_len++] = MSG_ID_HIGH;
   \                     ??EDP_PacketSaveData_8:
   \   0001D3   8E82         MOV     DPL,R6
   \   0001D5   8F83         MOV     DPH,R7
   \   0001D7   78..         MOV     R0,#?V0 + 4
   \   0001D9   12....       LCALL   ?L_MOV_X
   \   0001DC   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0001DF   7455         MOV     A,#0x55
   \   0001E1   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0001E4   12....       LCALL   ?L_MOV_X
   \   0001E7   8E82         MOV     DPL,R6
   \   0001E9   8F83         MOV     DPH,R7
   \   0001EB   78..         MOV     R0,#?V0 + 4
   \   0001ED   12....       LCALL   ?L_ADD_TO_X
    430          		edpPacket->_data[edpPacket->_len++] = MSG_ID_LOW;
   \   0001F0   8E82         MOV     DPL,R6
   \   0001F2   8F83         MOV     DPH,R7
   \   0001F4   78..         MOV     R0,#?V0 + 4
   \   0001F6   12....       LCALL   ?L_MOV_X
   \   0001F9   12....       LCALL   ?Subroutine45 & 0xFFFF
    431          	}
   \                     ??CrossCallReturnLabel_80:
   \   0001FC   74AA         MOV     A,#-0x56
   \   0001FE   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000201   12....       LCALL   ?L_MOV_X
   \   000204   8E82         MOV     DPL,R6
   \   000206   8F83         MOV     DPH,R7
   \   000208   78..         MOV     R0,#?V0 + 4
   \   00020A   12....       LCALL   ?L_ADD_TO_X
    432          	
    433          	edpPacket->_data[edpPacket->_len++] = type;
   \   00020D   8E82         MOV     DPL,R6
   \   00020F   8F83         MOV     DPH,R7
   \   000211   78..         MOV     R0,#?V0 + 4
   \   000213   12....       LCALL   ?L_MOV_X
   \   000216   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000219   E5..         MOV     A,?V0 + 9
   \   00021B   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00021E   12....       LCALL   ?L_MOV_X
   \   000221   8E82         MOV     DPL,R6
   \   000223   8F83         MOV     DPH,R7
   \   000225   78..         MOV     R0,#?V0 + 4
   \   000227   12....       LCALL   ?L_ADD_TO_X
    434          	
    435          	if(type == 2)
   \   00022A   7402         MOV     A,#0x2
   \   00022C   65..         XRL     A,?V0 + 9
   \   00022E   6003         JZ      $+5
   \   000230   02....       LJMP    ??EDP_PacketSaveData_11 & 0xFFFF
    436          	{
    437          		uint8 type_bin_head_len = strlen(type_bin_head);
   \   000233                ; Setup parameters for call to function strlen
   \   000233   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000236   FC           MOV     R4,A
    438          		uint8 i = 0;
   \   000237   7900         MOV     R1,#0x0
    439          		
    440          		//ÏûÏ¢Í·³¤¶È---------------------------------------------------------------
    441          		edpPacket->_data[edpPacket->_len++] = MOSQ_MSB(type_bin_head_len);
   \   000239   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00023C   12....       LCALL   ?L_MOV_X
   \   00023F   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000242   12....       LCALL   ?L_MOV_X
   \   000245   8E82         MOV     DPL,R6
   \   000247   8F83         MOV     DPH,R7
   \   000249   78..         MOV     R0,#?V0 + 4
   \   00024B   12....       LCALL   ?L_ADD_TO_X
    442          		edpPacket->_data[edpPacket->_len++] = MOSQ_LSB(type_bin_head_len);
   \   00024E   8E82         MOV     DPL,R6
   \   000250   8F83         MOV     DPH,R7
   \   000252   78..         MOV     R0,#?V0 + 4
   \   000254   12....       LCALL   ?L_MOV_X
   \   000257   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00025A   EC           MOV     A,R4
   \   00025B   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00025E   12....       LCALL   ?L_MOV_X
   \   000261   8E82         MOV     DPL,R6
   \   000263   8F83         MOV     DPH,R7
   \   000265   78..         MOV     R0,#?V0 + 4
   \   000267   12....       LCALL   ?L_ADD_TO_X
   \   00026A   802F         SJMP    ??EDP_PacketSaveData_12
    443          		
    444          		//ÏûÏ¢Í·-------------------------------------------------------------------
    445          		for(; i < type_bin_head_len; i++)
    446          			edpPacket->_data[edpPacket->_len++] = type_bin_head[i];
   \                     ??EDP_PacketSaveData_13:
   \   00026C   89..         MOV     ?V0 + 4,R1
   \   00026E   E5..         MOV     A,?V0 + 12
   \   000270   25..         ADD     A,?V0 + 4
   \   000272   F582         MOV     DPL,A
   \   000274   E5..         MOV     A,?V0 + 13
   \   000276   3400         ADDC    A,#0x0
   \   000278   F583         MOV     DPH,A
   \   00027A   E0           MOVX    A,@DPTR
   \   00027B   C0E0         PUSH    A
   \   00027D   8E82         MOV     DPL,R6
   \   00027F   8F83         MOV     DPH,R7
   \   000281   78..         MOV     R0,#?V0 + 4
   \   000283   12....       LCALL   ?L_MOV_X
   \   000286   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000289   D0E0         POP     A
   \   00028B   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00028E   12....       LCALL   ?L_MOV_X
   \   000291   8E82         MOV     DPL,R6
   \   000293   8F83         MOV     DPH,R7
   \   000295   78..         MOV     R0,#?V0 + 4
   \   000297   12....       LCALL   ?L_ADD_TO_X
   \   00029A   09           INC     R1
   \                     ??EDP_PacketSaveData_12:
   \   00029B   E9           MOV     A,R1
   \   00029C   C3           CLR     C
   \   00029D   9C           SUBB    A,R4
   \   00029E   40CC         JC      ??EDP_PacketSaveData_13
   \   0002A0   85....       MOV     ?V0 + 4,?V0 + 0
   \   0002A3   85....       MOV     ?V0 + 5,?V0 + 1
   \   0002A6   740F         MOV     A,#0xf
   \   0002A8   78..         MOV     R0,#?V0 + 4
   \   0002AA   12....       LCALL   ?SS_SHR
   \   0002AD   A9..         MOV     R1,?V0 + 4
   \   0002AF   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0002B2   12....       LCALL   ?L_MOV_X
   \   0002B5   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0002B8   E9           MOV     A,R1
   \   0002B9   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0002BC   12....       LCALL   ?L_MOV_X
   \   0002BF   8E82         MOV     DPL,R6
   \   0002C1   8F83         MOV     DPH,R7
   \   0002C3   78..         MOV     R0,#?V0 + 4
   \   0002C5   12....       LCALL   ?L_ADD_TO_X
    447          		
    448          		//Í¼Æ¬³¤¶È-----------------------------------------------------------------
    449          		edpPacket->_data[edpPacket->_len++] = (uint8)(send_len >> 24);
                 		                                                          ^
Warning[Pe063]: shift count is too large
    450          		edpPacket->_data[edpPacket->_len++] = (uint8)(send_len >> 16);
                 		                                                          ^
Warning[Pe063]: shift count is too large
   \   0002C8   8E82         MOV     DPL,R6
   \   0002CA   8F83         MOV     DPH,R7
   \   0002CC   78..         MOV     R0,#?V0 + 4
   \   0002CE   12....       LCALL   ?L_MOV_X
   \   0002D1   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0002D4   E9           MOV     A,R1
   \   0002D5   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0002D8   12....       LCALL   ?L_MOV_X
   \   0002DB   8E82         MOV     DPL,R6
   \   0002DD   8F83         MOV     DPH,R7
   \   0002DF   78..         MOV     R0,#?V0 + 4
   \   0002E1   12....       LCALL   ?L_ADD_TO_X
    451          		edpPacket->_data[edpPacket->_len++] = (uint8)(send_len >> 8);
   \   0002E4   85....       MOV     ?V0 + 2,?V0 + 0
   \   0002E7   85....       MOV     ?V0 + 3,?V0 + 1
   \   0002EA   7408         MOV     A,#0x8
   \   0002EC   78..         MOV     R0,#?V0 + 2
   \   0002EE   12....       LCALL   ?SS_SHR
   \   0002F1   8E82         MOV     DPL,R6
   \   0002F3   8F83         MOV     DPH,R7
   \   0002F5   78..         MOV     R0,#?V0 + 4
   \   0002F7   12....       LCALL   ?L_MOV_X
   \   0002FA   12....       LCALL   ?Subroutine45 & 0xFFFF
    452          		edpPacket->_data[edpPacket->_len++] = (uint8)send_len;
    453          	}
   \                     ??CrossCallReturnLabel_84:
   \   0002FD   E5..         MOV     A,?V0 + 2
   \   0002FF   800B         SJMP    ??EDP_PacketSaveData_14
    454          	else
    455          	{
    456          		//json³¤¶È-----------------------------------------------------------------
    457          		edpPacket->_data[edpPacket->_len++] = MOSQ_MSB(send_len);
   \                     ??EDP_PacketSaveData_11:
   \   000301   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000304   12....       LCALL   ?L_MOV_X
   \   000307   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00030A   E5..         MOV     A,?V0 + 1
   \                     ??EDP_PacketSaveData_14:
   \   00030C   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   00030F   12....       LCALL   ?L_MOV_X
   \   000312   8E82         MOV     DPL,R6
   \   000314   8F83         MOV     DPH,R7
   \   000316   78..         MOV     R0,#?V0 + 4
   \   000318   12....       LCALL   ?L_ADD_TO_X
    458          		edpPacket->_data[edpPacket->_len++] = MOSQ_LSB(send_len);
   \   00031B   C0..         PUSH    ?V0 + 0
   \   00031D   8E82         MOV     DPL,R6
   \   00031F   8F83         MOV     DPH,R7
   \   000321   78..         MOV     R0,#?V0 + 0
   \   000323   12....       LCALL   ?L_MOV_X
   \   000326   12....       LCALL   ?Subroutine37 & 0xFFFF
    459          	}
   \                     ??CrossCallReturnLabel_52:
   \   000329   D0E0         POP     A
   \   00032B   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00032E   12....       LCALL   ?L_MOV_X
   \   000331   8E82         MOV     DPL,R6
   \   000333   8F83         MOV     DPH,R7
   \   000335   78..         MOV     R0,#?V0 + 0
   \   000337   12....       LCALL   ?L_ADD_TO_X
    460          	
    461          	return 0;
   \   00033A   7900         MOV     R1,#0x0
   \                     ??EDP_PacketSaveData_2:
   \   00033C   02....       LJMP    ?Subroutine2 & 0xFFFF
    462          
    463          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   EA           MOV     A,R2
   \   000001   25..         ADD     A,?V0 + 4
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   35..         ADDC    A,?V0 + 5
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   25..         ADD     A,?V0 + 0
   \   000005   F8           MOV     R0,A
   \   000006   EB           MOV     A,R3
   \   000007   35..         ADDC    A,?V0 + 1
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   E5..         MOV     A,?V0 + 2
   \   000005   2402         ADD     A,#0x2
   \   000007   E5..         MOV     A,?V0 + 3
   \   000009   3400         ADDC    A,#0x0
   \   00000B                ; Setup parameters for call to function WriteRemainlen
   \   00000B                ; Setup parameters for call to function WriteRemainlen
   \   00000B   88..         MOV     ?V0 + 4,R0
   \   00000D   E9           MOV     A,R1
   \   00000E   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   AC..         MOV     R4,?V0 + 4
   \   000002   AD..         MOV     R5,?V0 + 5
   \   000004   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000007   12....       LCALL   ??WriteRemainlen?relay
   \   00000A   7404         MOV     A,#0x4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   25..         ADD     A,?V0 + 4
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   35..         ADDC    A,?V0 + 5
   \   00000E   8882         MOV     DPL,R0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   78..         MOV     R0,#?V0 + 4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EA           MOV     A,R2
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   35..         ADDC    A,?V0 + 1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine72_0
   \   000006                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#__Constant_1
   \   000004   78..         MOV     R0,#?V0 + 0
   \   000006   22           RET
    464          
    465          //==========================================================
    466          //	º¯ÊýÃû³Æ£º	EDP_PacketPushData
    467          //
    468          //	º¯Êý¹¦ÄÜ£º	PushData¹¦ÄÜ×é°ü
    469          //
    470          //	Èë¿Ú²ÎÊý£º	devid£ºÉè±¸ID
    471          //				msg£ºÍÆËÍÊý¾Ý
    472          //				msg_len£ºÍÆËÍµÄÊý¾Ý³¤¶È
    473          //				edpPacket£º°üÖ¸Õë
    474          //
    475          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    476          //
    477          //	ËµÃ÷£º		
    478          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          uint8 EDP_PacketPushData(const int8 *devid, const int8 *msg, uint32 msg_len, EDP_PACKET_STRUCTURE *edpPacket)
   \                     EDP_PacketPushData:
    480          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000012   7403         MOV     A,#0x3
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EC           MOV     A,R4
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   ED           MOV     A,R5
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   741D         MOV     A,#0x1d
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   78..         MOV     R0,#?V0 + 4
   \   000023   12....       LCALL   ?L_MOV_X
   \   000026   7421         MOV     A,#0x21
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?Subroutine24 & 0xFFFF
    481          	
    482          	uint32 remain_len = 2 + strlen(devid) + msg_len;
                 	                        ^
Warning[Pe223]: function "strlen" declared implicitly
   \                     ??CrossCallReturnLabel_35:
   \   00002E                ; Setup parameters for call to function strlen
   \   00002E   7401         MOV     A,#0x1
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000036   2402         ADD     A,#0x2
   \   000038   F5..         MOV     ?V0 + 0,A
   \   00003A   EB           MOV     A,R3
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   F5..         MOV     ?V0 + 1,A
   \   00003F   33           RLC     A
   \   000040   95E0         SUBB    A,0xE0 /* A   */
   \   000042   F5..         MOV     ?V0 + 2,A
   \   000044   F5..         MOV     ?V0 + 3,A
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   79..         MOV     R1,#?V0 + 4
   \   00004A   12....       LCALL   ?L_ADD
    483          	uint8 devid_len = strlen(devid);
   \   00004D                ; Setup parameters for call to function strlen
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000055   85..82       MOV     DPL,?XSP + 0
   \   000058   85..83       MOV     DPH,?XSP + 1
   \   00005B   F0           MOVX    @DPTR,A
    484          	uint16 i = 0;
   \   00005C   7E00         MOV     R6,#0x0
   \   00005E   7F00         MOV     R7,#0x0
    485          	uint16 size = 5 + strlen(devid) + msg_len;
   \   000060                ; Setup parameters for call to function strlen
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000068   2405         ADD     A,#0x5
   \   00006A   F8           MOV     R0,A
   \   00006B   EB           MOV     A,R3
   \   00006C   3400         ADDC    A,#0x0
   \   00006E   F9           MOV     R1,A
   \   00006F   85....       MOV     ?V0 + 8,?V0 + 4
   \   000072   85....       MOV     ?V0 + 9,?V0 + 5
   \   000075   E8           MOV     A,R0
   \   000076   25..         ADD     A,?V0 + 8
   \   000078   F5..         MOV     ?V0 + 8,A
   \   00007A   E9           MOV     A,R1
   \   00007B   35..         ADDC    A,?V0 + 9
   \   00007D   F5..         MOV     ?V0 + 9,A
    486          	
    487          	if(devid == NULL || msg == NULL || msg_len == 0)
   \   00007F   7401         MOV     A,#0x1
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000087   600F         JZ      ??EDP_PacketPushData_0
   \   000089   7403         MOV     A,#0x3
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000091   6005         JZ      ??EDP_PacketPushData_0
   \   000093   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000096   7005         JNZ     ??EDP_PacketPushData_1
    488          		return 1;
   \                     ??EDP_PacketPushData_0:
   \   000098   7901         MOV     R1,#0x1
   \   00009A   02....       LJMP    ??EDP_PacketPushData_2 & 0xFFFF
    489          
    490          	EDP_NewBuffer(edpPacket, size);
   \                     ??EDP_PacketPushData_1:
   \   00009D                ; Setup parameters for call to function EDP_NewBuffer
   \   00009D   E4           CLR     A
   \   00009E   F5..         MOV     ?V0 + 10,A
   \   0000A0   F5..         MOV     ?V0 + 11,A
   \   0000A2   78..         MOV     R0,#?V0 + 8
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000A7   AA..         MOV     R2,?V0 + 14
   \   0000A9   AB..         MOV     R3,?V0 + 15
   \   0000AB   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    491          	if(edpPacket->_data == NULL)
   \   0000B1   85..82       MOV     DPL,?V0 + 14
   \   0000B4   85..83       MOV     DPH,?V0 + 15
   \   0000B7   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0000BA   7005         JNZ     ??EDP_PacketPushData_3
    492          		return 2;
   \   0000BC   7902         MOV     R1,#0x2
   \   0000BE   02....       LJMP    ??EDP_PacketPushData_2 & 0xFFFF
    493          	
    494          	//Byte0£ºpushdataÀàÐÍ-----------------------------------------------------------
    495          	edpPacket->_data[edpPacket->_len++] = PUSHDATA;
   \                     ??EDP_PacketPushData_3:
   \   0000C1   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000C4   12....       LCALL   ?L_MOV_X
   \   0000C7   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000CA   7430         MOV     A,#0x30
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   90....       MOV     DPTR,#__Constant_1
   \   0000D0   78..         MOV     R0,#?V0 + 8
   \   0000D2   12....       LCALL   ?L_MOV_X
   \   0000D5   85..82       MOV     DPL,?V0 + 12
   \   0000D8   85..83       MOV     DPH,?V0 + 13
   \   0000DB   78..         MOV     R0,#?V0 + 8
   \   0000DD   12....       LCALL   ?L_ADD_TO_X
    496          	
    497          	//Ê£Óà³¤¶È----------------------------------------------------------------------
    498          	edpPacket->_len += WriteRemainlen(edpPacket->_data, remain_len, edpPacket->_len);
   \   0000E0                ; Setup parameters for call to function WriteRemainlen
   \   0000E0   78..         MOV     R0,#?V0 + 0
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000E5   85..82       MOV     DPL,?V0 + 12
   \   0000E8   85..83       MOV     DPH,?V0 + 13
   \   0000EB   78..         MOV     R0,#?V0 + 0
   \   0000ED   12....       LCALL   ?L_MOV_X
   \   0000F0   AC..         MOV     R4,?V0 + 0
   \   0000F2   AD..         MOV     R5,?V0 + 1
   \   0000F4   12....       LCALL   ??WriteRemainlen?relay
   \   0000F7   7404         MOV     A,#0x4
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   8A..         MOV     ?V0 + 0,R2
   \   0000FE   8B..         MOV     ?V0 + 1,R3
   \   000100   8C..         MOV     ?V0 + 2,R4
   \   000102   8D..         MOV     ?V0 + 3,R5
   \   000104   85..82       MOV     DPL,?V0 + 12
   \   000107   85..83       MOV     DPH,?V0 + 13
   \   00010A   78..         MOV     R0,#?V0 + 0
   \   00010C   12....       LCALL   ?L_ADD_TO_X
    499          	
    500          	//DEVID³¤¶È---------------------------------------------------------------------
    501          	edpPacket->_data[edpPacket->_len++] = MOSQ_MSB(devid_len);
   \   00010F   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000112   12....       LCALL   ?L_MOV_X
   \   000115   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000118   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00011B   12....       LCALL   ?L_MOV_X
   \   00011E   85..82       MOV     DPL,?V0 + 12
   \   000121   85..83       MOV     DPH,?V0 + 13
   \   000124   78..         MOV     R0,#?V0 + 0
   \   000126   12....       LCALL   ?L_ADD_TO_X
    502          	edpPacket->_data[edpPacket->_len++] = MOSQ_LSB(devid_len);
   \   000129   85..82       MOV     DPL,?XSP + 0
   \   00012C   85..83       MOV     DPH,?XSP + 1
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   C0E0         PUSH    A
   \   000132   85..82       MOV     DPL,?V0 + 12
   \   000135   85..83       MOV     DPH,?V0 + 13
   \   000138   78..         MOV     R0,#?V0 + 0
   \   00013A   12....       LCALL   ?L_MOV_X
   \   00013D   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000140   D0E0         POP     A
   \   000142   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000145   12....       LCALL   ?L_MOV_X
   \   000148   85..82       MOV     DPL,?V0 + 12
   \   00014B   85..83       MOV     DPH,?V0 + 13
   \   00014E   78..         MOV     R0,#?V0 + 0
   \   000150   12....       LCALL   ?L_ADD_TO_X
   \   000153   802E         SJMP    ??CrossCallReturnLabel_72
    503          	
    504          	//Ð´ÈëDEVID---------------------------------------------------------------------
    505          	for(; i < devid_len; i++)
    506          		edpPacket->_data[edpPacket->_len++] = devid[i];
   \                     ??EDP_PacketPushData_4:
   \   000155   7401         MOV     A,#0x1
   \   000157   12....       LCALL   ?XSTACK_DISP0_8
   \   00015A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00015D   C0E0         PUSH    A
   \   00015F   85..82       MOV     DPL,?V0 + 12
   \   000162   85..83       MOV     DPH,?V0 + 13
   \   000165   78..         MOV     R0,#?V0 + 0
   \   000167   12....       LCALL   ?L_MOV_X
   \   00016A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00016D   D0E0         POP     A
   \   00016F   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000172   12....       LCALL   ?L_MOV_X
   \   000175   85..82       MOV     DPL,?V0 + 12
   \   000178   85..83       MOV     DPH,?V0 + 13
   \   00017B   78..         MOV     R0,#?V0 + 0
   \   00017D   12....       LCALL   ?L_ADD_TO_X
   \   000180   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000183   85..82       MOV     DPL,?XSP + 0
   \   000186   85..83       MOV     DPH,?XSP + 1
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F8           MOV     R0,A
   \   00018B   C3           CLR     C
   \   00018C   EE           MOV     A,R6
   \   00018D   98           SUBB    A,R0
   \   00018E   EF           MOV     A,R7
   \   00018F   9400         SUBB    A,#0x0
   \   000191   40C2         JC      ??EDP_PacketPushData_4
    507          	
    508          	//Ð´ÈëÊý¾Ý----------------------------------------------------------------------
    509          	for(i = 0; i < msg_len; i++)
   \   000193   7E00         MOV     R6,#0x0
   \   000195   7F00         MOV     R7,#0x0
   \   000197   802E         SJMP    ??CrossCallReturnLabel_73
    510          		edpPacket->_data[edpPacket->_len++] = msg[i];
   \                     ??EDP_PacketPushData_5:
   \   000199   7403         MOV     A,#0x3
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0001A1   C0E0         PUSH    A
   \   0001A3   85..82       MOV     DPL,?V0 + 12
   \   0001A6   85..83       MOV     DPH,?V0 + 13
   \   0001A9   78..         MOV     R0,#?V0 + 0
   \   0001AB   12....       LCALL   ?L_MOV_X
   \   0001AE   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0001B1   D0E0         POP     A
   \   0001B3   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0001B6   12....       LCALL   ?L_MOV_X
   \   0001B9   85..82       MOV     DPL,?V0 + 12
   \   0001BC   85..83       MOV     DPH,?V0 + 13
   \   0001BF   78..         MOV     R0,#?V0 + 0
   \   0001C1   12....       LCALL   ?L_ADD_TO_X
   \   0001C4   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0001C7   8E..         MOV     ?V0 + 0,R6
   \   0001C9   8F..         MOV     ?V0 + 1,R7
   \   0001CB   E4           CLR     A
   \   0001CC   F5..         MOV     ?V0 + 2,A
   \   0001CE   F5..         MOV     ?V0 + 3,A
   \   0001D0   78..         MOV     R0,#?V0 + 4
   \   0001D2   79..         MOV     R1,#?V0 + 0
   \   0001D4   12....       LCALL   ?UL_GT
   \   0001D7   40C0         JC      ??EDP_PacketPushData_5
    511          	
    512          	return 0;
   \   0001D9   7900         MOV     R1,#0x0
   \                     ??EDP_PacketPushData_2:
   \   0001DB   7405         MOV     A,#0x5
   \   0001DD   80..         SJMP    ??Subroutine70_0
    513          
    514          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2E           ADD     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3F           ADDC    A,R7
   \   000006   8882         MOV     DPL,R0
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   12....       LCALL   ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006                REQUIRE ??Subroutine69_0
   \   000006                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 14,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 15,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   45..         ORL     A,?V0 + 5
   \   000004   45..         ORL     A,?V0 + 6
   \   000006   45..         ORL     A,?V0 + 7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EA           MOV     A,R2
   \   000001   25..         ADD     A,?V0 + 8
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   35..         ADDC    A,?V0 + 9
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E4           CLR     A
   \   000001                REQUIRE ??Subroutine75_0
   \   000001                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E5..         MOV     A,?V0 + 14
   \   000002   2402         ADD     A,#0x2
   \   000004   F5..         MOV     ?V0 + 12,A
   \   000006   E5..         MOV     A,?V0 + 15
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 13,A
   \   00000C   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00000F   78..         MOV     R0,#?V0 + 8
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   85..82       MOV     DPL,?V0 + 14
   \   000003   85..83       MOV     DPH,?V0 + 15
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FA           MOV     R2,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FB           MOV     R3,A
   \   00000B   85..82       MOV     DPL,?V0 + 12
   \   00000E   85..83       MOV     DPH,?V0 + 13
   \   000011   22           RET
    515          
    516          //==========================================================
    517          //	º¯ÊýÃû³Æ£º	EDP_UnPacketPushData
    518          //
    519          //	º¯Êý¹¦ÄÜ£º	PushData¹¦ÄÜ½â°ü
    520          //
    521          //	Èë¿Ú²ÎÊý£º	rev_data£ºÊÕµ½µÄÊý¾Ý
    522          //				src_devid£ºÔ´devid»º´æ
    523          //				req£ºÃüÁî»º´æ
    524          //				req_len£ºÃüÁî³¤¶È
    525          //
    526          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    527          //
    528          //	ËµÃ÷£º		
    529          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7404         MOV     A,#0x4
   \   000002                REQUIRE ??Subroutine70_0
   \   000002                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          uint8 EDP_UnPacketPushData(uint8 *rev_data, int8 **src_devid, int8 **req, uint32 *req_len)
   \                     EDP_UnPacketPushData:
    531          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   741C         MOV     A,#0x1c
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 12,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 13,A
   \   00001E   741E         MOV     A,#0x1e
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine24 & 0xFFFF
    532          
    533          	int32 read_pos = 0;
    534          	uint32 remain_len = 0;
   \                     ??CrossCallReturnLabel_36:
   \   000026   90....       MOV     DPTR,#__Constant_0
   \   000029   12....       LCALL   ?XLOAD_R2345
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   12....       LCALL   ?XSTORE_R2345
    535          	uint16 devid_len = 0;
    536          	
    537          	//Byte0£ºPushDataÏûÏ¢------------------------------------------------------------
    538          	if(rev_data[read_pos++] != PUSHDATA)
   \   000035   85..82       MOV     DPL,?V0 + 2
   \   000038   85..83       MOV     DPH,?V0 + 3
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6430         XRL     A,#0x30
   \   00003E   6005         JZ      ??EDP_UnPacketPushData_0
    539          		return 1;
   \   000040   7901         MOV     R1,#0x1
   \   000042   02....       LJMP    ??EDP_UnPacketPushData_1 & 0xFFFF
    540          
    541          	//¶ÁÈ¡Ê£Óà³¤¶È--------------------------------------------------------------------
    542          	read_pos = ReadRemainlen((int8 *)rev_data, &remain_len, read_pos);
   \                     ??EDP_UnPacketPushData_0:
   \   000045                ; Setup parameters for call to function ReadRemainlen
   \   000045   75..01       MOV     ?V0 + 4,#0x1
   \   000048   75..00       MOV     ?V0 + 5,#0x0
   \   00004B   78..         MOV     R0,#?V0 + 4
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   AC82         MOV     R4,DPL
   \   000057   AD83         MOV     R5,DPH
   \   000059   AA..         MOV     R2,?V0 + 2
   \   00005B   AB..         MOV     R3,?V0 + 3
   \   00005D   12....       LCALL   ??ReadRemainlen?relay
   \   000060   7402         MOV     A,#0x2
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   8A..         MOV     ?V0 + 4,R2
   \   000067   8B..         MOV     ?V0 + 5,R3
   \   000069   8C..         MOV     ?V0 + 6,R4
   \   00006B   8D..         MOV     ?V0 + 7,R5
    543          	if(read_pos == -1)
   \   00006D   90....       MOV     DPTR,#__Constant_ffffffff
   \   000070   78..         MOV     R0,#?V0 + 4
   \   000072   12....       LCALL   ?L_EQ_X
   \   000075   7005         JNZ     ??EDP_UnPacketPushData_2
    544          		return 2;
   \   000077   7902         MOV     R1,#0x2
   \   000079   02....       LJMP    ??EDP_UnPacketPushData_1 & 0xFFFF
    545          	
    546          	//¶ÁÈ¡Ô´devid³¤¶È-----------------------------------------------------------------
    547          	devid_len = (uint16)rev_data[read_pos] << 8 | rev_data[read_pos + 1];
   \                     ??EDP_UnPacketPushData_2:
   \   00007C   8A..         MOV     ?V0 + 8,R2
   \   00007E   8B..         MOV     ?V0 + 9,R3
   \   000080   E5..         MOV     A,?V0 + 2
   \   000082   25..         ADD     A,?V0 + 8
   \   000084   F582         MOV     DPL,A
   \   000086   E5..         MOV     A,?V0 + 3
   \   000088   35..         ADDC    A,?V0 + 9
   \   00008A   F583         MOV     DPH,A
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FA           MOV     R2,A
   \   000091   FE           MOV     R6,A
   \   000092   E9           MOV     A,R1
   \   000093   FF           MOV     R7,A
    548          	read_pos += 2;
   \   000094   90....       MOV     DPTR,#__Constant_2
   \   000097   78..         MOV     R0,#?V0 + 4
   \   000099   12....       LCALL   ?L_ADD_X
    549          
    550          	//·ÖÅäÄÚ´æ------------------------------------------------------------------------
    551          	*src_devid = (int8 *)EDP_MallocBuffer(devid_len + 1);
   \   00009C                ; Setup parameters for call to function osal_mem_alloc
   \   00009C   EE           MOV     A,R6
   \   00009D   2401         ADD     A,#0x1
   \   00009F   0A           INC     R2
   \   0000A0   EF           MOV     A,R7
   \   0000A1   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000A4   85..82       MOV     DPL,?V0 + 0
   \   0000A7   85..83       MOV     DPH,?V0 + 1
   \   0000AA   12....       LCALL   ??Subroutine71_0 & 0xFFFF
    552          	if(*src_devid == NULL)
   \                     ??CrossCallReturnLabel_169:
   \   0000AD   85..82       MOV     DPL,?V0 + 0
   \   0000B0   85..83       MOV     DPH,?V0 + 1
   \   0000B3   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0000B6   7005         JNZ     ??EDP_UnPacketPushData_3
    553          		return 3;
   \   0000B8   7903         MOV     R1,#0x3
   \   0000BA   02....       LJMP    ??EDP_UnPacketPushData_1 & 0xFFFF
    554          
    555          	//¶ÁÈ¡Ô´devid---------------------------------------------------------------------
    556          	memset(*src_devid, 0, devid_len + 1);
                 	^
Warning[Pe223]: function "memset" declared implicitly
   \                     ??EDP_UnPacketPushData_3:
   \   0000BD                ; Setup parameters for call to function memset
   \   0000BD   EE           MOV     A,R6
   \   0000BE   2401         ADD     A,#0x1
   \   0000C0   F5..         MOV     ?V0 + 8,A
   \   0000C2   EF           MOV     A,R7
   \   0000C3   3400         ADDC    A,#0x0
   \   0000C5   F5..         MOV     ?V0 + 9,A
   \   0000C7   78..         MOV     R0,#?V0 + 8
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   7C00         MOV     R4,#0x0
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   85..82       MOV     DPL,?V0 + 0
   \   0000D3   85..83       MOV     DPH,?V0 + 1
   \   0000D6   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
    557          	memcpy(*src_devid, (const int8 *)rev_data + read_pos, devid_len);
                 	^
Warning[Pe223]: function "memcpy" declared implicitly
   \   0000DC                ; Setup parameters for call to function memcpy
   \   0000DC   8E..         MOV     ?V0 + 8,R6
   \   0000DE   8F..         MOV     ?V0 + 9,R7
   \   0000E0   78..         MOV     R0,#?V0 + 8
   \   0000E2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E5   85....       MOV     ?V0 + 8,?V0 + 4
   \   0000E8   85....       MOV     ?V0 + 9,?V0 + 5
   \   0000EB   E5..         MOV     A,?V0 + 2
   \   0000ED   25..         ADD     A,?V0 + 8
   \   0000EF   FC           MOV     R4,A
   \   0000F0   E5..         MOV     A,?V0 + 3
   \   0000F2   35..         ADDC    A,?V0 + 9
   \   0000F4   FD           MOV     R5,A
   \   0000F5   85..82       MOV     DPL,?V0 + 0
   \   0000F8   85..83       MOV     DPH,?V0 + 1
   \   0000FB   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
    558          	read_pos += devid_len;
    559          
    560          	remain_len -= 2 + devid_len;
   \   000101   EE           MOV     A,R6
   \   000102   2402         ADD     A,#0x2
   \   000104   F5..         MOV     ?V0 + 8,A
   \   000106   EF           MOV     A,R7
   \   000107   3400         ADDC    A,#0x0
   \   000109   F5..         MOV     ?V0 + 9,A
   \   00010B   E4           CLR     A
   \   00010C   F5..         MOV     ?V0 + 10,A
   \   00010E   F5..         MOV     ?V0 + 11,A
   \   000110   85..82       MOV     DPL,?XSP + 0
   \   000113   85..83       MOV     DPH,?XSP + 1
   \   000116   78..         MOV     R0,#?V0 + 8
   \   000118   12....       LCALL   ?L_SUB_FROM_X
    561          
    562          	//·ÖÅäÄÚ´æ------------------------------------------------------------------------
    563          	*req = (int8 *)EDP_MallocBuffer(remain_len + 1);
   \   00011B                ; Setup parameters for call to function osal_mem_alloc
   \   00011B   85..82       MOV     DPL,?XSP + 0
   \   00011E   85..83       MOV     DPH,?XSP + 1
   \   000121   78..         MOV     R0,#?V0 + 8
   \   000123   12....       LCALL   ?L_MOV_X
   \   000126   E5..         MOV     A,?V0 + 8
   \   000128   2401         ADD     A,#0x1
   \   00012A   FA           MOV     R2,A
   \   00012B   E5..         MOV     A,?V0 + 9
   \   00012D   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000130   85..82       MOV     DPL,?V0 + 12
   \   000133   85..83       MOV     DPH,?V0 + 13
   \   000136   12....       LCALL   ??Subroutine71_0 & 0xFFFF
    564          	if(*req == NULL)
   \                     ??CrossCallReturnLabel_170:
   \   000139   85..82       MOV     DPL,?V0 + 12
   \   00013C   85..83       MOV     DPH,?V0 + 13
   \   00013F   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000142   700B         JNZ     ??EDP_UnPacketPushData_4
    565          	{
    566          		EDP_FreeBuffer(*src_devid);
   \   000144                ; Setup parameters for call to function osal_mem_free
   \   000144   85..82       MOV     DPL,?V0 + 0
   \   000147   85..83       MOV     DPH,?V0 + 1
   \   00014A   12....       LCALL   ?Subroutine26 & 0xFFFF
    567          		return 4;
    568          	}
   \                     ??CrossCallReturnLabel_40:
   \   00014D   805F         SJMP    ??EDP_UnPacketPushData_1
    569          
    570          	//¶ÁÈ¡ÃüÁî------------------------------------------------------------------------
    571          	memset(*req, 0, remain_len + 1);
   \                     ??EDP_UnPacketPushData_4:
   \   00014F                ; Setup parameters for call to function memset
   \   00014F   85..82       MOV     DPL,?XSP + 0
   \   000152   85..83       MOV     DPH,?XSP + 1
   \   000155   78..         MOV     R0,#?V0 + 8
   \   000157   12....       LCALL   ?L_MOV_X
   \   00015A   90....       MOV     DPTR,#__Constant_1
   \   00015D   78..         MOV     R0,#?V0 + 8
   \   00015F   12....       LCALL   ?L_ADD_X
   \   000162   78..         MOV     R0,#?V0 + 8
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000167   7C00         MOV     R4,#0x0
   \   000169   7D00         MOV     R5,#0x0
   \   00016B   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00016E   12....       LCALL   ??memset?relay
   \   000171   7404         MOV     A,#0x4
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
    572          	memcpy(*req, (const int8 *)rev_data + read_pos, remain_len);
   \   000176                ; Setup parameters for call to function memcpy
   \   000176   85..82       MOV     DPL,?XSP + 0
   \   000179   85..83       MOV     DPH,?XSP + 1
   \   00017C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00017F   E5..         MOV     A,?V0 + 4
   \   000181   2E           ADD     A,R6
   \   000182   F8           MOV     R0,A
   \   000183   E5..         MOV     A,?V0 + 5
   \   000185   3F           ADDC    A,R7
   \   000186   F9           MOV     R1,A
   \   000187   E5..         MOV     A,?V0 + 2
   \   000189   28           ADD     A,R0
   \   00018A   FC           MOV     R4,A
   \   00018B   E5..         MOV     A,?V0 + 3
   \   00018D   39           ADDC    A,R1
   \   00018E   FD           MOV     R5,A
   \   00018F   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000192   12....       LCALL   ??memcpy?relay
   \   000195   7404         MOV     A,#0x4
   \   000197   12....       LCALL   ?DEALLOC_XSTACK8
    573          	read_pos += remain_len;
    574          
    575          	*req_len = remain_len;
   \   00019A   85..82       MOV     DPL,?XSP + 0
   \   00019D   85..83       MOV     DPH,?XSP + 1
   \   0001A0   12....       LCALL   ?XLOAD_R2345
   \   0001A3   85..82       MOV     DPL,?V0 + 14
   \   0001A6   85..83       MOV     DPH,?V0 + 15
   \   0001A9   12....       LCALL   ?XSTORE_R2345
    576          	
    577          	return 0;
   \   0001AC   7900         MOV     R1,#0x0
   \                     ??EDP_UnPacketPushData_1:
   \   0001AE   02....       LJMP    ?Subroutine3 & 0xFFFF
    578          
    579          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   12....       LCALL   ??osal_mem_alloc?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003   12....       LCALL   ??memcpy?relay
   \   000006   7402         MOV     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   12....       LCALL   ??memset?relay
   \   000006   7402         MOV     A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   12....       LCALL   ??osal_mem_free?relay
   \   000006   7904         MOV     R1,#0x4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV     DPL,?V0 + 12
   \   000003   85..83       MOV     DPH,?V0 + 13
   \   000006                REQUIRE ??Subroutine76_0
   \   000006                ; // Fall through to label ??Subroutine76_0
    580          
    581          //==========================================================
    582          //	º¯ÊýÃû³Æ£º	EDP_UnPacketCmd
    583          //
    584          //	º¯Êý¹¦ÄÜ£º	ÏÂ·¢ÃüÁî½â°ü
    585          //
    586          //	Èë¿Ú²ÎÊý£º	rev_data£ºÊÕµ½µÄÊý¾Ý
    587          //				cmdid£ºcmdid
    588          //				cmdid_len£ºcmdid³¤¶È
    589          //				req£ºÃüÁî
    590          //				req_len£ºÃüÁî³¤¶È
    591          //
    592          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    593          //
    594          //	ËµÃ÷£º		
    595          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          uint8 EDP_UnPacketCmd(uint8 *rev_data, int8 **cmdid, uint16 *cmdid_len, int8 **req, uint32 *req_len)
   \                     EDP_UnPacketCmd:
    597          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
   \   00000E   8C..         MOV     ?V0 + 14,R4
   \   000010   8D..         MOV     ?V0 + 15,R5
   \   000012   741C         MOV     A,#0x1c
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
    598          
    599          	uint32 remain_len = 0;
   \   00001C   90....       MOV     DPTR,#__Constant_0
   \   00001F   12....       LCALL   ?XLOAD_R2345
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   12....       LCALL   ?XSTORE_R2345
    600          	int32 read_pos = 0;
    601          	
    602          	//Byte0£ºPushDataÏûÏ¢------------------------------------------------------------
    603          	if(rev_data[read_pos++] != CMDREQ)
   \   00002B   85..82       MOV     DPL,?V0 + 12
   \   00002E   85..83       MOV     DPH,?V0 + 13
   \   000031   E0           MOVX    A,@DPTR
   \   000032   64A0         XRL     A,#0xa0
   \   000034   6005         JZ      ??EDP_UnPacketCmd_0
    604          		return 1;
   \   000036   7901         MOV     R1,#0x1
   \   000038   02....       LJMP    ??EDP_UnPacketCmd_1 & 0xFFFF
    605          	
    606          	//¶ÁÈ¡Ê£Óà³¤¶È--------------------------------------------------------------------
    607          	read_pos = ReadRemainlen((int8 *)rev_data, &remain_len, read_pos);
   \                     ??EDP_UnPacketCmd_0:
   \   00003B                ; Setup parameters for call to function ReadRemainlen
   \   00003B   75..01       MOV     ?V0 + 0,#0x1
   \   00003E   75..00       MOV     ?V0 + 1,#0x0
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   AC82         MOV     R4,DPL
   \   00004D   AD83         MOV     R5,DPH
   \   00004F   AA..         MOV     R2,?V0 + 12
   \   000051   AB..         MOV     R3,?V0 + 13
   \   000053   12....       LCALL   ??ReadRemainlen?relay
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   8A..         MOV     ?V0 + 4,R2
   \   00005D   8B..         MOV     ?V0 + 5,R3
   \   00005F   8C..         MOV     ?V0 + 6,R4
   \   000061   8D..         MOV     ?V0 + 7,R5
    608          	if(read_pos == -1)
   \   000063   90....       MOV     DPTR,#__Constant_ffffffff
   \   000066   78..         MOV     R0,#?V0 + 4
   \   000068   12....       LCALL   ?L_EQ_X
   \   00006B   7005         JNZ     ??EDP_UnPacketCmd_2
    609          		return 2;
   \   00006D   7902         MOV     R1,#0x2
   \   00006F   02....       LJMP    ??EDP_UnPacketCmd_1 & 0xFFFF
    610          	
    611          	//¶ÁÈ¡cmdid³¤¶È-------------------------------------------------------------------
    612          	*cmdid_len = (uint16)rev_data[read_pos] << 8 | rev_data[read_pos + 1];
   \                     ??EDP_UnPacketCmd_2:
   \   000072   8A..         MOV     ?V0 + 0,R2
   \   000074   8B..         MOV     ?V0 + 1,R3
   \   000076   E5..         MOV     A,?V0 + 12
   \   000078   25..         ADD     A,?V0 + 0
   \   00007A   F582         MOV     DPL,A
   \   00007C   E5..         MOV     A,?V0 + 13
   \   00007E   35..         ADDC    A,?V0 + 1
   \   000080   F583         MOV     DPH,A
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FA           MOV     R2,A
   \   000087   E9           MOV     A,R1
   \   000088   FB           MOV     R3,A
   \   000089   12....       LCALL   ?Subroutine36 & 0xFFFF
    613          	read_pos += 2;
   \                     ??CrossCallReturnLabel_175:
   \   00008C   90....       MOV     DPTR,#__Constant_2
   \   00008F   78..         MOV     R0,#?V0 + 4
   \   000091   12....       LCALL   ?L_ADD_X
    614          	
    615          	//·ÖÅäÄÚ´æ------------------------------------------------------------------------
    616          	*cmdid = (int8 *)EDP_MallocBuffer(*cmdid_len + 1);
   \   000094                ; Setup parameters for call to function osal_mem_alloc
   \   000094   EA           MOV     A,R2
   \   000095   2401         ADD     A,#0x1
   \   000097   0A           INC     R2
   \   000098   EB           MOV     A,R3
   \   000099   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00009C   85..82       MOV     DPL,?V0 + 14
   \   00009F   85..83       MOV     DPH,?V0 + 15
   \   0000A2   12....       LCALL   ??Subroutine71_0 & 0xFFFF
    617          	if(*cmdid == NULL)
   \                     ??CrossCallReturnLabel_171:
   \   0000A5   85..82       MOV     DPL,?V0 + 14
   \   0000A8   85..83       MOV     DPH,?V0 + 15
   \   0000AB   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000AE   7005         JNZ     ??EDP_UnPacketCmd_3
    618          		return 3;
   \   0000B0   7903         MOV     R1,#0x3
   \   0000B2   02....       LJMP    ??EDP_UnPacketCmd_1 & 0xFFFF
    619          	
    620          	//¶ÁÈ¡cmdid-----------------------------------------------------------------------
    621          	memset(*cmdid, 0, *cmdid_len + 1);
                 	^
Warning[Pe223]: function "memset" declared implicitly
   \                     ??EDP_UnPacketCmd_3:
   \   0000B5                ; Setup parameters for call to function memset
   \   0000B5   8E82         MOV     DPL,R6
   \   0000B7   8F83         MOV     DPH,R7
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   2401         ADD     A,#0x1
   \   0000BC   F5..         MOV     ?V0 + 0,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   3400         ADDC    A,#0x0
   \   0000C2   F5..         MOV     ?V0 + 1,A
   \   0000C4   78..         MOV     R0,#?V0 + 0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   7C00         MOV     R4,#0x0
   \   0000CB   7D00         MOV     R5,#0x0
   \   0000CD   85..82       MOV     DPL,?V0 + 14
   \   0000D0   85..83       MOV     DPH,?V0 + 15
   \   0000D3   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
    622          	memcpy(*cmdid, (const int8 *)rev_data + read_pos, *cmdid_len);
                 	^
Warning[Pe223]: function "memcpy" declared implicitly
   \   0000D9                ; Setup parameters for call to function memcpy
   \   0000D9   8E82         MOV     DPL,R6
   \   0000DB   8F83         MOV     DPH,R7
   \   0000DD   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000E0   85....       MOV     ?V0 + 0,?V0 + 4
   \   0000E3   85....       MOV     ?V0 + 1,?V0 + 5
   \   0000E6   E5..         MOV     A,?V0 + 12
   \   0000E8   25..         ADD     A,?V0 + 0
   \   0000EA   FC           MOV     R4,A
   \   0000EB   E5..         MOV     A,?V0 + 13
   \   0000ED   35..         ADDC    A,?V0 + 1
   \   0000EF   FD           MOV     R5,A
   \   0000F0   85..82       MOV     DPL,?V0 + 14
   \   0000F3   85..83       MOV     DPH,?V0 + 15
   \   0000F6   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
    623          	read_pos += *cmdid_len;
   \   0000FC   8E82         MOV     DPL,R6
   \   0000FE   8F83         MOV     DPH,R7
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F5..         MOV     ?V0 + 0,A
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F5..         MOV     ?V0 + 1,A
   \   000107   E4           CLR     A
   \   000108   F5..         MOV     ?V0 + 2,A
   \   00010A   F5..         MOV     ?V0 + 3,A
   \   00010C   78..         MOV     R0,#?V0 + 4
   \   00010E   79..         MOV     R1,#?V0 + 0
   \   000110   12....       LCALL   ?L_ADD
    624          	
    625          	//¶ÁÈ¡req³¤¶È---------------------------------------------------------------------
    626          	*req_len = (uint32)rev_data[read_pos] << 24 | (uint32)rev_data[read_pos + 1] << 16
    627          					 | (uint32)rev_data[read_pos + 2] << 8 | (uint32)rev_data[read_pos + 3];
   \   000113   85....       MOV     ?V0 + 0,?V0 + 4
   \   000116   85....       MOV     ?V0 + 1,?V0 + 5
   \   000119   E5..         MOV     A,?V0 + 12
   \   00011B   25..         ADD     A,?V0 + 0
   \   00011D   FA           MOV     R2,A
   \   00011E   E5..         MOV     A,?V0 + 13
   \   000120   35..         ADDC    A,?V0 + 1
   \   000122   FB           MOV     R3,A
   \   000123   8A82         MOV     DPL,R2
   \   000125   8B83         MOV     DPH,R3
   \   000127   E0           MOVX    A,@DPTR
   \   000128   F5..         MOV     ?V0 + 0,A
   \   00012A   E4           CLR     A
   \   00012B   F5..         MOV     ?V0 + 1,A
   \   00012D   7418         MOV     A,#0x18
   \   00012F   78..         MOV     R0,#?V0 + 0
   \   000131   12....       LCALL   ?L_SHL
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F5..         MOV     ?V0 + 8,A
   \   000138   E4           CLR     A
   \   000139   F5..         MOV     ?V0 + 9,A
   \   00013B   F5..         MOV     ?V0 + 10,A
   \   00013D   F5..         MOV     ?V0 + 11,A
   \   00013F   7410         MOV     A,#0x10
   \   000141   78..         MOV     R0,#?V0 + 8
   \   000143   12....       LCALL   ?L_SHL
   \   000146   78..         MOV     R0,#?V0 + 0
   \   000148   79..         MOV     R1,#?V0 + 8
   \   00014A   12....       LCALL   ?L_IOR
   \   00014D   8A82         MOV     DPL,R2
   \   00014F   8B83         MOV     DPH,R3
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F5..         MOV     ?V0 + 8,A
   \   000156   E4           CLR     A
   \   000157   F5..         MOV     ?V0 + 10,A
   \   000159   7408         MOV     A,#0x8
   \   00015B   78..         MOV     R0,#?V0 + 8
   \   00015D   12....       LCALL   ?L_SHL
   \   000160   78..         MOV     R0,#?V0 + 0
   \   000162   79..         MOV     R1,#?V0 + 8
   \   000164   12....       LCALL   ?L_IOR
   \   000167   8A82         MOV     DPL,R2
   \   000169   8B83         MOV     DPH,R3
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   F5..         MOV     ?V0 + 8,A
   \   000171   E4           CLR     A
   \   000172   F5..         MOV     ?V0 + 9,A
   \   000174   78..         MOV     R0,#?V0 + 0
   \   000176   79..         MOV     R1,#?V0 + 8
   \   000178   12....       LCALL   ?L_IOR
   \   00017B   7420         MOV     A,#0x20
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000183   78..         MOV     R0,#?V0 + 0
   \   000185   12....       LCALL   ?L_MOV_TO_X
    628          	read_pos += 4;
    629          	
    630          	//·ÖÅäÄÚ´æ------------------------------------------------------------------------
    631          	*req = (int8 *)EDP_MallocBuffer(*req_len + 1);
   \   000188                ; Setup parameters for call to function osal_mem_alloc
   \   000188   E5..         MOV     A,?V0 + 0
   \   00018A   2401         ADD     A,#0x1
   \   00018C   FA           MOV     R2,A
   \   00018D   E5..         MOV     A,?V0 + 1
   \   00018F   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000192   741E         MOV     A,#0x1e
   \   000194   12....       LCALL   ?XSTACK_DISP0_8
   \   000197   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00019A   12....       LCALL   ??Subroutine71_0 & 0xFFFF
    632          	if(*req == NULL)
   \                     ??CrossCallReturnLabel_172:
   \   00019D   741E         MOV     A,#0x1e
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0001A5   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   0001A8   700B         JNZ     ??EDP_UnPacketCmd_4
    633          	{
    634          		EDP_FreeBuffer(*cmdid);
   \   0001AA                ; Setup parameters for call to function osal_mem_free
   \   0001AA   85..82       MOV     DPL,?V0 + 14
   \   0001AD   85..83       MOV     DPH,?V0 + 15
   \   0001B0   12....       LCALL   ?Subroutine26 & 0xFFFF
    635          		return 4;
    636          	}
   \                     ??CrossCallReturnLabel_41:
   \   0001B3   805D         SJMP    ??EDP_UnPacketCmd_1
    637          	
    638          	//¶ÁÈ¡req-------------------------------------------------------------------------
    639          	memset(*req, 0, *req_len + 1);
   \                     ??EDP_UnPacketCmd_4:
   \   0001B5                ; Setup parameters for call to function memset
   \   0001B5   7420         MOV     A,#0x20
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0001BD   78..         MOV     R0,#?V0 + 0
   \   0001BF   12....       LCALL   ?L_MOV_X
   \   0001C2   90....       MOV     DPTR,#__Constant_1
   \   0001C5   78..         MOV     R0,#?V0 + 0
   \   0001C7   12....       LCALL   ?L_ADD_X
   \   0001CA   78..         MOV     R0,#?V0 + 0
   \   0001CC   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001CF   7C00         MOV     R4,#0x0
   \   0001D1   7D00         MOV     R5,#0x0
   \   0001D3   7422         MOV     A,#0x22
   \   0001D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D8   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001DB   12....       LCALL   ??memset?relay
   \   0001DE   7404         MOV     A,#0x4
   \   0001E0   12....       LCALL   ?DEALLOC_XSTACK8
    640          	memcpy(*req, (const int8 *)rev_data + read_pos, *req_len);
   \   0001E3                ; Setup parameters for call to function memcpy
   \   0001E3   7420         MOV     A,#0x20
   \   0001E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E8   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0001EB   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001EE   E5..         MOV     A,?V0 + 12
   \   0001F0   25..         ADD     A,?V0 + 4
   \   0001F2   F8           MOV     R0,A
   \   0001F3   E5..         MOV     A,?V0 + 13
   \   0001F5   35..         ADDC    A,?V0 + 5
   \   0001F7   F9           MOV     R1,A
   \   0001F8   E8           MOV     A,R0
   \   0001F9   2404         ADD     A,#0x4
   \   0001FB   FC           MOV     R4,A
   \   0001FC   E9           MOV     A,R1
   \   0001FD   3400         ADDC    A,#0x0
   \   0001FF   FD           MOV     R5,A
   \   000200   7422         MOV     A,#0x22
   \   000202   12....       LCALL   ?XSTACK_DISP0_8
   \   000205   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000208   12....       LCALL   ??memcpy?relay
   \   00020B   7404         MOV     A,#0x4
   \   00020D   12....       LCALL   ?DEALLOC_XSTACK8
    641          	read_pos += *req_len;
    642          	
    643          	return 0;
   \   000210   7900         MOV     R1,#0x0
   \                     ??EDP_UnPacketCmd_1:
   \   000212   02....       LJMP    ?Subroutine3 & 0xFFFF
    644          
    645          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   12....       LCALL   ??Subroutine72_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000006   22           RET
    646          
    647          //==========================================================
    648          //	º¯ÊýÃû³Æ£º	EDP_PacketCmdResp
    649          //
    650          //	º¯Êý¹¦ÄÜ£º	ÃüÁî»Ø¸´×é°ü
    651          //
    652          //	Èë¿Ú²ÎÊý£º	cmdid£ºÃüÁîµÄcmdid(ËæÃüÁîÏÂ·¢)
    653          //				cmdid_len£ºcmdid³¤¶È
    654          //				req£ºÃüÁî
    655          //				req_len£ºÃüÁî³¤¶È
    656          //				edpPacket£º°üÖ¸Õë
    657          //
    658          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    659          //
    660          //	ËµÃ÷£º		
    661          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    662          uint1 EDP_PacketCmdResp(const int8 *cmdid, uint16 cmdid_len, const int8 *resp, uint32 resp_len, EDP_PACKET_STRUCTURE *edpPacket)
   \                     EDP_PacketCmdResp:
    663          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   12....       LCALL   ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000013   EC           MOV     A,R4
   \   000014   FE           MOV     R6,A
   \   000015   ED           MOV     A,R5
   \   000016   FF           MOV     R7,A
   \   000017   741C         MOV     A,#0x1c
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   78..         MOV     R0,#?V0 + 4
   \   00001E   12....       LCALL   ?L_MOV_X
   \   000021   7420         MOV     A,#0x20
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine24 & 0xFFFF
    664          	
    665          	uint32 remain_len = cmdid_len + resp_len + (resp_len ? 6 : 2);
   \                     ??CrossCallReturnLabel_37:
   \   000029   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00002C   6005         JZ      ??EDP_PacketCmdResp_0
   \   00002E   90....       MOV     DPTR,#__Constant_6
   \   000031   8003         SJMP    ??EDP_PacketCmdResp_1
   \                     ??EDP_PacketCmdResp_0:
   \   000033   90....       MOV     DPTR,#__Constant_2
   \                     ??EDP_PacketCmdResp_1:
   \   000036   78..         MOV     R0,#?V0 + 8
   \   000038   12....       LCALL   ?L_MOV_X
   \   00003B   8E..         MOV     ?V0 + 0,R6
   \   00003D   8F..         MOV     ?V0 + 1,R7
   \   00003F   E4           CLR     A
   \   000040   F5..         MOV     ?V0 + 2,A
   \   000042   F5..         MOV     ?V0 + 3,A
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   79..         MOV     R1,#?V0 + 4
   \   000048   12....       LCALL   ?L_ADD
   \   00004B   78..         MOV     R0,#?V0 + 0
   \   00004D   79..         MOV     R1,#?V0 + 8
   \   00004F   12....       LCALL   ?L_ADD
    666          	
    667          	EDP_NewBuffer(edpPacket, remain_len + 5);
   \   000052                ; Setup parameters for call to function EDP_NewBuffer
   \   000052   85....       MOV     ?V0 + 8,?V0 + 0
   \   000055   85....       MOV     ?V0 + 9,?V0 + 1
   \   000058   85....       MOV     ?V0 + 10,?V0 + 2
   \   00005B   85....       MOV     ?V0 + 11,?V0 + 3
   \   00005E   90....       MOV     DPTR,#__Constant_5
   \   000061   78..         MOV     R0,#?V0 + 8
   \   000063   12....       LCALL   ?L_ADD_X
   \   000066   78..         MOV     R0,#?V0 + 8
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00006B   AA..         MOV     R2,?V0 + 14
   \   00006D   AB..         MOV     R3,?V0 + 15
   \   00006F   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
    668          	if(edpPacket->_data == NULL)
   \   000075   85..82       MOV     DPL,?V0 + 14
   \   000078   85..83       MOV     DPH,?V0 + 15
   \   00007B   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00007E   7005         JNZ     ??EDP_PacketCmdResp_2
    669          		return 1;
   \   000080   7901         MOV     R1,#0x1
   \   000082   02....       LJMP    ??EDP_PacketCmdResp_3 & 0xFFFF
    670          	
    671          	//Byte0£ºCMDRESPÏûÏ¢------------------------------------------------------------
    672          	edpPacket->_data[edpPacket->_len++] = CMDRESP;
   \                     ??EDP_PacketCmdResp_2:
   \   000085   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000088   12....       LCALL   ?L_MOV_X
   \   00008B   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00008E   74B0         MOV     A,#-0x50
   \   000090   F0           MOVX    @DPTR,A
   \   000091   90....       MOV     DPTR,#__Constant_1
   \   000094   78..         MOV     R0,#?V0 + 8
   \   000096   12....       LCALL   ?L_MOV_X
   \   000099   85..82       MOV     DPL,?V0 + 12
   \   00009C   85..83       MOV     DPH,?V0 + 13
   \   00009F   78..         MOV     R0,#?V0 + 8
   \   0000A1   12....       LCALL   ?L_ADD_TO_X
    673          	
    674          	//Ð´ÈëÊ£Óà³¤¶È------------------------------------------------------------------
    675          	edpPacket->_len += WriteRemainlen(edpPacket->_data, remain_len, edpPacket->_len);
   \   0000A4                ; Setup parameters for call to function WriteRemainlen
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000A9   85..82       MOV     DPL,?V0 + 12
   \   0000AC   85..83       MOV     DPH,?V0 + 13
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?L_MOV_X
   \   0000B4   AC..         MOV     R4,?V0 + 0
   \   0000B6   AD..         MOV     R5,?V0 + 1
   \   0000B8   12....       LCALL   ??WriteRemainlen?relay
   \   0000BB   7404         MOV     A,#0x4
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C0   8A..         MOV     ?V0 + 0,R2
   \   0000C2   8B..         MOV     ?V0 + 1,R3
   \   0000C4   8C..         MOV     ?V0 + 2,R4
   \   0000C6   8D..         MOV     ?V0 + 3,R5
   \   0000C8   85..82       MOV     DPL,?V0 + 12
   \   0000CB   85..83       MOV     DPH,?V0 + 13
   \   0000CE   78..         MOV     R0,#?V0 + 0
   \   0000D0   12....       LCALL   ?L_ADD_TO_X
    676          	
    677          	//Ð´Èëcmdid³¤¶È------------------------------------------------------------------
    678          	edpPacket->_data[edpPacket->_len++] = cmdid_len >> 8;
   \   0000D3   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000D6   12....       LCALL   ?L_MOV_X
   \   0000D9   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000DC   EF           MOV     A,R7
   \   0000DD   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0000E0   12....       LCALL   ?L_MOV_X
   \   0000E3   85..82       MOV     DPL,?V0 + 12
   \   0000E6   85..83       MOV     DPH,?V0 + 13
   \   0000E9   78..         MOV     R0,#?V0 + 0
   \   0000EB   12....       LCALL   ?L_ADD_TO_X
    679          	edpPacket->_data[edpPacket->_len++] = cmdid_len & 0x00FF;
   \   0000EE   85..82       MOV     DPL,?V0 + 12
   \   0000F1   85..83       MOV     DPH,?V0 + 13
   \   0000F4   78..         MOV     R0,#?V0 + 0
   \   0000F6   12....       LCALL   ?L_MOV_X
   \   0000F9   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000FC   EE           MOV     A,R6
   \   0000FD   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000100   12....       LCALL   ?L_MOV_X
   \   000103   85..82       MOV     DPL,?V0 + 12
   \   000106   85..83       MOV     DPH,?V0 + 13
   \   000109   78..         MOV     R0,#?V0 + 0
   \   00010B   12....       LCALL   ?L_ADD_TO_X
    680          	
    681          	//Ð´Èëcmdid----------------------------------------------------------------------
    682          	memcpy((int8 *)edpPacket->_data + edpPacket->_len, cmdid, cmdid_len);
                 	^
Warning[Pe223]: function "memcpy" declared implicitly
   \   00010E                ; Setup parameters for call to function memcpy
   \   00010E   8E..         MOV     ?V0 + 0,R6
   \   000110   8F..         MOV     ?V0 + 1,R7
   \   000112   78..         MOV     R0,#?V0 + 0
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   7402         MOV     A,#0x2
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00011F   12....       LCALL   ?L_MOV_X
   \   000122   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000125   7402         MOV     A,#0x2
   \   000127   12....       LCALL   ?DEALLOC_XSTACK8
    683          	edpPacket->_len += cmdid_len;
   \   00012A   8E..         MOV     ?V0 + 0,R6
   \   00012C   8F..         MOV     ?V0 + 1,R7
   \   00012E   E4           CLR     A
   \   00012F   F5..         MOV     ?V0 + 2,A
   \   000131   F5..         MOV     ?V0 + 3,A
   \   000133   85..82       MOV     DPL,?V0 + 12
   \   000136   85..83       MOV     DPH,?V0 + 13
   \   000139   78..         MOV     R0,#?V0 + 0
   \   00013B   12....       LCALL   ?L_ADD_TO_X
    684          	
    685          	if(resp_len)
   \   00013E   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000141   7003         JNZ     $+5
   \   000143   02....       LJMP    ??EDP_PacketCmdResp_4 & 0xFFFF
    686          	{
    687          		//Ð´Èëreq³¤¶È-----------------------------------------------------------------
    688          		edpPacket->_data[edpPacket->_len++] = (uint8)(resp_len >> 24);
   \   000146   85..82       MOV     DPL,?V0 + 14
   \   000149   85..83       MOV     DPH,?V0 + 15
   \   00014C   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00014F   85....       MOV     ?V0 + 0,?V0 + 4
   \   000152   85....       MOV     ?V0 + 1,?V0 + 5
   \   000155   85....       MOV     ?V0 + 2,?V0 + 6
   \   000158   85....       MOV     ?V0 + 3,?V0 + 7
   \   00015B   7418         MOV     A,#0x18
   \   00015D   78..         MOV     R0,#?V0 + 0
   \   00015F   12....       LCALL   ?UL_SHR
   \   000162   C0..         PUSH    ?V0 + 0
   \   000164   85..82       MOV     DPL,?V0 + 12
   \   000167   85..83       MOV     DPH,?V0 + 13
   \   00016A   78..         MOV     R0,#?V0 + 0
   \   00016C   12....       LCALL   ?L_MOV_X
   \   00016F   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000172   D0E0         POP     A
   \   000174   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000177   12....       LCALL   ?L_MOV_X
   \   00017A   85..82       MOV     DPL,?V0 + 12
   \   00017D   85..83       MOV     DPH,?V0 + 13
   \   000180   78..         MOV     R0,#?V0 + 0
   \   000182   12....       LCALL   ?L_ADD_TO_X
    689          		edpPacket->_data[edpPacket->_len++] = (uint8)(resp_len >> 16);
   \   000185   85....       MOV     ?V0 + 0,?V0 + 4
   \   000188   85....       MOV     ?V0 + 1,?V0 + 5
   \   00018B   85....       MOV     ?V0 + 2,?V0 + 6
   \   00018E   85....       MOV     ?V0 + 3,?V0 + 7
   \   000191   7410         MOV     A,#0x10
   \   000193   78..         MOV     R0,#?V0 + 0
   \   000195   12....       LCALL   ?UL_SHR
   \   000198   C0..         PUSH    ?V0 + 0
   \   00019A   85..82       MOV     DPL,?V0 + 12
   \   00019D   85..83       MOV     DPH,?V0 + 13
   \   0001A0   78..         MOV     R0,#?V0 + 0
   \   0001A2   12....       LCALL   ?L_MOV_X
   \   0001A5   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001A8   D0E0         POP     A
   \   0001AA   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0001AD   12....       LCALL   ?L_MOV_X
   \   0001B0   85..82       MOV     DPL,?V0 + 12
   \   0001B3   85..83       MOV     DPH,?V0 + 13
   \   0001B6   78..         MOV     R0,#?V0 + 0
   \   0001B8   12....       LCALL   ?L_ADD_TO_X
    690          		edpPacket->_data[edpPacket->_len++] = (uint8)(resp_len >> 8);
   \   0001BB   85..82       MOV     DPL,?V0 + 12
   \   0001BE   85..83       MOV     DPH,?V0 + 13
   \   0001C1   78..         MOV     R0,#?V0 + 0
   \   0001C3   12....       LCALL   ?L_MOV_X
   \   0001C6   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0001C9   E5..         MOV     A,?V0 + 5
   \   0001CB   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0001CE   12....       LCALL   ?L_MOV_X
   \   0001D1   85..82       MOV     DPL,?V0 + 12
   \   0001D4   85..83       MOV     DPH,?V0 + 13
   \   0001D7   78..         MOV     R0,#?V0 + 0
   \   0001D9   12....       LCALL   ?L_ADD_TO_X
    691          		edpPacket->_data[edpPacket->_len++] = (uint8)(resp_len & 0x00FF);
   \   0001DC   85..82       MOV     DPL,?V0 + 12
   \   0001DF   85..83       MOV     DPH,?V0 + 13
   \   0001E2   78..         MOV     R0,#?V0 + 0
   \   0001E4   12....       LCALL   ?L_MOV_X
   \   0001E7   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001EA   E5..         MOV     A,?V0 + 4
   \   0001EC   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0001EF   12....       LCALL   ?L_MOV_X
   \   0001F2   85..82       MOV     DPL,?V0 + 12
   \   0001F5   85..83       MOV     DPH,?V0 + 13
   \   0001F8   78..         MOV     R0,#?V0 + 0
   \   0001FA   12....       LCALL   ?L_ADD_TO_X
    692          		
    693          		//Ð´Èëreq---------------------------------------------------------------------
    694          		memcpy((int8 *)edpPacket->_data + edpPacket->_len, resp, resp_len);
   \   0001FD                ; Setup parameters for call to function memcpy
   \   0001FD   78..         MOV     R0,#?V0 + 4
   \   0001FF   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000202   741E         MOV     A,#0x1e
   \   000204   12....       LCALL   ?XSTACK_DISP0_8
   \   000207   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00020A   12....       LCALL   ?L_MOV_X
   \   00020D   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000210   7404         MOV     A,#0x4
   \   000212   12....       LCALL   ?DEALLOC_XSTACK8
    695          		
    696          		edpPacket->_len += resp_len;
   \   000215   85..82       MOV     DPL,?V0 + 12
   \   000218   85..83       MOV     DPH,?V0 + 13
   \   00021B   78..         MOV     R0,#?V0 + 4
   \   00021D   12....       LCALL   ?L_ADD_TO_X
    697          	}
    698          
    699          	return 0;
   \                     ??EDP_PacketCmdResp_4:
   \   000220   7900         MOV     R1,#0x0
   \                     ??EDP_PacketCmdResp_3:
   \   000222   7402         MOV     A,#0x2
   \   000224   02....       LJMP    ??Subroutine70_0 & 0xFFFF
    700          
    701          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EA           MOV     A,R2
   \   000001   25..         ADD     A,?V0 + 0
   \   000003   FA           MOV     R2,A
   \   000004   EB           MOV     A,R3
   \   000005   35..         ADDC    A,?V0 + 1
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??memcpy?relay
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   85..82       MOV     DPL,?V0 + 12
   \   000008   85..83       MOV     DPH,?V0 + 13
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   22           RET
    702          
    703          //==========================================================
    704          //	º¯ÊýÃû³Æ£º	EDP_PacketPing
    705          //
    706          //	º¯Êý¹¦ÄÜ£º	ÐÄÌøÇëÇó×é°ü
    707          //
    708          //	Èë¿Ú²ÎÊý£º	edpPacket£º°üÖ¸Õë
    709          //
    710          //	·µ»Ø²ÎÊý£º	0-³É¹¦		1-Ê§°Ü
    711          //
    712          //	ËµÃ÷£º		
    713          //==========================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    714          uint1 EDP_PacketPing()
   \                     EDP_PacketPing:
    715          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    716              EDP_PACKET_STRUCTURE edpPacket = {NULL, 0, 0, 0};   //¶¨ÒåÒ»¸ö½á¹¹Ìå±äÁ¿   ¹©ÐÄÌø°ü×°ÔØÊý¾ÝÓÃ
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {(uint8 *)0, 0L, 0L, 0}>` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {(uint8 *)0, 0L, 0L, 0}>` & 0xff
   \   00001A   740B         MOV     A,#0xb
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    717          
    718          
    719              EDP_NewBuffer(&edpPacket, 2);
   \   00001F                ; Setup parameters for call to function EDP_NewBuffer
   \   00001F   90....       MOV     DPTR,#__Constant_2
   \   000022   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
    720              if(edpPacket._data == NULL)
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00003D   7004         JNZ     ??EDP_PacketPing_0
    721              	return 1;
   \   00003F   7901         MOV     R1,#0x1
   \   000041   806F         SJMP    ??EDP_PacketPing_1
    722          
    723              //Byte0£ºPINGREQÏûÏ¢------------------------------------------------------------
    724              edpPacket._data[edpPacket._len++] = PINGREQ;    //×°ÔØC0
   \                     ??EDP_PacketPing_0:
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?L_MOV_X
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   12....       LCALL   ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000056   74C0         MOV     A,#-0x40
   \   000058   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00005B   12....       LCALL   ?L_MOV_X
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?L_ADD_TO_X
    725          
    726              //Byte1£º0----------------------------------------------------------------------
    727              edpPacket._data[edpPacket._len++] = 0;          //×°ÔØ00
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?L_MOV_X
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   12....       LCALL   ??Subroutine69_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00007B   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00007E   12....       LCALL   ?L_MOV_X
   \   000081   7402         MOV     A,#0x2
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?L_ADD_TO_X
    728          
    729              ESP8266_SendData(edpPacket._data, edpPacket._len);	  //·¢ËÍÐÄÌø°ü 
                     ^
Warning[Pe223]: function "ESP8266_SendData" declared implicitly
   \   00008B                ; Setup parameters for call to function ESP8266_SendData
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00009B   12....       LCALL   ??ESP8266_SendData?relay
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    730          
    731              EDP_DeleteBuffer(&edpPacket);
   \   0000A3                ; Setup parameters for call to function EDP_DeleteBuffer
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   AA82         MOV     R2,DPL
   \   0000AB   AB83         MOV     R3,DPH
   \   0000AD   12....       LCALL   ??EDP_DeleteBuffer?relay
    732          	return 0;
   \   0000B0   7900         MOV     R1,#0x0
   \                     ??EDP_PacketPing_1:
   \   0000B2   740B         MOV     A,#0xb
   \   0000B4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B7   7F04         MOV     R7,#0x4
   \   0000B9   02....       LJMP    ?BANKED_LEAVE_XDATA
    733          
    734          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_NewBuffer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_NewBuffer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_DeleteBuffer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_DeleteBuffer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_UnPacketRecv?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_UnPacketRecv

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_PacketConnect1?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_PacketConnect1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_PacketConnect2?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_PacketConnect2

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_UnPacketConnectRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_UnPacketConnectRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??WriteRemainlen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WriteRemainlen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadRemainlen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadRemainlen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_PacketSaveData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_PacketSaveData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_PacketPushData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_PacketPushData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_UnPacketPushData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_UnPacketPushData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_UnPacketCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_UnPacketCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_PacketCmdResp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_PacketCmdResp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??EDP_PacketPing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    EDP_PacketPing

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EDP">`:
   \   000000   45445000     DB "EDP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(uint8 *)0, 0L, 0L, 0}>`:
   \   000000   0000         DW 0H
   \   000002   00000000     DD 0
   \   000006   00000000     DD 0
   \   00000A   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_38:
   \   000000   38000000     DD 56

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2:
   \   000000   02000000     DD 2

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3:
   \   000000   03000000     DD 3

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5:
   \   000000   05000000     DD 5

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffffffff:
   \   000000   FFFFFFFF     DD -1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_6:
   \   000000   06000000     DD 6

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     EDP_DeleteBuffer           0      0     32
       -> osal_mem_free         0      0     18
     EDP_NewBuffer              0      0     53
       -> osal_mem_alloc        0      0     40
     EDP_PacketCmdResp          1      0     38
       -> EDP_NewBuffer         0      0     60
       -> WriteRemainlen        0      0     60
       -> memcpy                0      0     56
       -> memcpy                0      0     60
     EDP_PacketConnect1         1      0     30
       -> strlen                0      0     44
       -> strlen                0      0     44
       -> EDP_NewBuffer         0      0     52
       -> strncat               0      0     48
       -> strncat               0      0     48
       -> strncat               0      0     48
     EDP_PacketConnect2         1      0     30
       -> strlen                0      0     44
       -> strlen                0      0     44
       -> EDP_NewBuffer         0      0     52
       -> strncat               0      0     48
       -> strncat               0      0     48
       -> strncat               0      0     48
     EDP_PacketPing             2      0     27
       -> EDP_NewBuffer         0      0     54
       -> ESP8266_SendData      0      0     54
       -> EDP_DeleteBuffer      0      0     46
     EDP_PacketPushData         1      0     39
       -> strlen                0      0     58
       -> strlen                0      0     58
       -> strlen                0      0     58
       -> EDP_NewBuffer         0      0     66
       -> WriteRemainlen        0      0     66
     EDP_PacketSaveData         1      0     30
       -> strlen                0      0     44
       -> EDP_NewBuffer         0      0     52
       -> strlen                0      0     44
       -> EDP_NewBuffer         0      0     52
       -> strlen                0      0     44
       -> WriteRemainlen        0      0     52
       -> strncat               0      0     48
       -> strlen                0      0     44
       -> WriteRemainlen        0      0     52
       -> strlen                0      0     44
     EDP_UnPacketCmd            0      0     38
       -> ReadRemainlen         0      0     60
       -> osal_mem_alloc        0      0     56
       -> memset                0      0     60
       -> memcpy                0      0     60
       -> osal_mem_alloc        0      0     56
       -> osal_mem_free         0      0     56
       -> memset                0      0     64
       -> memcpy                0      0     64
     EDP_UnPacketConnectRsp     2      0      0
     EDP_UnPacketPushData       0      0     36
       -> ReadRemainlen         0      0     60
       -> osal_mem_alloc        0      0     56
       -> memset                0      0     60
       -> memcpy                0      0     60
       -> osal_mem_alloc        0      0     56
       -> osal_mem_free         0      0     56
       -> memset                0      0     64
       -> memcpy                0      0     64
     EDP_UnPacketRecv           2      0      0
     ReadRemainlen              0      0     50
     WriteRemainlen             1      0     51


   Segment part sizes:

     Function/Label                      Bytes
     --------------                      -----
     EDP_NewBuffer                        193
     ?Subroutine0                           5
     ?Subroutine14                         18
     ?Subroutine50                          7
     ?Subroutine54                         13
     ?Subroutine36                          4
     ??Subroutine71_0                       6
     ?Subroutine4                           4
     ??Subroutine77_0                       8
     EDP_DeleteBuffer                     101
     ??Subroutine72_0                       6
     ??Subroutine76_0                       4
     EDP_UnPacketRecv                       8
     ?Subroutine1                           9
     EDP_PacketConnect1                   348
     ?Subroutine2                           5
     ?Subroutine21                          4
     ??Subroutine63_0                       4
     ?Subroutine44                          6
     ?Subroutine35                          9
     ??Subroutine64_0                       4
     ??Subroutine65_0                       4
     ?Subroutine31                         10
     ?Subroutine22                          9
     ??Subroutine66_0                      15
     ?Subroutine16                          4
     ?Subroutine52                          9
     ?Subroutine12                         11
     ??Subroutine67_0                       7
     ?Subroutine59                          9
     ?Subroutine11                         16
     ?Subroutine10                         26
     ?Subroutine9                          19
     ?Subroutine8                          23
     ?Subroutine53                         11
     ?Subroutine7                          15
     ?Subroutine51                          7
     ?Subroutine5                          22
     ?Subroutine49                          5
     ?Subroutine62                         16
     ?Subroutine60                          4
     ??Subroutine68_0                       5
     ?Subroutine55                          4
     ??Subroutine73_0                       2
     ??Subroutine74_0                       7
     ?Subroutine39                          4
     ??Subroutine78_0                       6
     EDP_PacketConnect2                   391
     ?Subroutine32                          4
     EDP_UnPacketConnectRsp                14
     WriteRemainlen                       123
     ReadRemainlen                        128
     ?Subroutine48                          4
     ?Subroutine61                         12
     ?Subroutine43                          9
     ?Subroutine33                          4
     EDP_PacketSaveData                   831
     ?Subroutine45                          4
     ?Subroutine58                         11
     ?Subroutine40                         12
     ?Subroutine38                         18
     ?Subroutine27                         13
     ?Subroutine13                         19
     ?Subroutine6                          10
     ?Subroutine37                         11
     ?Subroutine57                          6
     ??Subroutine75_0                       7
     EDP_PacketPushData                   479
     ?Subroutine25                         12
     ?Subroutine17                          7
     ?Subroutine15                          6
     ??Subroutine69_0                       4
     ??Subroutine70_0                       8
     ?Subroutine24                          8
     ?Subroutine47                          9
     ?Subroutine46                         11
     ?Subroutine34                          1
     ?Subroutine19                          6
     ?Subroutine18                         18
     ?Subroutine56                         18
     ?Subroutine3                           2
     EDP_UnPacketPushData                 433
     ?Subroutine42                          7
     ?Subroutine29                          9
     ?Subroutine28                          9
     ?Subroutine26                          9
     ?Subroutine30                          6
     EDP_UnPacketCmd                      533
     ?Subroutine20                          7
     EDP_PacketCmdResp                    551
     ?Subroutine41                         12
     ?Subroutine23                         14
     EDP_PacketPing                       188
     ??EDP_NewBuffer?relay                  6
     ??EDP_DeleteBuffer?relay               6
     ??EDP_UnPacketRecv?relay               6
     ??EDP_PacketConnect1?relay             6
     ??EDP_PacketConnect2?relay             6
     ??EDP_UnPacketConnectRsp?relay         6
     ??WriteRemainlen?relay                 6
     ??ReadRemainlen?relay                  6
     ??EDP_PacketSaveData?relay             6
     ??EDP_PacketPushData?relay             6
     ??EDP_UnPacketPushData?relay           6
     ??EDP_UnPacketCmd?relay                6
     ??EDP_PacketCmdResp?relay              6
     ??EDP_PacketPing?relay                 6
     ?<Constant "EDP">                      4
     ?<Constant {(uint8 *)0, 0L, 0L, 0}>   11
     __Constant_0                           4
     __Constant_1                           4
     __Constant_38                          4
     __Constant_2                           4
     __Constant_3                           4
     __Constant_5                           4
     __Constant_ffffffff                    4
     __Constant_6                           4

 
 5 034 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
    47 bytes in segment XDATA_ROM_C
 
 5 118 bytes of CODE  memory
    15 bytes of CONST memory (+ 32 bytes shared)

Errors: none
Warnings: 15
