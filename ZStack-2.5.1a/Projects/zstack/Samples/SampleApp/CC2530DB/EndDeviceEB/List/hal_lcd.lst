###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               04/Sep/2021  12:32:39
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
#    Command line       =  
#        -f C:\Users\OY\AppData\Local\Temp\EW5C51.tmp
#        (C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC
#        -D LCD_SUPPORTED=DEBUG -lC
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        -lA
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFF1
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\List\hal_lcd.lst
#    Object file        =  
#        C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\EndDeviceEB\Obj\hal_lcd.r51
#
###############################################################################

C:\Users\OY\Desktop\ing\new\ZStack-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
      1          /****************************************************************************
      2          * Filename: hal_lcd.c
      3          * Author:  sz-yy.taobao.com
      4          * Description: OLED driver
      5          ****************************************************************************/
      6          #include "hal_types.h"
      7          #include "hal_lcd.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
      8          #include "OSAL.h"
      9          #include "OnBoard.h"
     10          #include "hal_assert.h"
     11          #include <string.h>
     12          
     13          #ifdef OLED_1306
     14          
     15          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
     16            #include "DebugTrace.h"
     17          #endif
     18          
     19          #define LCD_SCL P1_2       //SCLK  时钟 D0（SCLK）
     20          #define LCD_SDA P1_3       //SDA   D1（MOSI） 数据
     21          #define LCD_RST P1_7       //_RES  hardware reset   复位 
     22          #define LCD_DC  P0_0       //A0  H/L 命令数据选通端，H：数据，L:命令
     23          
     24          #define XLevelL            0x00
     25          #define XLevelH            0x10
     26          #define XLevel             ((XLevelH&0x0F)*16+XLevelL)
     27          #define Max_Column         128
     28          #define Max_Row            64
     29          #define Brightness         0xCF 
     30          #define X_WIDTH            128
     31          #define Y_WIDTH            64
     32          
     33          #define LCD_MAX_BUF        25
     34          #define HAL_LCD_MAX_CHARS  16   // Max number of chars on a single LCD line 
     35          
     36          //英文编码为0~127，所以大于127的中文
     37          #define IS_CHINESE(x)       (((unsigned char)(x))>(unsigned char)0x7f )
     38          

   \                                 In  segment XDATA_ROM_C, align 1
     39          const unsigned char F8X16[]=	  
   \                     F8X16:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   F8           DB 248
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   33           DB 51
   \   00001C   30           DB 48
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   10           DB 16
   \   000022   0C           DB 12
   \   000023   06           DB 6
   \   000024   10           DB 16
   \   000025   0C           DB 12
   \   000026   06           DB 6
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   40           DB 64
   \   000031   C0           DB 192
   \   000032   78           DB 120
   \   000033   40           DB 64
   \   000034   C0           DB 192
   \   000035   78           DB 120
   \   000036   40           DB 64
   \   000037   00           DB 0
   \   000038   04           DB 4
   \   000039   3F           DB 63
   \   00003A   04           DB 4
   \   00003B   04           DB 4
   \   00003C   3F           DB 63
   \   00003D   04           DB 4
   \   00003E   04           DB 4
   \   00003F   00           DB 0
   \   000040   00           DB 0
   \   000041   70           DB 112
   \   000042   88           DB 136
   \   000043   FC           DB 252
   \   000044   08           DB 8
   \   000045   30           DB 48
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   18           DB 24
   \   00004A   20           DB 32
   \   00004B   FF           DB 255
   \   00004C   21           DB 33
   \   00004D   1E           DB 30
   \   00004E   00           DB 0
   \   00004F   00           DB 0
   \   000050   F0           DB 240
   \   000051   08           DB 8
   \   000052   F0           DB 240
   \   000053   00           DB 0
   \   000054   E0           DB 224
   \   000055   18           DB 24
   \   000056   00           DB 0
   \   000057   00           DB 0
   \   000058   00           DB 0
   \   000059   21           DB 33
   \   00005A   1C           DB 28
   \   00005B   03           DB 3
   \   00005C   1E           DB 30
   \   00005D   21           DB 33
   \   00005E   1E           DB 30
   \   00005F   00           DB 0
   \   000060   00           DB 0
   \   000061   F0           DB 240
   \   000062   08           DB 8
   \   000063   88           DB 136
   \   000064   70           DB 112
   \   000065   00           DB 0
   \   000066   00           DB 0
   \   000067   00           DB 0
   \   000068   1E           DB 30
   \   000069   21           DB 33
   \   00006A   23           DB 35
   \   00006B   24           DB 36
   \   00006C   19           DB 25
   \   00006D   27           DB 39
   \   00006E   21           DB 33
   \   00006F   10           DB 16
   \   000070   10           DB 16
   \   000071   16           DB 22
   \   000072   0E           DB 14
   \   000073   00           DB 0
   \   000074   00           DB 0
   \   000075   00           DB 0
   \   000076   00           DB 0
   \   000077   00           DB 0
   \   000078   00           DB 0
   \   000079   00           DB 0
   \   00007A   00           DB 0
   \   00007B   00           DB 0
   \   00007C   00           DB 0
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0
   \   000080   00           DB 0
   \   000081   00           DB 0
   \   000082   00           DB 0
   \   000083   E0           DB 224
   \   000084   18           DB 24
   \   000085   04           DB 4
   \   000086   02           DB 2
   \   000087   00           DB 0
   \   000088   00           DB 0
   \   000089   00           DB 0
   \   00008A   00           DB 0
   \   00008B   07           DB 7
   \   00008C   18           DB 24
   \   00008D   20           DB 32
   \   00008E   40           DB 64
   \   00008F   00           DB 0
   \   000090   00           DB 0
   \   000091   02           DB 2
   \   000092   04           DB 4
   \   000093   18           DB 24
   \   000094   E0           DB 224
   \   000095   00           DB 0
   \   000096   00           DB 0
   \   000097   00           DB 0
   \   000098   00           DB 0
   \   000099   40           DB 64
   \   00009A   20           DB 32
   \   00009B   18           DB 24
   \   00009C   07           DB 7
   \   00009D   00           DB 0
   \   00009E   00           DB 0
   \   00009F   00           DB 0
   \   0000A0   40           DB 64
   \   0000A1   40           DB 64
   \   0000A2   80           DB 128
   \   0000A3   F0           DB 240
   \   0000A4   80           DB 128
   \   0000A5   40           DB 64
   \   0000A6   40           DB 64
   \   0000A7   00           DB 0
   \   0000A8   02           DB 2
   \   0000A9   02           DB 2
   \   0000AA   01           DB 1
   \   0000AB   0F           DB 15
   \   0000AC   01           DB 1
   \   0000AD   02           DB 2
   \   0000AE   02           DB 2
   \   0000AF   00           DB 0
   \   0000B0   00           DB 0
   \   0000B1   00           DB 0
   \   0000B2   00           DB 0
   \   0000B3   F0           DB 240
   \   0000B4   00           DB 0
   \   0000B5   00           DB 0
   \   0000B6   00           DB 0
   \   0000B7   00           DB 0
   \   0000B8   01           DB 1
   \   0000B9   01           DB 1
   \   0000BA   01           DB 1
   \   0000BB   1F           DB 31
   \   0000BC   01           DB 1
   \   0000BD   01           DB 1
   \   0000BE   01           DB 1
   \   0000BF   00           DB 0
   \   0000C0   00           DB 0
   \   0000C1   00           DB 0
   \   0000C2   00           DB 0
   \   0000C3   00           DB 0
   \   0000C4   00           DB 0
   \   0000C5   00           DB 0
   \   0000C6   00           DB 0
   \   0000C7   00           DB 0
   \   0000C8   80           DB 128
   \   0000C9   B0           DB 176
   \   0000CA   70           DB 112
   \   0000CB   00           DB 0
   \   0000CC   00           DB 0
   \   0000CD   00           DB 0
   \   0000CE   00           DB 0
   \   0000CF   00           DB 0
   \   0000D0   00           DB 0
   \   0000D1   00           DB 0
   \   0000D2   00           DB 0
   \   0000D3   00           DB 0
   \   0000D4   00           DB 0
   \   0000D5   00           DB 0
   \   0000D6   00           DB 0
   \   0000D7   00           DB 0
   \   0000D8   00           DB 0
   \   0000D9   01           DB 1
   \   0000DA   01           DB 1
   \   0000DB   01           DB 1
   \   0000DC   01           DB 1
   \   0000DD   01           DB 1
   \   0000DE   01           DB 1
   \   0000DF   01           DB 1
   \   0000E0   00           DB 0
   \   0000E1   00           DB 0
   \   0000E2   00           DB 0
   \   0000E3   00           DB 0
   \   0000E4   00           DB 0
   \   0000E5   00           DB 0
   \   0000E6   00           DB 0
   \   0000E7   00           DB 0
   \   0000E8   00           DB 0
   \   0000E9   30           DB 48
   \   0000EA   30           DB 48
   \   0000EB   00           DB 0
   \   0000EC   00           DB 0
   \   0000ED   00           DB 0
   \   0000EE   00           DB 0
   \   0000EF   00           DB 0
   \   0000F0   00           DB 0
   \   0000F1   00           DB 0
   \   0000F2   00           DB 0
   \   0000F3   00           DB 0
   \   0000F4   80           DB 128
   \   0000F5   60           DB 96
   \   0000F6   18           DB 24
   \   0000F7   04           DB 4
   \   0000F8   00           DB 0
   \   0000F9   60           DB 96
   \   0000FA   18           DB 24
   \   0000FB   06           DB 6
   \   0000FC   01           DB 1
   \   0000FD   00           DB 0
   \   0000FE   00           DB 0
   \   0000FF   00           DB 0
   \   000100   00           DB 0
   \   000101   E0           DB 224
   \   000102   10           DB 16
   \   000103   08           DB 8
   \   000104   08           DB 8
   \   000105   10           DB 16
   \   000106   E0           DB 224
   \   000107   00           DB 0
   \   000108   00           DB 0
   \   000109   0F           DB 15
   \   00010A   10           DB 16
   \   00010B   20           DB 32
   \   00010C   20           DB 32
   \   00010D   10           DB 16
   \   00010E   0F           DB 15
   \   00010F   00           DB 0
   \   000110   00           DB 0
   \   000111   10           DB 16
   \   000112   10           DB 16
   \   000113   F8           DB 248
   \   000114   00           DB 0
   \   000115   00           DB 0
   \   000116   00           DB 0
   \   000117   00           DB 0
   \   000118   00           DB 0
   \   000119   20           DB 32
   \   00011A   20           DB 32
   \   00011B   3F           DB 63
   \   00011C   20           DB 32
   \   00011D   20           DB 32
   \   00011E   00           DB 0
   \   00011F   00           DB 0
   \   000120   00           DB 0
   \   000121   70           DB 112
   \   000122   08           DB 8
   \   000123   08           DB 8
   \   000124   08           DB 8
   \   000125   88           DB 136
   \   000126   70           DB 112
   \   000127   00           DB 0
   \   000128   00           DB 0
   \   000129   30           DB 48
   \   00012A   28           DB 40
   \   00012B   24           DB 36
   \   00012C   22           DB 34
   \   00012D   21           DB 33
   \   00012E   30           DB 48
   \   00012F   00           DB 0
   \   000130   00           DB 0
   \   000131   30           DB 48
   \   000132   08           DB 8
   \   000133   88           DB 136
   \   000134   88           DB 136
   \   000135   48           DB 72
   \   000136   30           DB 48
   \   000137   00           DB 0
   \   000138   00           DB 0
   \   000139   18           DB 24
   \   00013A   20           DB 32
   \   00013B   20           DB 32
   \   00013C   20           DB 32
   \   00013D   11           DB 17
   \   00013E   0E           DB 14
   \   00013F   00           DB 0
   \   000140   00           DB 0
   \   000141   00           DB 0
   \   000142   C0           DB 192
   \   000143   20           DB 32
   \   000144   10           DB 16
   \   000145   F8           DB 248
   \   000146   00           DB 0
   \   000147   00           DB 0
   \   000148   00           DB 0
   \   000149   07           DB 7
   \   00014A   04           DB 4
   \   00014B   24           DB 36
   \   00014C   24           DB 36
   \   00014D   3F           DB 63
   \   00014E   24           DB 36
   \   00014F   00           DB 0
   \   000150   00           DB 0
   \   000151   F8           DB 248
   \   000152   08           DB 8
   \   000153   88           DB 136
   \   000154   88           DB 136
   \   000155   08           DB 8
   \   000156   08           DB 8
   \   000157   00           DB 0
   \   000158   00           DB 0
   \   000159   19           DB 25
   \   00015A   21           DB 33
   \   00015B   20           DB 32
   \   00015C   20           DB 32
   \   00015D   11           DB 17
   \   00015E   0E           DB 14
   \   00015F   00           DB 0
   \   000160   00           DB 0
   \   000161   E0           DB 224
   \   000162   10           DB 16
   \   000163   88           DB 136
   \   000164   88           DB 136
   \   000165   18           DB 24
   \   000166   00           DB 0
   \   000167   00           DB 0
   \   000168   00           DB 0
   \   000169   0F           DB 15
   \   00016A   11           DB 17
   \   00016B   20           DB 32
   \   00016C   20           DB 32
   \   00016D   11           DB 17
   \   00016E   0E           DB 14
   \   00016F   00           DB 0
   \   000170   00           DB 0
   \   000171   38           DB 56
   \   000172   08           DB 8
   \   000173   08           DB 8
   \   000174   C8           DB 200
   \   000175   38           DB 56
   \   000176   08           DB 8
   \   000177   00           DB 0
   \   000178   00           DB 0
   \   000179   00           DB 0
   \   00017A   00           DB 0
   \   00017B   3F           DB 63
   \   00017C   00           DB 0
   \   00017D   00           DB 0
   \   00017E   00           DB 0
   \   00017F   00           DB 0
   \   000180   00           DB 0
   \   000181   70           DB 112
   \   000182   88           DB 136
   \   000183   08           DB 8
   \   000184   08           DB 8
   \   000185   88           DB 136
   \   000186   70           DB 112
   \   000187   00           DB 0
   \   000188   00           DB 0
   \   000189   1C           DB 28
   \   00018A   22           DB 34
   \   00018B   21           DB 33
   \   00018C   21           DB 33
   \   00018D   22           DB 34
   \   00018E   1C           DB 28
   \   00018F   00           DB 0
   \   000190   00           DB 0
   \   000191   E0           DB 224
   \   000192   10           DB 16
   \   000193   08           DB 8
   \   000194   08           DB 8
   \   000195   10           DB 16
   \   000196   E0           DB 224
   \   000197   00           DB 0
   \   000198   00           DB 0
   \   000199   00           DB 0
   \   00019A   31           DB 49
   \   00019B   22           DB 34
   \   00019C   22           DB 34
   \   00019D   11           DB 17
   \   00019E   0F           DB 15
   \   00019F   00           DB 0
   \   0001A0   00           DB 0
   \   0001A1   00           DB 0
   \   0001A2   00           DB 0
   \   0001A3   C0           DB 192
   \   0001A4   C0           DB 192
   \   0001A5   00           DB 0
   \   0001A6   00           DB 0
   \   0001A7   00           DB 0
   \   0001A8   00           DB 0
   \   0001A9   00           DB 0
   \   0001AA   00           DB 0
   \   0001AB   30           DB 48
   \   0001AC   30           DB 48
   \   0001AD   00           DB 0
   \   0001AE   00           DB 0
   \   0001AF   00           DB 0
   \   0001B0   00           DB 0
   \   0001B1   00           DB 0
   \   0001B2   00           DB 0
   \   0001B3   80           DB 128
   \   0001B4   00           DB 0
   \   0001B5   00           DB 0
   \   0001B6   00           DB 0
   \   0001B7   00           DB 0
   \   0001B8   00           DB 0
   \   0001B9   00           DB 0
   \   0001BA   80           DB 128
   \   0001BB   60           DB 96
   \   0001BC   00           DB 0
   \   0001BD   00           DB 0
   \   0001BE   00           DB 0
   \   0001BF   00           DB 0
   \   0001C0   00           DB 0
   \   0001C1   00           DB 0
   \   0001C2   80           DB 128
   \   0001C3   40           DB 64
   \   0001C4   20           DB 32
   \   0001C5   10           DB 16
   \   0001C6   08           DB 8
   \   0001C7   00           DB 0
   \   0001C8   00           DB 0
   \   0001C9   01           DB 1
   \   0001CA   02           DB 2
   \   0001CB   04           DB 4
   \   0001CC   08           DB 8
   \   0001CD   10           DB 16
   \   0001CE   20           DB 32
   \   0001CF   00           DB 0
   \   0001D0   40           DB 64
   \   0001D1   40           DB 64
   \   0001D2   40           DB 64
   \   0001D3   40           DB 64
   \   0001D4   40           DB 64
   \   0001D5   40           DB 64
   \   0001D6   40           DB 64
   \   0001D7   00           DB 0
   \   0001D8   04           DB 4
   \   0001D9   04           DB 4
   \   0001DA   04           DB 4
   \   0001DB   04           DB 4
   \   0001DC   04           DB 4
   \   0001DD   04           DB 4
   \   0001DE   04           DB 4
   \   0001DF   00           DB 0
   \   0001E0   00           DB 0
   \   0001E1   08           DB 8
   \   0001E2   10           DB 16
   \   0001E3   20           DB 32
   \   0001E4   40           DB 64
   \   0001E5   80           DB 128
   \   0001E6   00           DB 0
   \   0001E7   00           DB 0
   \   0001E8   00           DB 0
   \   0001E9   20           DB 32
   \   0001EA   10           DB 16
   \   0001EB   08           DB 8
   \   0001EC   04           DB 4
   \   0001ED   02           DB 2
   \   0001EE   01           DB 1
   \   0001EF   00           DB 0
   \   0001F0   00           DB 0
   \   0001F1   70           DB 112
   \   0001F2   48           DB 72
   \   0001F3   08           DB 8
   \   0001F4   08           DB 8
   \   0001F5   08           DB 8
   \   0001F6   F0           DB 240
   \   0001F7   00           DB 0
   \   0001F8   00           DB 0
   \   0001F9   00           DB 0
   \   0001FA   00           DB 0
   \   0001FB   30           DB 48
   \   0001FC   36           DB 54
   \   0001FD   01           DB 1
   \   0001FE   00           DB 0
   \   0001FF   00           DB 0
   \   000200   C0           DB 192
   \   000201   30           DB 48
   \   000202   C8           DB 200
   \   000203   28           DB 40
   \   000204   E8           DB 232
   \   000205   10           DB 16
   \   000206   E0           DB 224
   \   000207   00           DB 0
   \   000208   07           DB 7
   \   000209   18           DB 24
   \   00020A   27           DB 39
   \   00020B   24           DB 36
   \   00020C   23           DB 35
   \   00020D   14           DB 20
   \   00020E   0B           DB 11
   \   00020F   00           DB 0
   \   000210   00           DB 0
   \   000211   00           DB 0
   \   000212   C0           DB 192
   \   000213   38           DB 56
   \   000214   E0           DB 224
   \   000215   00           DB 0
   \   000216   00           DB 0
   \   000217   00           DB 0
   \   000218   20           DB 32
   \   000219   3C           DB 60
   \   00021A   23           DB 35
   \   00021B   02           DB 2
   \   00021C   02           DB 2
   \   00021D   27           DB 39
   \   00021E   38           DB 56
   \   00021F   20           DB 32
   \   000220   08           DB 8
   \   000221   F8           DB 248
   \   000222   88           DB 136
   \   000223   88           DB 136
   \   000224   88           DB 136
   \   000225   70           DB 112
   \   000226   00           DB 0
   \   000227   00           DB 0
   \   000228   20           DB 32
   \   000229   3F           DB 63
   \   00022A   20           DB 32
   \   00022B   20           DB 32
   \   00022C   20           DB 32
   \   00022D   11           DB 17
   \   00022E   0E           DB 14
   \   00022F   00           DB 0
   \   000230   C0           DB 192
   \   000231   30           DB 48
   \   000232   08           DB 8
   \   000233   08           DB 8
   \   000234   08           DB 8
   \   000235   08           DB 8
   \   000236   38           DB 56
   \   000237   00           DB 0
   \   000238   07           DB 7
   \   000239   18           DB 24
   \   00023A   20           DB 32
   \   00023B   20           DB 32
   \   00023C   20           DB 32
   \   00023D   10           DB 16
   \   00023E   08           DB 8
   \   00023F   00           DB 0
   \   000240   08           DB 8
   \   000241   F8           DB 248
   \   000242   08           DB 8
   \   000243   08           DB 8
   \   000244   08           DB 8
   \   000245   10           DB 16
   \   000246   E0           DB 224
   \   000247   00           DB 0
   \   000248   20           DB 32
   \   000249   3F           DB 63
   \   00024A   20           DB 32
   \   00024B   20           DB 32
   \   00024C   20           DB 32
   \   00024D   10           DB 16
   \   00024E   0F           DB 15
   \   00024F   00           DB 0
   \   000250   08           DB 8
   \   000251   F8           DB 248
   \   000252   88           DB 136
   \   000253   88           DB 136
   \   000254   E8           DB 232
   \   000255   08           DB 8
   \   000256   10           DB 16
   \   000257   00           DB 0
   \   000258   20           DB 32
   \   000259   3F           DB 63
   \   00025A   20           DB 32
   \   00025B   20           DB 32
   \   00025C   23           DB 35
   \   00025D   20           DB 32
   \   00025E   18           DB 24
   \   00025F   00           DB 0
   \   000260   08           DB 8
   \   000261   F8           DB 248
   \   000262   88           DB 136
   \   000263   88           DB 136
   \   000264   E8           DB 232
   \   000265   08           DB 8
   \   000266   10           DB 16
   \   000267   00           DB 0
   \   000268   20           DB 32
   \   000269   3F           DB 63
   \   00026A   20           DB 32
   \   00026B   00           DB 0
   \   00026C   03           DB 3
   \   00026D   00           DB 0
   \   00026E   00           DB 0
   \   00026F   00           DB 0
   \   000270   C0           DB 192
   \   000271   30           DB 48
   \   000272   08           DB 8
   \   000273   08           DB 8
   \   000274   08           DB 8
   \   000275   38           DB 56
   \   000276   00           DB 0
   \   000277   00           DB 0
   \   000278   07           DB 7
   \   000279   18           DB 24
   \   00027A   20           DB 32
   \   00027B   20           DB 32
   \   00027C   22           DB 34
   \   00027D   1E           DB 30
   \   00027E   02           DB 2
   \   00027F   00           DB 0
   \   000280   08           DB 8
   \   000281   F8           DB 248
   \   000282   08           DB 8
   \   000283   00           DB 0
   \   000284   00           DB 0
   \   000285   08           DB 8
   \   000286   F8           DB 248
   \   000287   08           DB 8
   \   000288   20           DB 32
   \   000289   3F           DB 63
   \   00028A   21           DB 33
   \   00028B   01           DB 1
   \   00028C   01           DB 1
   \   00028D   21           DB 33
   \   00028E   3F           DB 63
   \   00028F   20           DB 32
   \   000290   00           DB 0
   \   000291   08           DB 8
   \   000292   08           DB 8
   \   000293   F8           DB 248
   \   000294   08           DB 8
   \   000295   08           DB 8
   \   000296   00           DB 0
   \   000297   00           DB 0
   \   000298   00           DB 0
   \   000299   20           DB 32
   \   00029A   20           DB 32
   \   00029B   3F           DB 63
   \   00029C   20           DB 32
   \   00029D   20           DB 32
   \   00029E   00           DB 0
   \   00029F   00           DB 0
   \   0002A0   00           DB 0
   \   0002A1   00           DB 0
   \   0002A2   08           DB 8
   \   0002A3   08           DB 8
   \   0002A4   F8           DB 248
   \   0002A5   08           DB 8
   \   0002A6   08           DB 8
   \   0002A7   00           DB 0
   \   0002A8   C0           DB 192
   \   0002A9   80           DB 128
   \   0002AA   80           DB 128
   \   0002AB   80           DB 128
   \   0002AC   7F           DB 127
   \   0002AD   00           DB 0
   \   0002AE   00           DB 0
   \   0002AF   00           DB 0
   \   0002B0   08           DB 8
   \   0002B1   F8           DB 248
   \   0002B2   88           DB 136
   \   0002B3   C0           DB 192
   \   0002B4   28           DB 40
   \   0002B5   18           DB 24
   \   0002B6   08           DB 8
   \   0002B7   00           DB 0
   \   0002B8   20           DB 32
   \   0002B9   3F           DB 63
   \   0002BA   20           DB 32
   \   0002BB   01           DB 1
   \   0002BC   26           DB 38
   \   0002BD   38           DB 56
   \   0002BE   20           DB 32
   \   0002BF   00           DB 0
   \   0002C0   08           DB 8
   \   0002C1   F8           DB 248
   \   0002C2   08           DB 8
   \   0002C3   00           DB 0
   \   0002C4   00           DB 0
   \   0002C5   00           DB 0
   \   0002C6   00           DB 0
   \   0002C7   00           DB 0
   \   0002C8   20           DB 32
   \   0002C9   3F           DB 63
   \   0002CA   20           DB 32
   \   0002CB   20           DB 32
   \   0002CC   20           DB 32
   \   0002CD   20           DB 32
   \   0002CE   30           DB 48
   \   0002CF   00           DB 0
   \   0002D0   08           DB 8
   \   0002D1   F8           DB 248
   \   0002D2   F8           DB 248
   \   0002D3   00           DB 0
   \   0002D4   F8           DB 248
   \   0002D5   F8           DB 248
   \   0002D6   08           DB 8
   \   0002D7   00           DB 0
   \   0002D8   20           DB 32
   \   0002D9   3F           DB 63
   \   0002DA   00           DB 0
   \   0002DB   3F           DB 63
   \   0002DC   00           DB 0
   \   0002DD   3F           DB 63
   \   0002DE   20           DB 32
   \   0002DF   00           DB 0
   \   0002E0   08           DB 8
   \   0002E1   F8           DB 248
   \   0002E2   30           DB 48
   \   0002E3   C0           DB 192
   \   0002E4   00           DB 0
   \   0002E5   08           DB 8
   \   0002E6   F8           DB 248
   \   0002E7   08           DB 8
   \   0002E8   20           DB 32
   \   0002E9   3F           DB 63
   \   0002EA   20           DB 32
   \   0002EB   00           DB 0
   \   0002EC   07           DB 7
   \   0002ED   18           DB 24
   \   0002EE   3F           DB 63
   \   0002EF   00           DB 0
   \   0002F0   E0           DB 224
   \   0002F1   10           DB 16
   \   0002F2   08           DB 8
   \   0002F3   08           DB 8
   \   0002F4   08           DB 8
   \   0002F5   10           DB 16
   \   0002F6   E0           DB 224
   \   0002F7   00           DB 0
   \   0002F8   0F           DB 15
   \   0002F9   10           DB 16
   \   0002FA   20           DB 32
   \   0002FB   20           DB 32
   \   0002FC   20           DB 32
   \   0002FD   10           DB 16
   \   0002FE   0F           DB 15
   \   0002FF   00           DB 0
   \   000300   08           DB 8
   \   000301   F8           DB 248
   \   000302   08           DB 8
   \   000303   08           DB 8
   \   000304   08           DB 8
   \   000305   08           DB 8
   \   000306   F0           DB 240
   \   000307   00           DB 0
   \   000308   20           DB 32
   \   000309   3F           DB 63
   \   00030A   21           DB 33
   \   00030B   01           DB 1
   \   00030C   01           DB 1
   \   00030D   01           DB 1
   \   00030E   00           DB 0
   \   00030F   00           DB 0
   \   000310   E0           DB 224
   \   000311   10           DB 16
   \   000312   08           DB 8
   \   000313   08           DB 8
   \   000314   08           DB 8
   \   000315   10           DB 16
   \   000316   E0           DB 224
   \   000317   00           DB 0
   \   000318   0F           DB 15
   \   000319   18           DB 24
   \   00031A   24           DB 36
   \   00031B   24           DB 36
   \   00031C   38           DB 56
   \   00031D   50           DB 80
   \   00031E   4F           DB 79
   \   00031F   00           DB 0
   \   000320   08           DB 8
   \   000321   F8           DB 248
   \   000322   88           DB 136
   \   000323   88           DB 136
   \   000324   88           DB 136
   \   000325   88           DB 136
   \   000326   70           DB 112
   \   000327   00           DB 0
   \   000328   20           DB 32
   \   000329   3F           DB 63
   \   00032A   20           DB 32
   \   00032B   00           DB 0
   \   00032C   03           DB 3
   \   00032D   0C           DB 12
   \   00032E   30           DB 48
   \   00032F   20           DB 32
   \   000330   00           DB 0
   \   000331   70           DB 112
   \   000332   88           DB 136
   \   000333   08           DB 8
   \   000334   08           DB 8
   \   000335   08           DB 8
   \   000336   38           DB 56
   \   000337   00           DB 0
   \   000338   00           DB 0
   \   000339   38           DB 56
   \   00033A   20           DB 32
   \   00033B   21           DB 33
   \   00033C   21           DB 33
   \   00033D   22           DB 34
   \   00033E   1C           DB 28
   \   00033F   00           DB 0
   \   000340   18           DB 24
   \   000341   08           DB 8
   \   000342   08           DB 8
   \   000343   F8           DB 248
   \   000344   08           DB 8
   \   000345   08           DB 8
   \   000346   18           DB 24
   \   000347   00           DB 0
   \   000348   00           DB 0
   \   000349   00           DB 0
   \   00034A   20           DB 32
   \   00034B   3F           DB 63
   \   00034C   20           DB 32
   \   00034D   00           DB 0
   \   00034E   00           DB 0
   \   00034F   00           DB 0
   \   000350   08           DB 8
   \   000351   F8           DB 248
   \   000352   08           DB 8
   \   000353   00           DB 0
   \   000354   00           DB 0
   \   000355   08           DB 8
   \   000356   F8           DB 248
   \   000357   08           DB 8
   \   000358   00           DB 0
   \   000359   1F           DB 31
   \   00035A   20           DB 32
   \   00035B   20           DB 32
   \   00035C   20           DB 32
   \   00035D   20           DB 32
   \   00035E   1F           DB 31
   \   00035F   00           DB 0
   \   000360   08           DB 8
   \   000361   78           DB 120
   \   000362   88           DB 136
   \   000363   00           DB 0
   \   000364   00           DB 0
   \   000365   C8           DB 200
   \   000366   38           DB 56
   \   000367   08           DB 8
   \   000368   00           DB 0
   \   000369   00           DB 0
   \   00036A   07           DB 7
   \   00036B   38           DB 56
   \   00036C   0E           DB 14
   \   00036D   01           DB 1
   \   00036E   00           DB 0
   \   00036F   00           DB 0
   \   000370   F8           DB 248
   \   000371   08           DB 8
   \   000372   00           DB 0
   \   000373   F8           DB 248
   \   000374   00           DB 0
   \   000375   08           DB 8
   \   000376   F8           DB 248
   \   000377   00           DB 0
   \   000378   03           DB 3
   \   000379   3C           DB 60
   \   00037A   07           DB 7
   \   00037B   00           DB 0
   \   00037C   07           DB 7
   \   00037D   3C           DB 60
   \   00037E   03           DB 3
   \   00037F   00           DB 0
   \   000380   08           DB 8
   \   000381   18           DB 24
   \   000382   68           DB 104
   \   000383   80           DB 128
   \   000384   80           DB 128
   \   000385   68           DB 104
   \   000386   18           DB 24
   \   000387   08           DB 8
   \   000388   20           DB 32
   \   000389   30           DB 48
   \   00038A   2C           DB 44
   \   00038B   03           DB 3
   \   00038C   03           DB 3
   \   00038D   2C           DB 44
   \   00038E   30           DB 48
   \   00038F   20           DB 32
   \   000390   08           DB 8
   \   000391   38           DB 56
   \   000392   C8           DB 200
   \   000393   00           DB 0
   \   000394   C8           DB 200
   \   000395   38           DB 56
   \   000396   08           DB 8
   \   000397   00           DB 0
   \   000398   00           DB 0
   \   000399   00           DB 0
   \   00039A   20           DB 32
   \   00039B   3F           DB 63
   \   00039C   20           DB 32
   \   00039D   00           DB 0
   \   00039E   00           DB 0
   \   00039F   00           DB 0
   \   0003A0   10           DB 16
   \   0003A1   08           DB 8
   \   0003A2   08           DB 8
   \   0003A3   08           DB 8
   \   0003A4   C8           DB 200
   \   0003A5   38           DB 56
   \   0003A6   08           DB 8
   \   0003A7   00           DB 0
   \   0003A8   20           DB 32
   \   0003A9   38           DB 56
   \   0003AA   26           DB 38
   \   0003AB   21           DB 33
   \   0003AC   20           DB 32
   \   0003AD   20           DB 32
   \   0003AE   18           DB 24
   \   0003AF   00           DB 0
   \   0003B0   00           DB 0
   \   0003B1   00           DB 0
   \   0003B2   00           DB 0
   \   0003B3   FE           DB 254
   \   0003B4   02           DB 2
   \   0003B5   02           DB 2
   \   0003B6   02           DB 2
   \   0003B7   00           DB 0
   \   0003B8   00           DB 0
   \   0003B9   00           DB 0
   \   0003BA   00           DB 0
   \   0003BB   7F           DB 127
   \   0003BC   40           DB 64
   \   0003BD   40           DB 64
   \   0003BE   40           DB 64
   \   0003BF   00           DB 0
   \   0003C0   00           DB 0
   \   0003C1   0C           DB 12
   \   0003C2   30           DB 48
   \   0003C3   C0           DB 192
   \   0003C4   00           DB 0
   \   0003C5   00           DB 0
   \   0003C6   00           DB 0
   \   0003C7   00           DB 0
   \   0003C8   00           DB 0
   \   0003C9   00           DB 0
   \   0003CA   00           DB 0
   \   0003CB   01           DB 1
   \   0003CC   06           DB 6
   \   0003CD   38           DB 56
   \   0003CE   C0           DB 192
   \   0003CF   00           DB 0
   \   0003D0   00           DB 0
   \   0003D1   02           DB 2
   \   0003D2   02           DB 2
   \   0003D3   02           DB 2
   \   0003D4   FE           DB 254
   \   0003D5   00           DB 0
   \   0003D6   00           DB 0
   \   0003D7   00           DB 0
   \   0003D8   00           DB 0
   \   0003D9   40           DB 64
   \   0003DA   40           DB 64
   \   0003DB   40           DB 64
   \   0003DC   7F           DB 127
   \   0003DD   00           DB 0
   \   0003DE   00           DB 0
   \   0003DF   00           DB 0
   \   0003E0   00           DB 0
   \   0003E1   00           DB 0
   \   0003E2   04           DB 4
   \   0003E3   02           DB 2
   \   0003E4   02           DB 2
   \   0003E5   02           DB 2
   \   0003E6   04           DB 4
   \   0003E7   00           DB 0
   \   0003E8   00           DB 0
   \   0003E9   00           DB 0
   \   0003EA   00           DB 0
   \   0003EB   00           DB 0
   \   0003EC   00           DB 0
   \   0003ED   00           DB 0
   \   0003EE   00           DB 0
   \   0003EF   00           DB 0
   \   0003F0   00           DB 0
   \   0003F1   00           DB 0
   \   0003F2   00           DB 0
   \   0003F3   00           DB 0
   \   0003F4   00           DB 0
   \   0003F5   00           DB 0
   \   0003F6   00           DB 0
   \   0003F7   00           DB 0
   \   0003F8   80           DB 128
   \   0003F9   80           DB 128
   \   0003FA   80           DB 128
   \   0003FB   80           DB 128
   \   0003FC   80           DB 128
   \   0003FD   80           DB 128
   \   0003FE   80           DB 128
   \   0003FF   80           DB 128
   \   000400   00           DB 0
   \   000401   02           DB 2
   \   000402   02           DB 2
   \   000403   04           DB 4
   \   000404   00           DB 0
   \   000405   00           DB 0
   \   000406   00           DB 0
   \   000407   00           DB 0
   \   000408   00           DB 0
   \   000409   00           DB 0
   \   00040A   00           DB 0
   \   00040B   00           DB 0
   \   00040C   00           DB 0
   \   00040D   00           DB 0
   \   00040E   00           DB 0
   \   00040F   00           DB 0
   \   000410   00           DB 0
   \   000411   00           DB 0
   \   000412   80           DB 128
   \   000413   80           DB 128
   \   000414   80           DB 128
   \   000415   80           DB 128
   \   000416   00           DB 0
   \   000417   00           DB 0
   \   000418   00           DB 0
   \   000419   19           DB 25
   \   00041A   24           DB 36
   \   00041B   22           DB 34
   \   00041C   22           DB 34
   \   00041D   22           DB 34
   \   00041E   3F           DB 63
   \   00041F   20           DB 32
   \   000420   08           DB 8
   \   000421   F8           DB 248
   \   000422   00           DB 0
   \   000423   80           DB 128
   \   000424   80           DB 128
   \   000425   00           DB 0
   \   000426   00           DB 0
   \   000427   00           DB 0
   \   000428   00           DB 0
   \   000429   3F           DB 63
   \   00042A   11           DB 17
   \   00042B   20           DB 32
   \   00042C   20           DB 32
   \   00042D   11           DB 17
   \   00042E   0E           DB 14
   \   00042F   00           DB 0
   \   000430   00           DB 0
   \   000431   00           DB 0
   \   000432   00           DB 0
   \   000433   80           DB 128
   \   000434   80           DB 128
   \   000435   80           DB 128
   \   000436   00           DB 0
   \   000437   00           DB 0
   \   000438   00           DB 0
   \   000439   0E           DB 14
   \   00043A   11           DB 17
   \   00043B   20           DB 32
   \   00043C   20           DB 32
   \   00043D   20           DB 32
   \   00043E   11           DB 17
   \   00043F   00           DB 0
   \   000440   00           DB 0
   \   000441   00           DB 0
   \   000442   00           DB 0
   \   000443   80           DB 128
   \   000444   80           DB 128
   \   000445   88           DB 136
   \   000446   F8           DB 248
   \   000447   00           DB 0
   \   000448   00           DB 0
   \   000449   0E           DB 14
   \   00044A   11           DB 17
   \   00044B   20           DB 32
   \   00044C   20           DB 32
   \   00044D   10           DB 16
   \   00044E   3F           DB 63
   \   00044F   20           DB 32
   \   000450   00           DB 0
   \   000451   00           DB 0
   \   000452   80           DB 128
   \   000453   80           DB 128
   \   000454   80           DB 128
   \   000455   80           DB 128
   \   000456   00           DB 0
   \   000457   00           DB 0
   \   000458   00           DB 0
   \   000459   1F           DB 31
   \   00045A   22           DB 34
   \   00045B   22           DB 34
   \   00045C   22           DB 34
   \   00045D   22           DB 34
   \   00045E   13           DB 19
   \   00045F   00           DB 0
   \   000460   00           DB 0
   \   000461   80           DB 128
   \   000462   80           DB 128
   \   000463   F0           DB 240
   \   000464   88           DB 136
   \   000465   88           DB 136
   \   000466   88           DB 136
   \   000467   18           DB 24
   \   000468   00           DB 0
   \   000469   20           DB 32
   \   00046A   20           DB 32
   \   00046B   3F           DB 63
   \   00046C   20           DB 32
   \   00046D   20           DB 32
   \   00046E   00           DB 0
   \   00046F   00           DB 0
   \   000470   00           DB 0
   \   000471   00           DB 0
   \   000472   80           DB 128
   \   000473   80           DB 128
   \   000474   80           DB 128
   \   000475   80           DB 128
   \   000476   80           DB 128
   \   000477   00           DB 0
   \   000478   00           DB 0
   \   000479   6B           DB 107
   \   00047A   94           DB 148
   \   00047B   94           DB 148
   \   00047C   94           DB 148
   \   00047D   93           DB 147
   \   00047E   60           DB 96
   \   00047F   00           DB 0
   \   000480   08           DB 8
   \   000481   F8           DB 248
   \   000482   00           DB 0
   \   000483   80           DB 128
   \   000484   80           DB 128
   \   000485   80           DB 128
   \   000486   00           DB 0
   \   000487   00           DB 0
   \   000488   20           DB 32
   \   000489   3F           DB 63
   \   00048A   21           DB 33
   \   00048B   00           DB 0
   \   00048C   00           DB 0
   \   00048D   20           DB 32
   \   00048E   3F           DB 63
   \   00048F   20           DB 32
   \   000490   00           DB 0
   \   000491   80           DB 128
   \   000492   98           DB 152
   \   000493   98           DB 152
   \   000494   00           DB 0
   \   000495   00           DB 0
   \   000496   00           DB 0
   \   000497   00           DB 0
   \   000498   00           DB 0
   \   000499   20           DB 32
   \   00049A   20           DB 32
   \   00049B   3F           DB 63
   \   00049C   20           DB 32
   \   00049D   20           DB 32
   \   00049E   00           DB 0
   \   00049F   00           DB 0
   \   0004A0   00           DB 0
   \   0004A1   00           DB 0
   \   0004A2   00           DB 0
   \   0004A3   80           DB 128
   \   0004A4   98           DB 152
   \   0004A5   98           DB 152
   \   0004A6   00           DB 0
   \   0004A7   00           DB 0
   \   0004A8   00           DB 0
   \   0004A9   C0           DB 192
   \   0004AA   80           DB 128
   \   0004AB   80           DB 128
   \   0004AC   80           DB 128
   \   0004AD   7F           DB 127
   \   0004AE   00           DB 0
   \   0004AF   00           DB 0
   \   0004B0   08           DB 8
   \   0004B1   F8           DB 248
   \   0004B2   00           DB 0
   \   0004B3   00           DB 0
   \   0004B4   80           DB 128
   \   0004B5   80           DB 128
   \   0004B6   80           DB 128
   \   0004B7   00           DB 0
   \   0004B8   20           DB 32
   \   0004B9   3F           DB 63
   \   0004BA   24           DB 36
   \   0004BB   02           DB 2
   \   0004BC   2D           DB 45
   \   0004BD   30           DB 48
   \   0004BE   20           DB 32
   \   0004BF   00           DB 0
   \   0004C0   00           DB 0
   \   0004C1   08           DB 8
   \   0004C2   08           DB 8
   \   0004C3   F8           DB 248
   \   0004C4   00           DB 0
   \   0004C5   00           DB 0
   \   0004C6   00           DB 0
   \   0004C7   00           DB 0
   \   0004C8   00           DB 0
   \   0004C9   20           DB 32
   \   0004CA   20           DB 32
   \   0004CB   3F           DB 63
   \   0004CC   20           DB 32
   \   0004CD   20           DB 32
   \   0004CE   00           DB 0
   \   0004CF   00           DB 0
   \   0004D0   80           DB 128
   \   0004D1   80           DB 128
   \   0004D2   80           DB 128
   \   0004D3   80           DB 128
   \   0004D4   80           DB 128
   \   0004D5   80           DB 128
   \   0004D6   80           DB 128
   \   0004D7   00           DB 0
   \   0004D8   20           DB 32
   \   0004D9   3F           DB 63
   \   0004DA   20           DB 32
   \   0004DB   00           DB 0
   \   0004DC   3F           DB 63
   \   0004DD   20           DB 32
   \   0004DE   00           DB 0
   \   0004DF   3F           DB 63
   \   0004E0   80           DB 128
   \   0004E1   80           DB 128
   \   0004E2   00           DB 0
   \   0004E3   80           DB 128
   \   0004E4   80           DB 128
   \   0004E5   80           DB 128
   \   0004E6   00           DB 0
   \   0004E7   00           DB 0
   \   0004E8   20           DB 32
   \   0004E9   3F           DB 63
   \   0004EA   21           DB 33
   \   0004EB   00           DB 0
   \   0004EC   00           DB 0
   \   0004ED   20           DB 32
   \   0004EE   3F           DB 63
   \   0004EF   20           DB 32
   \   0004F0   00           DB 0
   \   0004F1   00           DB 0
   \   0004F2   80           DB 128
   \   0004F3   80           DB 128
   \   0004F4   80           DB 128
   \   0004F5   80           DB 128
   \   0004F6   00           DB 0
   \   0004F7   00           DB 0
   \   0004F8   00           DB 0
   \   0004F9   1F           DB 31
   \   0004FA   20           DB 32
   \   0004FB   20           DB 32
   \   0004FC   20           DB 32
   \   0004FD   20           DB 32
   \   0004FE   1F           DB 31
   \   0004FF   00           DB 0
   \   000500   80           DB 128
   \   000501   80           DB 128
   \   000502   00           DB 0
   \   000503   80           DB 128
   \   000504   80           DB 128
   \   000505   00           DB 0
   \   000506   00           DB 0
   \   000507   00           DB 0
   \   000508   80           DB 128
   \   000509   FF           DB 255
   \   00050A   A1           DB 161
   \   00050B   20           DB 32
   \   00050C   20           DB 32
   \   00050D   11           DB 17
   \   00050E   0E           DB 14
   \   00050F   00           DB 0
   \   000510   00           DB 0
   \   000511   00           DB 0
   \   000512   00           DB 0
   \   000513   80           DB 128
   \   000514   80           DB 128
   \   000515   80           DB 128
   \   000516   80           DB 128
   \   000517   00           DB 0
   \   000518   00           DB 0
   \   000519   0E           DB 14
   \   00051A   11           DB 17
   \   00051B   20           DB 32
   \   00051C   20           DB 32
   \   00051D   A0           DB 160
   \   00051E   FF           DB 255
   \   00051F   80           DB 128
   \   000520   80           DB 128
   \   000521   80           DB 128
   \   000522   80           DB 128
   \   000523   00           DB 0
   \   000524   80           DB 128
   \   000525   80           DB 128
   \   000526   80           DB 128
   \   000527   00           DB 0
   \   000528   20           DB 32
   \   000529   20           DB 32
   \   00052A   3F           DB 63
   \   00052B   21           DB 33
   \   00052C   20           DB 32
   \   00052D   00           DB 0
   \   00052E   01           DB 1
   \   00052F   00           DB 0
   \   000530   00           DB 0
   \   000531   00           DB 0
   \   000532   80           DB 128
   \   000533   80           DB 128
   \   000534   80           DB 128
   \   000535   80           DB 128
   \   000536   80           DB 128
   \   000537   00           DB 0
   \   000538   00           DB 0
   \   000539   33           DB 51
   \   00053A   24           DB 36
   \   00053B   24           DB 36
   \   00053C   24           DB 36
   \   00053D   24           DB 36
   \   00053E   19           DB 25
   \   00053F   00           DB 0
   \   000540   00           DB 0
   \   000541   80           DB 128
   \   000542   80           DB 128
   \   000543   E0           DB 224
   \   000544   80           DB 128
   \   000545   80           DB 128
   \   000546   00           DB 0
   \   000547   00           DB 0
   \   000548   00           DB 0
   \   000549   00           DB 0
   \   00054A   00           DB 0
   \   00054B   1F           DB 31
   \   00054C   20           DB 32
   \   00054D   20           DB 32
   \   00054E   00           DB 0
   \   00054F   00           DB 0
   \   000550   80           DB 128
   \   000551   80           DB 128
   \   000552   00           DB 0
   \   000553   00           DB 0
   \   000554   00           DB 0
   \   000555   80           DB 128
   \   000556   80           DB 128
   \   000557   00           DB 0
   \   000558   00           DB 0
   \   000559   1F           DB 31
   \   00055A   20           DB 32
   \   00055B   20           DB 32
   \   00055C   20           DB 32
   \   00055D   10           DB 16
   \   00055E   3F           DB 63
   \   00055F   20           DB 32
   \   000560   80           DB 128
   \   000561   80           DB 128
   \   000562   80           DB 128
   \   000563   00           DB 0
   \   000564   00           DB 0
   \   000565   80           DB 128
   \   000566   80           DB 128
   \   000567   80           DB 128
   \   000568   00           DB 0
   \   000569   01           DB 1
   \   00056A   0E           DB 14
   \   00056B   30           DB 48
   \   00056C   08           DB 8
   \   00056D   06           DB 6
   \   00056E   01           DB 1
   \   00056F   00           DB 0
   \   000570   80           DB 128
   \   000571   80           DB 128
   \   000572   00           DB 0
   \   000573   80           DB 128
   \   000574   00           DB 0
   \   000575   80           DB 128
   \   000576   80           DB 128
   \   000577   80           DB 128
   \   000578   0F           DB 15
   \   000579   30           DB 48
   \   00057A   0C           DB 12
   \   00057B   03           DB 3
   \   00057C   0C           DB 12
   \   00057D   30           DB 48
   \   00057E   0F           DB 15
   \   00057F   00           DB 0
   \   000580   00           DB 0
   \   000581   80           DB 128
   \   000582   80           DB 128
   \   000583   00           DB 0
   \   000584   80           DB 128
   \   000585   80           DB 128
   \   000586   80           DB 128
   \   000587   00           DB 0
   \   000588   00           DB 0
   \   000589   20           DB 32
   \   00058A   31           DB 49
   \   00058B   2E           DB 46
   \   00058C   0E           DB 14
   \   00058D   31           DB 49
   \   00058E   20           DB 32
   \   00058F   00           DB 0
   \   000590   80           DB 128
   \   000591   80           DB 128
   \   000592   80           DB 128
   \   000593   00           DB 0
   \   000594   00           DB 0
   \   000595   80           DB 128
   \   000596   80           DB 128
   \   000597   80           DB 128
   \   000598   80           DB 128
   \   000599   81           DB 129
   \   00059A   8E           DB 142
   \   00059B   70           DB 112
   \   00059C   18           DB 24
   \   00059D   06           DB 6
   \   00059E   01           DB 1
   \   00059F   00           DB 0
   \   0005A0   00           DB 0
   \   0005A1   80           DB 128
   \   0005A2   80           DB 128
   \   0005A3   80           DB 128
   \   0005A4   80           DB 128
   \   0005A5   80           DB 128
   \   0005A6   80           DB 128
   \   0005A7   00           DB 0
   \   0005A8   00           DB 0
   \   0005A9   21           DB 33
   \   0005AA   30           DB 48
   \   0005AB   2C           DB 44
   \   0005AC   22           DB 34
   \   0005AD   21           DB 33
   \   0005AE   30           DB 48
   \   0005AF   00           DB 0
   \   0005B0   00           DB 0
   \   0005B1   00           DB 0
   \   0005B2   00           DB 0
   \   0005B3   00           DB 0
   \   0005B4   80           DB 128
   \   0005B5   7C           DB 124
   \   0005B6   02           DB 2
   \   0005B7   02           DB 2
   \   0005B8   00           DB 0
   \   0005B9   00           DB 0
   \   0005BA   00           DB 0
   \   0005BB   00           DB 0
   \   0005BC   00           DB 0
   \   0005BD   3F           DB 63
   \   0005BE   40           DB 64
   \   0005BF   40           DB 64
   \   0005C0   00           DB 0
   \   0005C1   00           DB 0
   \   0005C2   00           DB 0
   \   0005C3   00           DB 0
   \   0005C4   FF           DB 255
   \   0005C5   00           DB 0
   \   0005C6   00           DB 0
   \   0005C7   00           DB 0
   \   0005C8   00           DB 0
   \   0005C9   00           DB 0
   \   0005CA   00           DB 0
   \   0005CB   00           DB 0
   \   0005CC   FF           DB 255
   \   0005CD   00           DB 0
   \   0005CE   00           DB 0
   \   0005CF   00           DB 0
   \   0005D0   00           DB 0
   \   0005D1   02           DB 2
   \   0005D2   02           DB 2
   \   0005D3   7C           DB 124
   \   0005D4   80           DB 128
   \   0005D5   00           DB 0
   \   0005D6   00           DB 0
   \   0005D7   00           DB 0
   \   0005D8   00           DB 0
   \   0005D9   40           DB 64
   \   0005DA   40           DB 64
   \   0005DB   3F           DB 63
   \   0005DC   00           DB 0
   \   0005DD   00           DB 0
   \   0005DE   00           DB 0
   \   0005DF   00           DB 0
   \   0005E0   00           DB 0
   \   0005E1   06           DB 6
   \   0005E2   01           DB 1
   \   0005E3   01           DB 1
   \   0005E4   02           DB 2
   \   0005E5   02           DB 2
   \   0005E6   04           DB 4
   \   0005E7   04           DB 4
   \   0005E8   00           DB 0
   \   0005E9   00           DB 0
   \   0005EA   00           DB 0
   \   0005EB   00           DB 0
   \   0005EC   00           DB 0
   \   0005ED   00           DB 0
   \   0005EE   00           DB 0
   \   0005EF   00           DB 0
     40          {
     41            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
     42            0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//! 1
     43            0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//" 2
     44            0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//# 3
     45            0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$ 4
     46            0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//% 5
     47            0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//& 6
     48            0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//' 7
     49            0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//( 8
     50            0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//) 9
     51            0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//* 10
     52            0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+ 11
     53            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//, 12
     54            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//- 13
     55            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//. 14
     56            0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,/// 15
     57            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//0 16
     58            0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//1 17
     59            0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//2 18
     60            0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//3 19
     61            0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//4 20
     62            0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//5 21
     63            0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//6 22
     64            0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//7 23
     65            0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//8 24
     66            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//9 25
     67            0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//: 26
     68            0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//; 27
     69            0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//< 28
     70            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//= 29
     71            0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//> 30
     72            0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//? 31
     73            0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@ 32
     74            0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A 33
     75            0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B 34
     76            0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C 35
     77            0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D 36
     78            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E 37
     79            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F 38
     80            0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G 39
     81            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H 40
     82            0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I 41
     83            0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J 42
     84            0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K 43
     85            0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L 44
     86            0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M 45
     87            0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N 46
     88            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O 47
     89            0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P 48
     90            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q 49
     91            0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R 50
     92            0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S 51
     93            0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T 52
     94            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U 53
     95            0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V 54
     96            0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W 55
     97            0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X 56
     98            0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y 57
     99            0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z 58
    100            0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[ 59
    101            0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\ 60
    102            0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//] 61
    103            0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^ 62
    104            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_ 63
    105            0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//` 64
    106            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a 65
    107            0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b 66
    108            0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c 67
    109            0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d 68
    110            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e 69
    111            0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f 70
    112            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g 71
    113            0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h 72
    114            0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i 73
    115            0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j 74
    116            0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k 75
    117            0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l 76
    118            0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m 77
    119            0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n 78
    120            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o 79
    121            0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p 80
    122            0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q 81
    123            0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r 82
    124            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s 83
    125            0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t 84
    126            0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u 85
    127            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v 86
    128            0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w 87
    129            0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x 88
    130            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y 89
    131            0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z 90
    132            0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{ 91
    133            0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//| 92
    134            0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//} 93
    135            0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~ 94
    136          };
    137          
    138          typedef struct _hz_16_16_
    139          {
    140              char* gpk;
    141              unsigned char code[32];
    142          }hanziku;
    143          
    144          //汉字字表

   \                                 In  segment XDATA_ROM_C, align 1
    145          const hanziku tabel_hanzi[] =
   \                     tabel_hanzi:
   \   000000   ....         DW `?<Constant "  ">`
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   ....         DW `?<Constant "\\316\\302">`
   \   000024   10           DB 16
   \   000025   21           DB 33
   \   000026   86           DB 134
   \   000027   70           DB 112
   \   000028   00           DB 0
   \   000029   7E           DB 126
   \   00002A   4A           DB 74
   \   00002B   4A           DB 74
   \   00002C   4A           DB 74
   \   00002D   4A           DB 74
   \   00002E   4A           DB 74
   \   00002F   7E           DB 126
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   02           DB 2
   \   000035   FE           DB 254
   \   000036   01           DB 1
   \   000037   40           DB 64
   \   000038   7F           DB 127
   \   000039   41           DB 65
   \   00003A   41           DB 65
   \   00003B   7F           DB 127
   \   00003C   41           DB 65
   \   00003D   41           DB 65
   \   00003E   7F           DB 127
   \   00003F   41           DB 65
   \   000040   41           DB 65
   \   000041   7F           DB 127
   \   000042   40           DB 64
   \   000043   00           DB 0
   \   000044   ....         DW `?<Constant "\\266\\310">`
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   FC           DB 252
   \   000049   04           DB 4
   \   00004A   24           DB 36
   \   00004B   24           DB 36
   \   00004C   FC           DB 252
   \   00004D   A5           DB 165
   \   00004E   A6           DB 166
   \   00004F   A4           DB 164
   \   000050   FC           DB 252
   \   000051   24           DB 36
   \   000052   24           DB 36
   \   000053   24           DB 36
   \   000054   04           DB 4
   \   000055   00           DB 0
   \   000056   80           DB 128
   \   000057   60           DB 96
   \   000058   1F           DB 31
   \   000059   80           DB 128
   \   00005A   80           DB 128
   \   00005B   42           DB 66
   \   00005C   46           DB 70
   \   00005D   2A           DB 42
   \   00005E   12           DB 18
   \   00005F   12           DB 18
   \   000060   2A           DB 42
   \   000061   26           DB 38
   \   000062   42           DB 66
   \   000063   C0           DB 192
   \   000064   40           DB 64
   \   000065   00           DB 0
   \   000066   ....         DW `?<Constant "\\243\\272">`
   \   000068   00           DB 0
   \   000069   00           DB 0
   \   00006A   00           DB 0
   \   00006B   00           DB 0
   \   00006C   00           DB 0
   \   00006D   00           DB 0
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   00           DB 0
   \   000071   00           DB 0
   \   000072   00           DB 0
   \   000073   00           DB 0
   \   000074   00           DB 0
   \   000075   00           DB 0
   \   000076   00           DB 0
   \   000077   00           DB 0
   \   000078   00           DB 0
   \   000079   00           DB 0
   \   00007A   36           DB 54
   \   00007B   36           DB 54
   \   00007C   00           DB 0
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0
   \   000080   00           DB 0
   \   000081   00           DB 0
   \   000082   00           DB 0
   \   000083   00           DB 0
   \   000084   00           DB 0
   \   000085   00           DB 0
   \   000086   00           DB 0
   \   000087   00           DB 0
   \   000088   ....         DW `?<Constant "\\312\\252">`
   \   00008A   10           DB 16
   \   00008B   60           DB 96
   \   00008C   02           DB 2
   \   00008D   CC           DB 204
   \   00008E   00           DB 0
   \   00008F   00           DB 0
   \   000090   3E           DB 62
   \   000091   2A           DB 42
   \   000092   AA           DB 170
   \   000093   2A           DB 42
   \   000094   AA           DB 170
   \   000095   2A           DB 42
   \   000096   3E           DB 62
   \   000097   00           DB 0
   \   000098   00           DB 0
   \   000099   00           DB 0
   \   00009A   08           DB 8
   \   00009B   08           DB 8
   \   00009C   FE           DB 254
   \   00009D   01           DB 1
   \   00009E   40           DB 64
   \   00009F   42           DB 66
   \   0000A0   4C           DB 76
   \   0000A1   40           DB 64
   \   0000A2   7F           DB 127
   \   0000A3   40           DB 64
   \   0000A4   7F           DB 127
   \   0000A5   48           DB 72
   \   0000A6   44           DB 68
   \   0000A7   42           DB 66
   \   0000A8   40           DB 64
   \   0000A9   00           DB 0
   \   0000AA   ....         DW `?<Constant "\\271\\342">`
   \   0000AC   40           DB 64
   \   0000AD   40           DB 64
   \   0000AE   42           DB 66
   \   0000AF   44           DB 68
   \   0000B0   58           DB 88
   \   0000B1   C0           DB 192
   \   0000B2   40           DB 64
   \   0000B3   7F           DB 127
   \   0000B4   40           DB 64
   \   0000B5   C0           DB 192
   \   0000B6   50           DB 80
   \   0000B7   48           DB 72
   \   0000B8   46           DB 70
   \   0000B9   40           DB 64
   \   0000BA   40           DB 64
   \   0000BB   00           DB 0
   \   0000BC   80           DB 128
   \   0000BD   80           DB 128
   \   0000BE   40           DB 64
   \   0000BF   20           DB 32
   \   0000C0   18           DB 24
   \   0000C1   07           DB 7
   \   0000C2   00           DB 0
   \   0000C3   00           DB 0
   \   0000C4   00           DB 0
   \   0000C5   3F           DB 63
   \   0000C6   40           DB 64
   \   0000C7   40           DB 64
   \   0000C8   40           DB 64
   \   0000C9   40           DB 64
   \   0000CA   78           DB 120
   \   0000CB   00           DB 0
   \   0000CC   ....         DW `?<Constant "\\325\\325">`
   \   0000CE   00           DB 0
   \   0000CF   FE           DB 254
   \   0000D0   42           DB 66
   \   0000D1   42           DB 66
   \   0000D2   42           DB 66
   \   0000D3   FE           DB 254
   \   0000D4   00           DB 0
   \   0000D5   42           DB 66
   \   0000D6   A2           DB 162
   \   0000D7   9E           DB 158
   \   0000D8   82           DB 130
   \   0000D9   A2           DB 162
   \   0000DA   C2           DB 194
   \   0000DB   BE           DB 190
   \   0000DC   00           DB 0
   \   0000DD   00           DB 0
   \   0000DE   80           DB 128
   \   0000DF   6F           DB 111
   \   0000E0   08           DB 8
   \   0000E1   08           DB 8
   \   0000E2   28           DB 40
   \   0000E3   CF           DB 207
   \   0000E4   00           DB 0
   \   0000E5   00           DB 0
   \   0000E6   2F           DB 47
   \   0000E7   C8           DB 200
   \   0000E8   08           DB 8
   \   0000E9   08           DB 8
   \   0000EA   28           DB 40
   \   0000EB   CF           DB 207
   \   0000EC   00           DB 0
   \   0000ED   00           DB 0
   \   0000EE   ....         DW `?<Constant "\\264\\363">`
   \   0000F0   20           DB 32
   \   0000F1   20           DB 32
   \   0000F2   20           DB 32
   \   0000F3   20           DB 32
   \   0000F4   20           DB 32
   \   0000F5   20           DB 32
   \   0000F6   20           DB 32
   \   0000F7   FF           DB 255
   \   0000F8   20           DB 32
   \   0000F9   20           DB 32
   \   0000FA   20           DB 32
   \   0000FB   20           DB 32
   \   0000FC   20           DB 32
   \   0000FD   20           DB 32
   \   0000FE   20           DB 32
   \   0000FF   00           DB 0
   \   000100   80           DB 128
   \   000101   80           DB 128
   \   000102   40           DB 64
   \   000103   20           DB 32
   \   000104   10           DB 16
   \   000105   0C           DB 12
   \   000106   03           DB 3
   \   000107   00           DB 0
   \   000108   03           DB 3
   \   000109   0C           DB 12
   \   00010A   10           DB 16
   \   00010B   20           DB 32
   \   00010C   40           DB 64
   \   00010D   80           DB 128
   \   00010E   80           DB 128
   \   00010F   00           DB 0
   \   000110   ....         DW `?<Constant "\\320\\241">`
   \   000112   00           DB 0
   \   000113   00           DB 0
   \   000114   00           DB 0
   \   000115   E0           DB 224
   \   000116   00           DB 0
   \   000117   00           DB 0
   \   000118   00           DB 0
   \   000119   FF           DB 255
   \   00011A   00           DB 0
   \   00011B   00           DB 0
   \   00011C   00           DB 0
   \   00011D   20           DB 32
   \   00011E   40           DB 64
   \   00011F   80           DB 128
   \   000120   00           DB 0
   \   000121   00           DB 0
   \   000122   08           DB 8
   \   000123   04           DB 4
   \   000124   03           DB 3
   \   000125   00           DB 0
   \   000126   00           DB 0
   \   000127   40           DB 64
   \   000128   80           DB 128
   \   000129   7F           DB 127
   \   00012A   00           DB 0
   \   00012B   00           DB 0
   \   00012C   00           DB 0
   \   00012D   00           DB 0
   \   00012E   00           DB 0
   \   00012F   01           DB 1
   \   000130   0E           DB 14
   \   000131   00           DB 0
   \   000132   ....         DW `?<Constant "\\323\\332">`
   \   000134   40           DB 64
   \   000135   40           DB 64
   \   000136   42           DB 66
   \   000137   42           DB 66
   \   000138   42           DB 66
   \   000139   42           DB 66
   \   00013A   42           DB 66
   \   00013B   FE           DB 254
   \   00013C   42           DB 66
   \   00013D   42           DB 66
   \   00013E   42           DB 66
   \   00013F   42           DB 66
   \   000140   42           DB 66
   \   000141   40           DB 64
   \   000142   40           DB 64
   \   000143   00           DB 0
   \   000144   00           DB 0
   \   000145   00           DB 0
   \   000146   00           DB 0
   \   000147   00           DB 0
   \   000148   00           DB 0
   \   000149   40           DB 64
   \   00014A   80           DB 128
   \   00014B   7F           DB 127
   \   00014C   00           DB 0
   \   00014D   00           DB 0
   \   00014E   00           DB 0
   \   00014F   00           DB 0
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   00           DB 0
   \   000153   00           DB 0
   \   000154   ....         DW `?<Constant "\\261\\250">`
   \   000156   10           DB 16
   \   000157   10           DB 16
   \   000158   10           DB 16
   \   000159   FF           DB 255
   \   00015A   10           DB 16
   \   00015B   90           DB 144
   \   00015C   00           DB 0
   \   00015D   FE           DB 254
   \   00015E   82           DB 130
   \   00015F   82           DB 130
   \   000160   82           DB 130
   \   000161   92           DB 146
   \   000162   A2           DB 162
   \   000163   9E           DB 158
   \   000164   00           DB 0
   \   000165   00           DB 0
   \   000166   04           DB 4
   \   000167   44           DB 68
   \   000168   82           DB 130
   \   000169   7F           DB 127
   \   00016A   01           DB 1
   \   00016B   00           DB 0
   \   00016C   00           DB 0
   \   00016D   FF           DB 255
   \   00016E   80           DB 128
   \   00016F   43           DB 67
   \   000170   2C           DB 44
   \   000171   10           DB 16
   \   000172   2C           DB 44
   \   000173   43           DB 67
   \   000174   80           DB 128
   \   000175   00           DB 0
   \   000176   ....         DW `?<Constant "\\276\\257">`
   \   000178   12           DB 18
   \   000179   EA           DB 234
   \   00017A   AF           DB 175
   \   00017B   AA           DB 170
   \   00017C   EA           DB 234
   \   00017D   0F           DB 15
   \   00017E   FA           DB 250
   \   00017F   02           DB 2
   \   000180   88           DB 136
   \   000181   8C           DB 140
   \   000182   57           DB 87
   \   000183   24           DB 36
   \   000184   54           DB 84
   \   000185   8C           DB 140
   \   000186   84           DB 132
   \   000187   00           DB 0
   \   000188   02           DB 2
   \   000189   02           DB 2
   \   00018A   EA           DB 234
   \   00018B   AA           DB 170
   \   00018C   AA           DB 170
   \   00018D   AB           DB 171
   \   00018E   AA           DB 170
   \   00018F   AB           DB 171
   \   000190   AA           DB 170
   \   000191   AA           DB 170
   \   000192   AA           DB 170
   \   000193   AA           DB 170
   \   000194   EA           DB 234
   \   000195   02           DB 2
   \   000196   02           DB 2
   \   000197   00           DB 0
    146          {
    147              //找不到就显示这个，两个空格
    148              {{"  "},
    149              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    150              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
    151          
    152          
    153          /*--  文字:  温  --*/
    154          /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    155              {{"温"},
    156              {0x10,0x21,0x86,0x70,0x00,0x7E,0x4A,0x4A,0x4A,0x4A,0x4A,0x7E,0x00,0x00,0x00,0x00,
    157              0x02,0xFE,0x01,0x40,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x40,0x00}},
    158          
    159          /*--  文字:  度  --*/
    160          /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    161              {{"度"},
    162              {0x00,0x00,0xFC,0x04,0x24,0x24,0xFC,0xA5,0xA6,0xA4,0xFC,0x24,0x24,0x24,0x04,0x00,
    163              0x80,0x60,0x1F,0x80,0x80,0x42,0x46,0x2A,0x12,0x12,0x2A,0x26,0x42,0xC0,0x40,0x00}},
    164          
    165          /*--  文字:  ：  --*/
    166          /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    167              {{"："},
    168              {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    169              0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
    170          
    171          /*--  文字:  湿  --*/
    172          /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    173              {{"湿"},
    174              {0x10,0x60,0x02,0xCC,0x00,0x00,0x3E,0x2A,0xAA,0x2A,0xAA,0x2A,0x3E,0x00,0x00,0x00,
    175              0x08,0x08,0xFE,0x01,0x40,0x42,0x4C,0x40,0x7F,0x40,0x7F,0x48,0x44,0x42,0x40,0x00}},
    176          
    177              /*--  文字:  光  --*/
    178              /*--  楷体_GB231212;  此字体下对应的点阵为：宽x高=16x16   --*/
    179              {{"光"},
    180              {0x40,0x40,0x42,0x44,0x58,0xC0,0x40,0x7F,0x40,0xC0,0x50,0x48,0x46,0x40,0x40,0x00,
    181              0x80,0x80,0x40,0x20,0x18,0x07,0x00,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x78,0x00}},
    182          
    183              /*--  文字:  照  --*/
    184              /*--  楷体_GB231212;  此字体下对应的点阵为：宽x高=16x16   --*/
    185              {{"照"},
    186              {0x00,0xFE,0x42,0x42,0x42,0xFE,0x00,0x42,0xA2,0x9E,0x82,0xA2,0xC2,0xBE,0x00,0x00,
    187              0x80,0x6F,0x08,0x08,0x28,0xCF,0x00,0x00,0x2F,0xC8,0x08,0x08,0x28,0xCF,0x00,0x00}},
    188          
    189              /*--  文字:  大  --*/
    190              /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    191              {{"大"},
    192              {0x20,0x20,0x20,0x20,0x20,0x20,0x20,0xFF,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00,
    193              0x80,0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x03,0x0C,0x10,0x20,0x40,0x80,0x80,0x00}},
    194          
    195              /*--  文字:  小  --*/
    196              /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    197              {{"小"},
    198              {0x00,0x00,0x00,0xE0,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x20,0x40,0x80,0x00,0x00,
    199              0x08,0x04,0x03,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,0x01,0x0E,0x00}},
    200          
    201              /*--  文字:  于  --*/
    202              /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    203              {{"于"},
    204              {0x40,0x40,0x42,0x42,0x42,0x42,0x42,0xFE,0x42,0x42,0x42,0x42,0x42,0x40,0x40,0x00,
    205              0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
    206          
    207              /*--  文字:  报  --*/
    208              /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    209              {{"报"},
    210              {0x10,0x10,0x10,0xFF,0x10,0x90,0x00,0xFE,0x82,0x82,0x82,0x92,0xA2,0x9E,0x00,0x00,
    211              0x04,0x44,0x82,0x7F,0x01,0x00,0x00,0xFF,0x80,0x43,0x2C,0x10,0x2C,0x43,0x80,0x00}},
    212          
    213              /*--  文字:  警  --*/
    214              /*--  宋体12;  此字体下对应的点阵为：宽x高=16x16   --*/
    215              {{"警"},
    216              {0x12,0xEA,0xAF,0xAA,0xEA,0x0F,0xFA,0x02,0x88,0x8C,0x57,0x24,0x54,0x8C,0x84,0x00,
    217              0x02,0x02,0xEA,0xAA,0xAA,0xAB,0xAA,0xAB,0xAA,0xAA,0xAA,0xAA,0xEA,0x02,0x02,0x00}},
    218          };
    219          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    220          unsigned char* getChineseCode(char* chinese)
   \                     getChineseCode:
    221          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FC           MOV       R4,A
   \   000007   EB           MOV       A,R3
   \   000008   FD           MOV       R5,A
    222              int i;
    223              int tableLen=sizeof(tabel_hanzi)/sizeof(hanziku);
    224          
    225              if(chinese==0);
    226          
    227              for(i=0; i<tableLen; i++)
   \   000009   7800         MOV       R0,#0x0
   \   00000B   7900         MOV       R1,#0x0
    228              {
    229                  if(tabel_hanzi[i].gpk[0]==chinese[0] && tabel_hanzi[i].gpk[1]==chinese[1])
   \                     ??getChineseCode_0:
   \   00000D   E8           MOV       A,R0
   \   00000E   FA           MOV       R2,A
   \   00000F   E9           MOV       A,R1
   \   000010   FB           MOV       R3,A
   \   000011   EA           MOV       A,R2
   \   000012   75F022       MOV       B,#0x22
   \   000015   A4           MUL       AB
   \   000016   FA           MOV       R2,A
   \   000017   AEF0         MOV       R6,B
   \   000019   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   FA           MOV       R2,A
   \   00001E   8C82         MOV       DPL,R4
   \   000020   8D83         MOV       DPH,R5
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6A           XRL       A,R2
   \   000024   7030         JNZ       ??getChineseCode_1
   \   000026   E8           MOV       A,R0
   \   000027   FA           MOV       R2,A
   \   000028   E9           MOV       A,R1
   \   000029   FB           MOV       R3,A
   \   00002A   EA           MOV       A,R2
   \   00002B   75F022       MOV       B,#0x22
   \   00002E   A4           MUL       AB
   \   00002F   FA           MOV       R2,A
   \   000030   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   FA           MOV       R2,A
   \   000036   8C82         MOV       DPL,R4
   \   000038   8D83         MOV       DPH,R5
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6A           XRL       A,R2
   \   00003D   7017         JNZ       ??getChineseCode_1
    230                  {
    231                      return (unsigned char*)tabel_hanzi[i].code;
   \   00003F   E8           MOV       A,R0
   \   000040   75F022       MOV       B,#0x22
   \   000043   A4           MUL       AB
   \   000044   F8           MOV       R0,A
   \   000045   75F022       MOV       B,#0x22
   \   000048   E9           MOV       A,R1
   \   000049   A4           MUL       AB
   \   00004A   2E           ADD       A,R6
   \   00004B   F9           MOV       R1,A
   \   00004C   74..         MOV       A,#(tabel_hanzi + 2) & 0xff
   \   00004E   28           ADD       A,R0
   \   00004F   FA           MOV       R2,A
   \   000050   74..         MOV       A,#((tabel_hanzi + 2) >> 8) & 0xff
   \   000052   39           ADDC      A,R1
   \   000053   FB           MOV       R3,A
   \   000054   8016         SJMP      ??getChineseCode_2
    232                  }
    233              }
   \                     ??getChineseCode_1:
   \   000056   08           INC       R0
   \   000057   E8           MOV       A,R0
   \   000058   7001         JNZ       ??getChineseCode_3
   \   00005A   09           INC       R1
   \                     ??getChineseCode_3:
   \   00005B   C3           CLR       C
   \   00005C   940C         SUBB      A,#0xc
   \   00005E   E9           MOV       A,R1
   \   00005F   9400         SUBB      A,#0x0
   \   000061   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000063   65D0         XRL       A,PSW
   \   000065   33           RLC       A
   \   000066   40A5         JC        ??getChineseCode_0
    234          
    235              return (unsigned char*)tabel_hanzi[0].code;
   \   000068   7A..         MOV       R2,#(tabel_hanzi + 2) & 0xff
   \   00006A   7B..         MOV       R3,#((tabel_hanzi + 2) >> 8) & 0xff
   \                     ??getChineseCode_2:
   \   00006C   02....       LJMP      ?Subroutine0 & 0xFFFF
    236          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   75F022       MOV       B,#0x22
   \   000003   EB           MOV       A,R3
   \   000004   A4           MUL       AB
   \   000005   2E           ADD       A,R6
   \   000006   FB           MOV       R3,A
   \   000007   74..         MOV       A,#tabel_hanzi & 0xff
   \   000009   2A           ADD       A,R2
   \   00000A   F582         MOV       DPL,A
   \   00000C   74..         MOV       A,#(tabel_hanzi >> 8) & 0xff
   \   00000E   3B           ADDC      A,R3
   \   00000F   F583         MOV       DPH,A
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FA           MOV       R2,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8A82         MOV       DPL,R2
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    237          
    238          
    239          #if (HAL_LCD == TRUE)
    240          void HalLcd_HW_Init(void);
    241          void HalLcd_HW_WaitUs(uint16 i);
    242          void HalLcd_HW_Clear(void);
    243          void HalLcd_HW_Control(uint8 cmd);
    244          void HalLcd_HW_Write(uint8 data);
    245          void HalLcd_HW_SetContrast(uint8 value);
    246          void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
    247          void HalLcd_HW_WriteLine(uint8 line, const char *pText);
    248          
    249          void DelayMS(unsigned int msec);
    250          void LCD_DLY_ms(unsigned int ms);
    251          void LCD_WrDat(unsigned char dat);
    252          void LCD_WrCmd(unsigned char cmd);
    253          void LCD_Set_Pos(unsigned char x, unsigned char y);
    254          void LCD_Fill(unsigned char bmp_dat) ;
    255          void LCD_CLS(void);
    256          void LcdClearLine(unsigned char y, unsigned char count);
    257          
    258          void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[]);
    259          void HalLcdDisplayPercentBar( char *title, uint8 value );
    260          void LCD_P16x16Ch(unsigned char x, unsigned char y, unsigned char N);
    261          #endif //LCD
    262          
    263          
    264          /**************************************************************************************************
    265           * @fn      HalLcdInit
    266           *
    267           * @brief   Initilize LCD Service
    268           *
    269           * @param   init - pointer to void that contains the initialized value
    270           *
    271           * @return  None
    272           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    273          void HalLcdInit(void)
   \                     HalLcdInit:
    274          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    275          #if (HAL_LCD == TRUE)
    276            HalLcd_HW_Init();
   \   000004                ; Setup parameters for call to function HalLcd_HW_Init
   \   000004   12....       LCALL     `??HalLcd_HW_Init::?relay`; Banked call to: HalLcd_HW_Init
    277          #endif
    278          }
   \   000007                REQUIRE ?Subroutine1
   \   000007                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    279          
    280          /**************************************************************************************************
    281           * @fn      HalLcdWriteValue
    282           *
    283           * @brief   Write a value to the LCD
    284           *
    285           * @param   value  - value that will be displayed
    286           *          radix  - 8, 10, 16
    287           *          option - display options
    288           *
    289           * @return  None
    290           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    292          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    293          #if (HAL_LCD == TRUE)
    294            uint8 buf[LCD_MAX_BUF];
    295          
    296            _ltoa( value, &buf[0], radix );
   \   00000C                ; Setup parameters for call to function _ltoa
   \   00000C   A8..         MOV       R0,?XSP + 0
   \   00000E   A9..         MOV       R1,?XSP + 1
   \   000010   88..         MOV       ?V4,R0
   \   000012   89..         MOV       ?V5,R1
   \   000014   78..         MOV       R0,#?V4
   \   000016   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00001E   12....       LCALL     ?DEALLOC_XSTACK8
    297            HalLcdWriteString( (char*)buf, option );
   \   000021                ; Setup parameters for call to function HalLcdWriteString
   \   000021   7427         MOV       A,#0x27
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ?Subroutine6 & 0xFFFF
    298          #endif
    299          }
   \                     ??CrossCallReturnLabel_4:
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002C   7F06         MOV       R7,#0x6
   \   00002E   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   AA..         MOV       R2,?XSP + 0
   \   000004   AB..         MOV       R3,?XSP + 1
   \   000006   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
   \   000009   7419         MOV       A,#0x19
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   12....       LCALL     `??_ltoa::?relay`; Banked call to: _ltoa
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    300          
    301          /**************************************************************************************************
    302           * @fn      HalLcdWriteScreen
    303           *
    304           * @brief   Write a value to the LCD
    305           *
    306           * @param   line1  - string that will be displayed on line 1
    307           *          line2  - string that will be displayed on line 2
    308           *
    309           * @return  None
    310           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    311          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
    312          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
    313          #if (HAL_LCD == TRUE)
    314            HalLcdWriteString( line1, 1 );
   \   000009                ; Setup parameters for call to function HalLcdWriteString
   \   000009   7901         MOV       R1,#0x1
   \   00000B   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    315            HalLcdWriteString( line2, 2 );
   \   00000E                ; Setup parameters for call to function HalLcdWriteString
   \   00000E   7902         MOV       R1,#0x2
   \   000010   EE           MOV       A,R6
   \   000011   FA           MOV       R2,A
   \   000012   EF           MOV       A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    316          #endif
    317          }
   \   000017   02....       LJMP      ?Subroutine0 & 0xFFFF
    318          
    319          /**************************************************************************************************
    320           * @fn      HalLcdWriteStringValue
    321           *
    322           * @brief   Write a string followed by a value to the LCD
    323           *
    324           * @param   title  - Title that will be displayed before the value
    325           *          value  - value
    326           *          format - redix
    327           *          line   - line number
    328           *
    329           * @return  None
    330           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
    332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine10 & 0xFFFF
    333          #if (HAL_LCD == TRUE)
    334            uint8 tmpLen;
    335            uint8 buf[LCD_MAX_BUF];
    336            uint32 err;
    337          
    338            tmpLen = (uint8)osal_strlen( (char*)title );
    339            osal_memcpy( buf, title, tmpLen );
   \                     ??CrossCallReturnLabel_20:
   \   00000D                ; Setup parameters for call to function osal_memcpy
   \   00000D   75..00       MOV       ?V2,#0x0
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000015   AC..         MOV       R4,?V3
   \   000017   7D00         MOV       R5,#0x0
   \   000019   7403         MOV       A,#0x3
   \   00001B   12....       LCALL     ?XSTACK_DISP101_8
   \   00001E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000021   7403         MOV       A,#0x3
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
    340            //buf[tmpLen] = ' ';
    341            err = (uint32)(value);
    342            _ltoa( err, &buf[tmpLen], format );
   \   000026                ; Setup parameters for call to function _ltoa
   \   000026   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
    343            HalLcdWriteString( (char*)buf, line );		
   \   000032                ; Setup parameters for call to function HalLcdWriteString
   \   000032   7426         MOV       A,#0x26
   \   000034                REQUIRE ?Subroutine2
   \   000034                ; // Fall through to label ?Subroutine2
    344          #endif
    345          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?XSTACK_DISP0_8
   \   000003   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000006   12....       LCALL     ?DEALLOC_XSTACK8
   \   000009   7F05         MOV       R7,#0x5
   \   00000B   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004   EC           MOV       A,R4
   \   000005   FE           MOV       R6,A
   \   000006   ED           MOV       A,R5
   \   000007   FF           MOV       R7,A
   \   000008   89..         MOV       ?V4,R1
   \   00000A                ; Setup parameters for call to function osal_strlen
   \   00000A                ; Setup parameters for call to function osal_strlen
   \   00000A                REQUIRE ??Subroutine17_0
   \   00000A                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000003   EA           MOV       A,R2
   \   000004   F5..         MOV       ?V3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A8..         MOV       R0,?V3
   \   000002                REQUIRE ??Subroutine18_0
   \   000002                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E582         MOV       A,DPL
   \   000008   28           ADD       A,R0
   \   000009   F5..         MOV       ?V0,A
   \   00000B   E4           CLR       A
   \   00000C   3583         ADDC      A,DPH
   \   00000E   F5..         MOV       ?V1,A
   \   000010   78..         MOV       R0,#?V0
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A9..         MOV       R1,?V4
   \   000002   8E..         MOV       ?V0,R6
   \   000004   8F..         MOV       ?V1,R7
   \   000006   AA..         MOV       R2,?V0
   \   000008   AB..         MOV       R3,?V1
   \   00000A                REQUIRE ??Subroutine19_0
   \   00000A                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   E4           CLR       A
   \   000001   FC           MOV       R4,A
   \   000002   FD           MOV       R5,A
   \   000003                REQUIRE ??Subroutine20_0
   \   000003                ; // Fall through to label ??Subroutine20_0
    346          
    347          /**************************************************************************************************
    348           * @fn      HalLcdWriteStringValue
    349           *
    350           * @brief   Write a string followed by a value to the LCD
    351           *
    352           * @param   title   - Title that will be displayed before the value
    353           *          value1  - value #1
    354           *          format1 - redix of value #1
    355           *          value2  - value #2
    356           *          format2 - redix of value #2
    357           *          line    - line number
    358           *
    359           * @return  None
    360           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
    362                                            uint16 value2, uint8 format2, uint8 line )
    363          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 25
   \   000005   74E7         MOV       A,#-0x19
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine10 & 0xFFFF
    364          
    365          #if (HAL_LCD == TRUE)
    366          
    367            uint8 tmpLen;
    368            uint8 buf[LCD_MAX_BUF];
    369            uint32 err;
    370          
    371            tmpLen = (uint8)osal_strlen( (char*)title );
    372            if ( tmpLen )
   \                     ??CrossCallReturnLabel_21:
   \   00000D   6019         JZ        ??HalLcdWriteStringValueValue_0
    373            {
    374              osal_memcpy( buf, title, tmpLen );
   \   00000F                ; Setup parameters for call to function osal_memcpy
   \   00000F   75..00       MOV       ?V2,#0x0
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000017   AC..         MOV       R4,?V3
   \   000019   7D00         MOV       R5,#0x0
   \   00001B   7403         MOV       A,#0x3
   \   00001D   12....       LCALL     ?XSTACK_DISP101_8
   \   000020   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000023   7403         MOV       A,#0x3
   \   000025   12....       LCALL     ?DEALLOC_XSTACK8
    375              //buf[tmpLen++] = ' ';
    376            }
    377          
    378            err = (uint32)(value1);
    379            _ltoa( err, &buf[tmpLen], format1 );
   \                     ??HalLcdWriteStringValueValue_0:
   \   000028                ; Setup parameters for call to function _ltoa
   \   000028   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
    380            tmpLen = (uint8)osal_strlen( (char*)buf );
   \   000034                ; Setup parameters for call to function osal_strlen
   \   000034   AA..         MOV       R2,?XSP + 0
   \   000036   AB..         MOV       R3,?XSP + 1
   \   000038   12....       LCALL     ??Subroutine17_0 & 0xFFFF
    381          
    382            buf[tmpLen++] = ',';
   \                     ??CrossCallReturnLabel_22:
   \   00003B   F8           MOV       R0,A
   \   00003C   85..82       MOV       DPL,?XSP + 0
   \   00003F   85..83       MOV       DPH,?XSP + 1
   \   000042   E582         MOV       A,DPL
   \   000044   2A           ADD       A,R2
   \   000045   F582         MOV       DPL,A
   \   000047   E4           CLR       A
   \   000048   3583         ADDC      A,DPH
   \   00004A   F583         MOV       DPH,A
   \   00004C   742C         MOV       A,#0x2c
   \   00004E   F0           MOVX      @DPTR,A
    383            buf[tmpLen++] = ' ';
   \   00004F   08           INC       R0
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   E582         MOV       A,DPL
   \   000058   28           ADD       A,R0
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   3583         ADDC      A,DPH
   \   00005E   F583         MOV       DPH,A
   \   000060   7420         MOV       A,#0x20
   \   000062   F0           MOVX      @DPTR,A
    384            err = (uint32)(value2);
    385            _ltoa( err, &buf[tmpLen], format2 );
   \   000063                ; Setup parameters for call to function _ltoa
   \   000063   08           INC       R0
   \   000064   12....       LCALL     ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006A   742A         MOV       A,#0x2a
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   F9           MOV       R1,A
   \   000071   7428         MOV       A,#0x28
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F5..         MOV       ?V0,A
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   AA..         MOV       R2,?V0
   \   00007D   FB           MOV       R3,A
   \   00007E   12....       LCALL     ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
    386          
    387            HalLcdWriteString( (char *)buf, line );		
   \   000084                ; Setup parameters for call to function HalLcdWriteString
   \   000084   7429         MOV       A,#0x29
   \   000086   02....       LJMP      ?Subroutine2 & 0xFFFF
    388          
    389          #endif
    390          }
    391          
    392          #if (HAL_LCD == TRUE)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void DelayMS(unsigned int msec)
   \                     DelayMS:
    394          { 
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    395              unsigned int i,j;
    396              
    397              for (i=0; i<msec; i++)
   \   000000   7800         MOV       R0,#0x0
   \   000002   7900         MOV       R1,#0x0
   \   000004   8005         SJMP      ??DelayMS_0
    398                  for (j=0; j<530; j++);
   \                     ??DelayMS_1:
   \   000006   08           INC       R0
   \   000007   E8           MOV       A,R0
   \   000008   7001         JNZ       ??DelayMS_0
   \   00000A   09           INC       R1
   \                     ??DelayMS_0:
   \   00000B   C3           CLR       C
   \   00000C   E8           MOV       A,R0
   \   00000D   9A           SUBB      A,R2
   \   00000E   E9           MOV       A,R1
   \   00000F   9B           SUBB      A,R3
   \   000010   40F4         JC        ??DelayMS_1
    399          }
   \   000012   02....       LJMP      ?BRET
    400          
    401          /*********************LCD 延时1ms************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          void LCD_DLY_ms(unsigned int ms)
   \                     LCD_DLY_ms:
    403          {                         
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   801C         SJMP      ??LCD_DLY_ms_0
    404              unsigned int a;
    405              while(ms)
    406              {
    407                  a=1800;
   \                     ??LCD_DLY_ms_1:
   \   000002   7808         MOV       R0,#0x8
   \   000004   7907         MOV       R1,#0x7
    408                  while(a--);
   \                     ??LCD_DLY_ms_2:
   \   000006   E8           MOV       A,R0
   \   000007   FC           MOV       R4,A
   \   000008   E9           MOV       A,R1
   \   000009   FD           MOV       R5,A
   \   00000A   EC           MOV       A,R4
   \   00000B   24FF         ADD       A,#-0x1
   \   00000D   18           DEC       R0
   \   00000E   ED           MOV       A,R5
   \   00000F   34FF         ADDC      A,#-0x1
   \   000011   F9           MOV       R1,A
   \   000012   EC           MOV       A,R4
   \   000013   4D           ORL       A,R5
   \   000014   70F0         JNZ       ??LCD_DLY_ms_2
    409                  ms--;
   \   000016   EA           MOV       A,R2
   \   000017   24FF         ADD       A,#-0x1
   \   000019   1A           DEC       R2
   \   00001A   EB           MOV       A,R3
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   FB           MOV       R3,A
    410              }
   \                     ??LCD_DLY_ms_0:
   \   00001E   EA           MOV       A,R2
   \   00001F   4B           ORL       A,R3
   \   000020   70E0         JNZ       ??LCD_DLY_ms_1
    411              return;
   \   000022   02....       LJMP      ?BRET
    412          }
    413          
    414          /*********************LCD写数据************************************/ 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    415          void LCD_WrDat(unsigned char dat)     
   \                     LCD_WrDat:
    416          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    417              unsigned char i=8, temp=0;
    418              LCD_DC=1;  
   \   000000   D280         SETB      0x80.0
    419              for(i=0;i<8;i++) //发送一个八位数据 
   \   000002   7808         MOV       R0,#0x8
    420              {
    421                  LCD_SCL=0;  
   \                     ??LCD_WrDat_0:
   \   000004   C292         CLR       0x90.2
    422                  
    423                  temp = dat&0x80;
    424                  if (temp == 0)
   \   000006   E9           MOV       A,R1
   \   000007   A2E7         MOV       C,0xE0 /* A   */.7
   \   000009   4004         JC        ??LCD_WrDat_1
    425                  {
    426                      LCD_SDA = 0;
   \   00000B   C293         CLR       0x90.3
   \   00000D   8002         SJMP      ??LCD_WrDat_2
    427                  }
    428                  else
    429                  {
    430                      LCD_SDA = 1;
   \                     ??LCD_WrDat_1:
   \   00000F   D293         SETB      0x90.3
    431                  }
    432                  LCD_SCL=1;             
   \                     ??LCD_WrDat_2:
   \   000011   D292         SETB      0x90.2
    433                  dat<<=1;    
   \   000013   C3           CLR       C
   \   000014   33           RLC       A
   \   000015   F9           MOV       R1,A
    434              }
   \   000016   18           DEC       R0
   \   000017   E8           MOV       A,R0
   \   000018   70EA         JNZ       ??LCD_WrDat_0
    435          }
   \   00001A   02....       LJMP      ?BRET
   \   00001D                REQUIRE _A_P0
   \   00001D                REQUIRE _A_P1
    436          
    437          /*********************LCD写命令************************************/                                        

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          void LCD_WrCmd(unsigned char cmd)
   \                     LCD_WrCmd:
    439          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    440              unsigned char i=8, temp=0;
    441              LCD_DC=0;
   \   000000   C280         CLR       0x80.0
    442              for(i=0;i<8;i++) //发送一个八位数据 
   \   000002   7808         MOV       R0,#0x8
    443              { 
    444                  LCD_SCL=0; 
   \                     ??LCD_WrCmd_0:
   \   000004   C292         CLR       0x90.2
    445                 
    446                  temp = cmd&0x80;
    447                  if (temp == 0)
   \   000006   E9           MOV       A,R1
   \   000007   A2E7         MOV       C,0xE0 /* A   */.7
   \   000009   4004         JC        ??LCD_WrCmd_1
    448                  {
    449                      LCD_SDA = 0;
   \   00000B   C293         CLR       0x90.3
   \   00000D   8002         SJMP      ??LCD_WrCmd_2
    450                  }
    451                  else
    452                  {
    453                      LCD_SDA = 1;
   \                     ??LCD_WrCmd_1:
   \   00000F   D293         SETB      0x90.3
    454                  }
    455                  LCD_SCL=1;
   \                     ??LCD_WrCmd_2:
   \   000011   D292         SETB      0x90.2
    456                  cmd<<=1;;        
   \   000013   C3           CLR       C
   \   000014   33           RLC       A
   \   000015   F9           MOV       R1,A
    457              }     
   \   000016   18           DEC       R0
   \   000017   E8           MOV       A,R0
   \   000018   70EA         JNZ       ??LCD_WrCmd_0
    458          }
   \   00001A   02....       LJMP      ?BRET
   \   00001D                REQUIRE _A_P0
   \   00001D                REQUIRE _A_P1
    459          
    460          /*********************LCD 设置坐标************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    461          void LCD_Set_Pos(unsigned char x, unsigned char y) 
   \                     LCD_Set_Pos:
    462          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    463              if(x>127) return;
   \   000007   C3           CLR       C
   \   000008   9480         SUBB      A,#-0x80
   \   00000A   5020         JNC       ??LCD_Set_Pos_0
    464              if(y>7) return;
   \   00000C   EA           MOV       A,R2
   \   00000D   C3           CLR       C
   \   00000E   9408         SUBB      A,#0x8
   \   000010   501A         JNC       ??LCD_Set_Pos_0
    465          
    466              LCD_WrCmd(0xb0+y);
   \   000012                ; Setup parameters for call to function LCD_WrCmd
   \   000012   74B0         MOV       A,#-0x50
   \   000014   2A           ADD       A,R2
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    467              LCD_WrCmd(((x&0xf0)>>4)|0x10);
   \   000019                ; Setup parameters for call to function LCD_WrCmd
   \   000019   EE           MOV       A,R6
   \   00001A   C4           SWAP      A
   \   00001B   540F         ANL       A,#0xf
   \   00001D   4410         ORL       A,#0x10
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    468              LCD_WrCmd((x&0x0f)|0x01); 
   \   000023                ; Setup parameters for call to function LCD_WrCmd
   \   000023   740F         MOV       A,#0xf
   \   000025   5E           ANL       A,R6
   \   000026   4401         ORL       A,#0x1
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    469          } 
   \                     ??LCD_Set_Pos_0:
   \   00002C                REQUIRE ?Subroutine0
   \   00002C                ; // Fall through to label ?Subroutine0
    470          
    471          /*********************LCD全屏************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          void LCD_Fill(unsigned char bmp_dat) 
   \                     LCD_Fill:
    473          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    474              unsigned char y,x;
    475              for(y=0;y<8;y++)
   \   000007   7F00         MOV       R7,#0x0
    476              {
    477                  LCD_WrCmd(0xb0+y);
   \                     ??LCD_Fill_0:
   \   000009                ; Setup parameters for call to function LCD_WrCmd
   \   000009   12....       LCALL     ?Subroutine11 & 0xFFFF
    478                  LCD_WrCmd(0x01);
    479                  LCD_WrCmd(0x10);
    480                  for(x=0;x<X_WIDTH;x++)
    481                      LCD_WrDat(bmp_dat);
   \                     ??CrossCallReturnLabel_30:
   \   00000C                ; Setup parameters for call to function LCD_WrDat
   \   00000C   A9..         MOV       R1,?V0
   \   00000E   12....       LCALL     `??LCD_WrDat::?relay`; Banked call to: LCD_WrDat
   \   000011   DEF9         DJNZ      R6,??CrossCallReturnLabel_30
    482              }
   \   000013   0F           INC       R7
   \   000014   EF           MOV       A,R7
   \   000015   C3           CLR       C
   \   000016   9408         SUBB      A,#0x8
   \   000018   40EF         JC        ??LCD_Fill_0
    483          }
   \   00001A   80..         SJMP      ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   74B0         MOV       A,#-0x50
   \   000002   2F           ADD       A,R7
   \   000003                REQUIRE ??Subroutine21_0
   \   000003                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   F9           MOV       R1,A
   \   000001   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   000004                ; Setup parameters for call to function LCD_WrCmd
   \   000004                ; Setup parameters for call to function LCD_WrCmd
   \   000004                ; Setup parameters for call to function LCD_WrCmd
   \   000004   7901         MOV       R1,#0x1
   \   000006   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   000009                ; Setup parameters for call to function LCD_WrCmd
   \   000009                ; Setup parameters for call to function LCD_WrCmd
   \   000009                ; Setup parameters for call to function LCD_WrCmd
   \   000009   7910         MOV       R1,#0x10
   \   00000B   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   00000E   7E80         MOV       R6,#-0x80
   \   000010   22           RET
    484          
    485          /*********************LCD复位************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          void LCD_CLS(void)
   \                     LCD_CLS:
    487          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    488              unsigned char y,x;    
    489              for(y=0;y<8;y++)
   \   000005   7F00         MOV       R7,#0x0
    490              {
    491                  LCD_WrCmd(0xb0+y);
   \                     ??LCD_CLS_0:
   \   000007                ; Setup parameters for call to function LCD_WrCmd
   \   000007   12....       LCALL     ?Subroutine11 & 0xFFFF
    492                  LCD_WrCmd(0x01);
    493                  LCD_WrCmd(0x10); 
    494                  for(x=0;x<X_WIDTH;x++)
    495                      LCD_WrDat(0);
   \                     ??CrossCallReturnLabel_31:
   \   00000A                ; Setup parameters for call to function LCD_WrDat
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   12....       LCALL     `??LCD_WrDat::?relay`; Banked call to: LCD_WrDat
   \   00000F   DEF9         DJNZ      R6,??CrossCallReturnLabel_31
    496              }
   \   000011   0F           INC       R7
   \   000012   EF           MOV       A,R7
   \   000013   C3           CLR       C
   \   000014   9408         SUBB      A,#0x8
   \   000016   40EF         JC        ??LCD_CLS_0
    497          }
   \   000018   80..         SJMP      ?Subroutine0
    498          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          void LcdClearLine(unsigned char y, unsigned char count)
   \                     LcdClearLine:
    500          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
    501              unsigned char x,j;	
    502              
    503              for(j=y; j<(y+count); j++)
   \   000009   AF..         MOV       R7,?V0
   \   00000B   800E         SJMP      ??LcdClearLine_0
    504              {
    505                  LCD_WrCmd(0xb0+j);
   \                     ??LcdClearLine_1:
   \   00000D                ; Setup parameters for call to function LCD_WrCmd
   \   00000D   74B0         MOV       A,#-0x50
   \   00000F   2A           ADD       A,R2
   \   000010   12....       LCALL     ??Subroutine21_0 & 0xFFFF
    506                  LCD_WrCmd(0x01);
    507                  LCD_WrCmd(0x10); 
    508                  for(x=0;x<X_WIDTH;x++)
    509                     LCD_WrDat(0);
   \                     ??CrossCallReturnLabel_32:
   \   000013                ; Setup parameters for call to function LCD_WrDat
   \   000013   7900         MOV       R1,#0x0
   \   000015   12....       LCALL     `??LCD_WrDat::?relay`; Banked call to: LCD_WrDat
   \   000018   DEF9         DJNZ      R6,??CrossCallReturnLabel_32
    510              }
   \   00001A   0F           INC       R7
   \                     ??LcdClearLine_0:
   \   00001B   EF           MOV       A,R7
   \   00001C   FA           MOV       R2,A
   \   00001D   A8..         MOV       R0,?V1
   \   00001F   E5..         MOV       A,?V0
   \   000021   28           ADD       A,R0
   \   000022   F8           MOV       R0,A
   \   000023   E4           CLR       A
   \   000024   3400         ADDC      A,#0x0
   \   000026   F9           MOV       R1,A
   \   000027   EA           MOV       A,R2
   \   000028   98           SUBB      A,R0
   \   000029   E4           CLR       A
   \   00002A   99           SUBB      A,R1
   \   00002B   C3           CLR       C
   \   00002C   65D0         XRL       A,PSW
   \   00002E   33           RLC       A
   \   00002F   40DC         JC        ??LcdClearLine_1
    511          }
   \   000031   7F02         MOV       R7,#0x2
   \   000033   02....       LJMP      ?BANKED_LEAVE_XDATA
    512          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          void HalLcdWriteString (char *str, uint8 option)
   \                     HalLcdWriteString:
    514          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    515            uint8 x=0,y=0,strLen;
    516            uint8 lcdBuf[HAL_LCD_MAX_CHARS+1];
    517              
    518            x=0;
    519            y = (option-1)*2;
   \   00000E   74FF         MOV       A,#-0x1
   \   000010   29           ADD       A,R1
   \   000011   C3           CLR       C
   \   000012   33           RLC       A
   \   000013   FF           MOV       R7,A
    520            strLen = (uint8)osal_strlen( (char*)str );
   \   000014                ; Setup parameters for call to function osal_strlen
   \   000014   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000017   EA           MOV       A,R2
   \   000018   FE           MOV       R6,A
    521          
    522            /* Check boundries */
    523            if ( strLen > HAL_LCD_MAX_CHARS )
   \   000019   C3           CLR       C
   \   00001A   9411         SUBB      A,#0x11
   \   00001C   4002         JC        ??HalLcdWriteString_0
    524              strLen = HAL_LCD_MAX_CHARS;
   \   00001E   7E10         MOV       R6,#0x10
    525          
    526            osal_memset(lcdBuf, 0, HAL_LCD_MAX_CHARS+1);
   \                     ??HalLcdWriteString_0:
   \   000020                ; Setup parameters for call to function osal_memset
   \   000020   7C11         MOV       R4,#0x11
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7900         MOV       R1,#0x0
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    527            osal_memcpy( lcdBuf, str, strLen );
   \   00002D                ; Setup parameters for call to function osal_memcpy
   \   00002D   75..00       MOV       ?V2,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000035   EE           MOV       A,R6
   \   000036   FC           MOV       R4,A
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7403         MOV       A,#0x3
   \   00003B   12....       LCALL     ?XSTACK_DISP101_8
   \   00003E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
    528            
    529            LcdClearLine(y, 2);
   \   000046                ; Setup parameters for call to function LcdClearLine
   \   000046   7A02         MOV       R2,#0x2
   \   000048   EF           MOV       A,R7
   \   000049   F9           MOV       R1,A
   \   00004A   12....       LCALL     `??LcdClearLine::?relay`; Banked call to: LcdClearLine
    530            LCD_P8x16Str(x, y, lcdBuf);
   \   00004D                ; Setup parameters for call to function LCD_P8x16Str
   \   00004D   AC..         MOV       R4,?XSP + 0
   \   00004F   AD..         MOV       R5,?XSP + 1
   \   000051   EF           MOV       A,R7
   \   000052   FA           MOV       R2,A
   \   000053   7900         MOV       R1,#0x0
   \   000055   12....       LCALL     `??LCD_P8x16Str::?relay`; Banked call to: LCD_P8x16Str
    531          }
   \   000058   7411         MOV       A,#0x11
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   7F04         MOV       R7,#0x4
   \   00005F   02....       LJMP      ?BANKED_LEAVE_XDATA
    532          
    533          #if 1
    534          /***能描述：显示8*16一组标准ASCII字符串     显示的坐标（x,y），y为页范围0～7***/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    535          void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[])
   \                     LCD_P8x16Str:
    536          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8C..         MOV       ?V6,R4
   \   00000B   8D..         MOV       ?V7,R5
    537              unsigned char c=0,i=0,j=0;
   \   00000D   75..00       MOV       ?V1,#0x0
    538              unsigned char* addr=0;
    539              unsigned char wm=0;
   \   000010   8041         SJMP      ??LCD_P8x16Str_0
    540          
    541              while (ch[j]!='\0')
    542              {    
    543                  if(x>120){
    544                      x=0;
    545                      y++;
    546                  }
    547                  
    548                  LCD_Set_Pos(x,y); 
    549                  if(IS_CHINESE(ch[j]))
    550                  {
    551                      //中文显示
    552                      addr=getChineseCode(&ch[j]);
                                                 ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??LCD_P8x16Str_1:
   \   000012                ; Setup parameters for call to function getChineseCode
   \   000012   E5..         MOV       A,?V6
   \   000014   28           ADD       A,R0
   \   000015   FA           MOV       R2,A
   \   000016   E4           CLR       A
   \   000017   35..         ADDC      A,?V7
   \   000019   FB           MOV       R3,A
   \   00001A   12....       LCALL     `??getChineseCode::?relay`; Banked call to: getChineseCode
   \   00001D   8A..         MOV       ?V4,R2
   \   00001F   8B..         MOV       ?V5,R3
    553          
    554                      for(wm = 0;wm < 16;wm++)               
   \   000021   7F00         MOV       R7,#0x0
    555                      {
    556                          LCD_WrDat(addr[wm]);    
   \                     ??LCD_P8x16Str_2:
   \   000023                ; Setup parameters for call to function LCD_WrDat
   \   000023   EF           MOV       A,R7
   \   000024   F8           MOV       R0,A
   \   000025   E5..         MOV       A,?V4
   \   000027   28           ADD       A,R0
   \   000028   F582         MOV       DPL,A
   \   00002A   E4           CLR       A
   \   00002B   35..         ADDC      A,?V5
   \   00002D   12....       LCALL     ?Subroutine7 & 0xFFFF
    557                      }      
   \                     ??CrossCallReturnLabel_6:
   \   000030   40F1         JC        ??LCD_P8x16Str_2
    558          
    559                      LCD_Set_Pos(x,y + 1); 
   \   000032                ; Setup parameters for call to function LCD_Set_Pos
   \   000032   12....       LCALL     ?Subroutine12 & 0xFFFF
    560                      for(wm = 0;wm < 16;wm++)          
    561                      {
    562                          LCD_WrDat(addr[16+wm]);
   \                     ??CrossCallReturnLabel_10:
   \   000035                ; Setup parameters for call to function LCD_WrDat
   \   000035   EF           MOV       A,R7
   \   000036   F8           MOV       R0,A
   \   000037   E5..         MOV       A,?V4
   \   000039   28           ADD       A,R0
   \   00003A   F8           MOV       R0,A
   \   00003B   E4           CLR       A
   \   00003C   35..         ADDC      A,?V5
   \   00003E   F9           MOV       R1,A
   \   00003F   E8           MOV       A,R0
   \   000040   2410         ADD       A,#0x10
   \   000042   F582         MOV       DPL,A
   \   000044   E4           CLR       A
   \   000045   39           ADDC      A,R1
   \   000046   12....       LCALL     ?Subroutine7 & 0xFFFF
    563                      }
   \                     ??CrossCallReturnLabel_7:
   \   000049   40EA         JC        ??CrossCallReturnLabel_10
    564                      
    565                      x+=16;
   \   00004B   7410         MOV       A,#0x10
   \   00004D   2E           ADD       A,R6
   \   00004E   FE           MOV       R6,A
    566                      j+=2;
   \   00004F   05..         INC       ?V1
   \                     ??LCD_P8x16Str_3:
   \   000051   05..         INC       ?V1
    567                  }
   \                     ??LCD_P8x16Str_0:
   \   000053   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000056   6071         JZ        ??LCD_P8x16Str_4
   \   000058   EE           MOV       A,R6
   \   000059   C3           CLR       C
   \   00005A   9479         SUBB      A,#0x79
   \   00005C   4004         JC        ??LCD_P8x16Str_5
   \   00005E   7E00         MOV       R6,#0x0
   \   000060   05..         INC       ?V0
   \                     ??LCD_P8x16Str_5:
   \   000062                ; Setup parameters for call to function LCD_Set_Pos
   \   000062   AA..         MOV       R2,?V0
   \   000064   EE           MOV       A,R6
   \   000065   F9           MOV       R1,A
   \   000066   12....       LCALL     `??LCD_Set_Pos::?relay`; Banked call to: LCD_Set_Pos
   \   000069   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00006C   C3           CLR       C
   \   00006D   9480         SUBB      A,#-0x80
   \   00006F   50A1         JNC       ??LCD_P8x16Str_1
    568                  else
    569                  {
    570                      //英文显示
    571                      c =ch[j]-32;
   \   000071   E0           MOVX      A,@DPTR
   \   000072   24E0         ADD       A,#-0x20
   \   000074   F5..         MOV       ?V4,A
    572          
    573                      for(i=0;i<8;i++)
   \   000076   7F00         MOV       R7,#0x0
    574                      {
    575                          LCD_WrDat(F8X16[c*16+i]);
   \                     ??LCD_P8x16Str_6:
   \   000078                ; Setup parameters for call to function LCD_WrDat
   \   000078   E5..         MOV       A,?V4
   \   00007A   F5..         MOV       ?V2,A
   \   00007C   75..00       MOV       ?V3,#0x0
   \   00007F   7404         MOV       A,#0x4
   \   000081   78..         MOV       R0,#?V2
   \   000083   12....       LCALL     ?S_SHL
   \   000086   EF           MOV       A,R7
   \   000087   F8           MOV       R0,A
   \   000088   E5..         MOV       A,?V2
   \   00008A   28           ADD       A,R0
   \   00008B   F8           MOV       R0,A
   \   00008C   E4           CLR       A
   \   00008D   35..         ADDC      A,?V3
   \   00008F   F9           MOV       R1,A
   \   000090   74..         MOV       A,#F8X16 & 0xff
   \   000092   28           ADD       A,R0
   \   000093   F582         MOV       DPL,A
   \   000095   74..         MOV       A,#(F8X16 >> 8) & 0xff
   \   000097   12....       LCALL     ?Subroutine5 & 0xFFFF
    576                      }
   \                     ??CrossCallReturnLabel_2:
   \   00009A   40DC         JC        ??LCD_P8x16Str_6
    577          
    578                      LCD_Set_Pos(x,y+1);    
   \   00009C                ; Setup parameters for call to function LCD_Set_Pos
   \   00009C   12....       LCALL     ?Subroutine12 & 0xFFFF
    579                      for(i=0;i<8;i++)
    580                      {
    581                          LCD_WrDat(F8X16[c*16+i+8]);  
   \                     ??CrossCallReturnLabel_11:
   \   00009F                ; Setup parameters for call to function LCD_WrDat
   \   00009F   E5..         MOV       A,?V4
   \   0000A1   F5..         MOV       ?V2,A
   \   0000A3   75..00       MOV       ?V3,#0x0
   \   0000A6   7404         MOV       A,#0x4
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?S_SHL
   \   0000AD   EF           MOV       A,R7
   \   0000AE   F8           MOV       R0,A
   \   0000AF   E5..         MOV       A,?V2
   \   0000B1   28           ADD       A,R0
   \   0000B2   F8           MOV       R0,A
   \   0000B3   E4           CLR       A
   \   0000B4   35..         ADDC      A,?V3
   \   0000B6   F9           MOV       R1,A
   \   0000B7   74..         MOV       A,#(F8X16 + 8) & 0xff
   \   0000B9   28           ADD       A,R0
   \   0000BA   F582         MOV       DPL,A
   \   0000BC   74..         MOV       A,#((F8X16 + 8) >> 8) & 0xff
   \   0000BE   12....       LCALL     ?Subroutine5 & 0xFFFF
    582                      }
   \                     ??CrossCallReturnLabel_3:
   \   0000C1   40DC         JC        ??CrossCallReturnLabel_11
    583          
    584                      x+=8;
   \   0000C3   7408         MOV       A,#0x8
   \   0000C5   2E           ADD       A,R6
   \   0000C6   FE           MOV       R6,A
    585                      j++;
   \   0000C7   8088         SJMP      ??LCD_P8x16Str_3
    586                  }
    587              }
    588          }
   \                     ??LCD_P8x16Str_4:
   \   0000C9   7F08         MOV       R7,#0x8
   \   0000CB   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7401         MOV       A,#0x1
   \   000002   25..         ADD       A,?V0
   \   000004   FA           MOV       R2,A
   \   000005   EE           MOV       A,R6
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??LCD_Set_Pos::?relay`; Banked call to: LCD_Set_Pos
   \   00000A   7F00         MOV       R7,#0x0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A8..         MOV       R0,?V1
   \   000002   E5..         MOV       A,?V6
   \   000004   28           ADD       A,R0
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   35..         ADDC      A,?V7
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   9410         SUBB      A,#0x10
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   39           ADDC      A,R1
   \   000001   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000004   9408         SUBB      A,#0x8
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F9           MOV       R1,A
   \   000004   12....       LCALL     `??LCD_WrDat::?relay`; Banked call to: LCD_WrDat
   \   000007   0F           INC       R7
   \   000008   EF           MOV       A,R7
   \   000009   C3           CLR       C
   \   00000A   22           RET
    589          #else
    590          /***能描述：显示8*16一组标准ASCII字符串     显示的坐标（x,y），y为页范围0～7***/
    591          void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[])
    592          {
    593              unsigned char c=0,i=0,j=0;
    594              
    595              while (ch[j]!='\0')
    596              {    
    597                  c =ch[j]-32;
    598                  if(x>120){
    599                    x=0;
    600                    y++;
    601                  }
    602                  LCD_Set_Pos(x,y);    
    603                  for(i=0;i<8;i++)     
    604                      LCD_WrDat(F8X16[c*16+i]);
    605                  LCD_Set_Pos(x,y+1);    
    606                  for(i=0;i<8;i++)     
    607                      LCD_WrDat(F8X16[c*16+i+8]);  
    608                  x+=8;
    609                  j++;
    610              }
    611          }
    612          
    613          /*****************功能描述：显示16*16点阵  显示的坐标（x,y），y为页范围0～7****************************/
    614          void LCD_P16x16Ch(unsigned char x, unsigned char y, unsigned char N)
    615          {
    616              unsigned char wm=0;
    617              unsigned int adder=2*N;//32*N;        
    618              LCD_Set_Pos(x , y);
    619              for(wm = 0;wm < 16;wm++)               
    620              {
    621                  LCD_WrDat(F16x16[adder]);    
    622                  adder += 1;
    623              }      
    624              LCD_Set_Pos(x,y + 1); 
    625              for(wm = 0;wm < 16;wm++)          
    626              {
    627                  LCD_WrDat(F16x16[adder]);
    628                  adder += 1;
    629              }           
    630          }
    631          #endif
    632          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void HalLcd_HW_WaitUs(uint16 microSecs)
   \                     HalLcd_HW_WaitUs:
    634          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8008         SJMP      ??HalLcd_HW_WaitUs_0
    635            while(microSecs--)
    636            {
    637              /* 32 NOPs == 1 usecs */
    638              asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \                     ??HalLcd_HW_WaitUs_1:
   \   000002   00           nop
   \   000003   00           nop
   \   000004   00           nop
   \   000005   00           nop
    639              asm("nop"); asm("nop"); asm("nop"); asm("nop");
   \   000006   00           nop
   \   000007   00           nop
   \   000008   00           nop
   \   000009   00           nop
    640            }
   \                     ??HalLcd_HW_WaitUs_0:
   \   00000A   EA           MOV       A,R2
   \   00000B   F8           MOV       R0,A
   \   00000C   EB           MOV       A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   24FF         ADD       A,#-0x1
   \   000011   1A           DEC       R2
   \   000012   E9           MOV       A,R1
   \   000013   34FF         ADDC      A,#-0x1
   \   000015   FB           MOV       R3,A
   \   000016   E8           MOV       A,R0
   \   000017   49           ORL       A,R1
   \   000018   70E8         JNZ       ??HalLcd_HW_WaitUs_1
    641          }
   \   00001A   02....       LJMP      ?BRET
    642          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          void HalLcd_HW_Init(void)
   \                     HalLcd_HW_Init:
    644          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    645              P0SEL &= 0xFE; //让P0.0为普通IO口，
   \   000004   53F3FE       ANL       0xf3,#0xfe
    646              P0DIR |= 0x01; //让P0.0为为输出
   \   000007   43FD01       ORL       0xfd,#0x1
    647          
    648              P1SEL &= 0x73; //让 P1.2 P1.3 P1.7为普通IO口
   \   00000A   53F473       ANL       0xf4,#0x73
    649              P1DIR |= 0x8C; //把 P1.2 P1.3 1.7设置为输出
   \   00000D   43FE8C       ORL       0xfe,#0x8c
    650              
    651              LCD_SCL=1;
   \   000010   D292         SETB      0x90.2
    652              LCD_RST=0;
   \   000012   C297         CLR       0x90.7
    653              LCD_DLY_ms(50);
   \   000014                ; Setup parameters for call to function LCD_DLY_ms
   \   000014   7A32         MOV       R2,#0x32
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??LCD_DLY_ms::?relay`; Banked call to: LCD_DLY_ms
    654              LCD_RST=1;      //从上电到下面开始初始化要有足够的时间，即等待RC复位完毕   
   \   00001B   D297         SETB      0x90.7
    655              LCD_WrCmd(0xae);//--turn off oled panel
   \   00001D                ; Setup parameters for call to function LCD_WrCmd
   \   00001D   79AE         MOV       R1,#-0x52
   \   00001F   12....       LCALL     ?Subroutine13 & 0xFFFF
    656              LCD_WrCmd(0x00);//---set low column address
    657              LCD_WrCmd(0x10);//---set high column address
   \                     ??CrossCallReturnLabel_12:
   \   000022                ; Setup parameters for call to function LCD_WrCmd
   \   000022   7910         MOV       R1,#0x10
   \   000024   12....       LCALL     ?Subroutine14 & 0xFFFF
    658              LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
    659              LCD_WrCmd(0x81);//--set contrast control register
   \                     ??CrossCallReturnLabel_14:
   \   000027                ; Setup parameters for call to function LCD_WrCmd
   \   000027   7981         MOV       R1,#-0x7f
   \   000029   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    660              LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
   \   00002C                ; Setup parameters for call to function LCD_WrCmd
   \   00002C   79CF         MOV       R1,#-0x31
   \   00002E   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    661              LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   \   000031                ; Setup parameters for call to function LCD_WrCmd
   \   000031   79A1         MOV       R1,#-0x5f
   \   000033   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    662              LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   \   000036                ; Setup parameters for call to function LCD_WrCmd
   \   000036   79C8         MOV       R1,#-0x38
   \   000038   12....       LCALL     ?Subroutine15 & 0xFFFF
    663              LCD_WrCmd(0xa6);//--set normal display
    664              LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
   \                     ??CrossCallReturnLabel_16:
   \   00003B                ; Setup parameters for call to function LCD_WrCmd
   \   00003B   79A8         MOV       R1,#-0x58
   \   00003D   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    665              LCD_WrCmd(0x3f);//--1/64 duty
   \   000040                ; Setup parameters for call to function LCD_WrCmd
   \   000040   793F         MOV       R1,#0x3f
   \   000042   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    666              LCD_WrCmd(0xd3);//-set display offset    Shift Mapping RAM Counter (0x00~0x3F)
   \   000045                ; Setup parameters for call to function LCD_WrCmd
   \   000045   79D3         MOV       R1,#-0x2d
   \   000047   12....       LCALL     ?Subroutine13 & 0xFFFF
    667              LCD_WrCmd(0x00);//-not offset
    668              LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
   \                     ??CrossCallReturnLabel_13:
   \   00004A                ; Setup parameters for call to function LCD_WrCmd
   \   00004A   79D5         MOV       R1,#-0x2b
   \   00004C   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    669              LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
   \   00004F                ; Setup parameters for call to function LCD_WrCmd
   \   00004F   7980         MOV       R1,#-0x80
   \   000051   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    670              LCD_WrCmd(0xd9);//--set pre-charge period
   \   000054                ; Setup parameters for call to function LCD_WrCmd
   \   000054   79D9         MOV       R1,#-0x27
   \   000056   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    671              LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   000059                ; Setup parameters for call to function LCD_WrCmd
   \   000059   79F1         MOV       R1,#-0xf
   \   00005B   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    672              LCD_WrCmd(0xda);//--set com pins hardware configuration
   \   00005E                ; Setup parameters for call to function LCD_WrCmd
   \   00005E   79DA         MOV       R1,#-0x26
   \   000060   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    673              LCD_WrCmd(0x12);
   \   000063                ; Setup parameters for call to function LCD_WrCmd
   \   000063   7912         MOV       R1,#0x12
   \   000065   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    674              LCD_WrCmd(0xdb);//--set vcomh
   \   000068                ; Setup parameters for call to function LCD_WrCmd
   \   000068   79DB         MOV       R1,#-0x25
   \   00006A   12....       LCALL     ?Subroutine14 & 0xFFFF
    675              LCD_WrCmd(0x40);//Set VCOM Deselect Level
    676              LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
   \                     ??CrossCallReturnLabel_15:
   \   00006D                ; Setup parameters for call to function LCD_WrCmd
   \   00006D   7920         MOV       R1,#0x20
   \   00006F   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    677              LCD_WrCmd(0x02);//
   \   000072                ; Setup parameters for call to function LCD_WrCmd
   \   000072   7902         MOV       R1,#0x2
   \   000074   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    678              LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
   \   000077                ; Setup parameters for call to function LCD_WrCmd
   \   000077   798D         MOV       R1,#-0x73
   \   000079   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    679              LCD_WrCmd(0x14);//--set(0x10) disable
   \   00007C                ; Setup parameters for call to function LCD_WrCmd
   \   00007C   7914         MOV       R1,#0x14
   \   00007E   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    680              LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
   \   000081                ; Setup parameters for call to function LCD_WrCmd
   \   000081   79A4         MOV       R1,#-0x5c
   \   000083   12....       LCALL     ?Subroutine15 & 0xFFFF
    681              LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
    682              LCD_WrCmd(0xaf);//--turn on oled panel
   \                     ??CrossCallReturnLabel_17:
   \   000086                ; Setup parameters for call to function LCD_WrCmd
   \   000086   79AF         MOV       R1,#-0x51
   \   000088   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
    683              LCD_Fill(0x00);  //初始清屏 
   \   00008B                ; Setup parameters for call to function LCD_Fill
   \   00008B   7900         MOV       R1,#0x0
   \   00008D   12....       LCALL     `??LCD_Fill::?relay`; Banked call to: LCD_Fill
    684              LCD_Set_Pos(0,0); 
   \   000090                ; Setup parameters for call to function LCD_Set_Pos
   \   000090   7A00         MOV       R2,#0x0
   \   000092   7900         MOV       R1,#0x0
   \   000094   12....       LCALL     `??LCD_Set_Pos::?relay`; Banked call to: LCD_Set_Pos
    685          }
   \   000097   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   00009A                REQUIRE P0SEL
   \   00009A                REQUIRE P0DIR
   \   00009A                REQUIRE P1SEL
   \   00009A                REQUIRE P1DIR
   \   00009A                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   000003                ; Setup parameters for call to function LCD_WrCmd
   \   000003                ; Setup parameters for call to function LCD_WrCmd
   \   000003   79A6         MOV       R1,#-0x5a
   \   000005   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   000003                ; Setup parameters for call to function LCD_WrCmd
   \   000003                ; Setup parameters for call to function LCD_WrCmd
   \   000003   7940         MOV       R1,#0x40
   \   000005   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   000003                ; Setup parameters for call to function LCD_WrCmd
   \   000003                ; Setup parameters for call to function LCD_WrCmd
   \   000003   7900         MOV       R1,#0x0
   \   000005   12....       LCALL     `??LCD_WrCmd::?relay`; Banked call to: LCD_WrCmd
   \   000008   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "  ">`:
   \   000000   202000       DB "  "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\316\\302">`:
   \   000000   CEC200       DB "\316\302"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\266\\310">`:
   \   000000   B6C800       DB "\266\310"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\243\\272">`:
   \   000000   A3BA00       DB "\243\272"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\312\\252">`:
   \   000000   CAAA00       DB "\312\252"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\271\\342">`:
   \   000000   B9E200       DB "\271\342"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\325\\325">`:
   \   000000   D5D500       DB "\325\325"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\264\\363">`:
   \   000000   B4F300       DB "\264\363"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\241">`:
   \   000000   D0A100       DB "\320\241"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\323\\332">`:
   \   000000   D3DA00       DB "\323\332"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\261\\250">`:
   \   000000   B1A800       DB "\261\250"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\276\\257">`:
   \   000000   BEAF00       DB "\276\257"
    686          
    687          #endif
    688          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   DelayMS
      2      0   HalLcdInit
        2      0   -> HalLcd_HW_Init
      0      9   HalLcdWriteScreen
        0      9   -> HalLcdWriteString
      0     71   HalLcdWriteString
        0     29   -> LCD_P8x16Str
        0     29   -> LcdClearLine
        0     32   -> osal_memcpy
        0     29   -> osal_memset
        0     29   -> osal_strlen
      0     42   HalLcdWriteStringValue
        0     38   -> HalLcdWriteString
        0     40   -> _ltoa
        0     41   -> osal_memcpy
        0     38   -> osal_strlen
      0     45   HalLcdWriteStringValueValue
        0     38   -> HalLcdWriteString
        0     40   -> _ltoa
        0     41   -> osal_memcpy
        0     38   -> osal_strlen
      0     42   HalLcdWriteValue
        0     39   -> HalLcdWriteString
        0     41   -> _ltoa
      2      0   HalLcd_HW_Init
        2      0   -> LCD_DLY_ms
        2      0   -> LCD_Fill
        2      0   -> LCD_Set_Pos
        2      0   -> LCD_WrCmd
      0      0   HalLcd_HW_WaitUs
      0      9   LCD_CLS
        0      9   -> LCD_WrCmd
        0      9   -> LCD_WrDat
      0      0   LCD_DLY_ms
      0      9   LCD_Fill
        0      9   -> LCD_WrCmd
        0      9   -> LCD_WrDat
      0     45   LCD_P8x16Str
        0     16   -> LCD_Set_Pos
        0     16   -> LCD_WrDat
        0     16   -> getChineseCode
      0     25   LCD_Set_Pos
        0      9   -> LCD_WrCmd
      0     10   LCD_WrCmd
      0     16   LCD_WrDat
      0     39   LcdClearLine
        0     10   -> LCD_WrCmd
        0     10   -> LCD_WrDat
      0     25   getChineseCode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant "  ">
       3  ?<Constant "\243\272">
       3  ?<Constant "\261\250">
       3  ?<Constant "\264\363">
       3  ?<Constant "\266\310">
       3  ?<Constant "\271\342">
       3  ?<Constant "\276\257">
       3  ?<Constant "\312\252">
       3  ?<Constant "\316\302">
       3  ?<Constant "\320\241">
       3  ?<Constant "\323\332">
       3  ?<Constant "\325\325">
       7  ??Subroutine17_0
      19  ??Subroutine18_0
       3  ??Subroutine19_0
       6  ??Subroutine20_0
      17  ??Subroutine21_0
       5  ?Subroutine0
       7  ?Subroutine1
      10  ?Subroutine10
       3  ?Subroutine11
      13  ?Subroutine12
       9  ?Subroutine13
       9  ?Subroutine14
       9  ?Subroutine15
      11  ?Subroutine16
      14  ?Subroutine2
      26  ?Subroutine3
       2  ?Subroutine4
       7  ?Subroutine5
      12  ?Subroutine6
       6  ?Subroutine7
      14  ?Subroutine8
      10  ?Subroutine9
      21  DelayMS
    1520  F8X16
       7  HalLcdInit
      26  HalLcdWriteScreen
      98  HalLcdWriteString
      52  HalLcdWriteStringValue
     137  HalLcdWriteStringValueValue
      49  HalLcdWriteValue
     154  HalLcd_HW_Init
      29  HalLcd_HW_WaitUs
      26  LCD_CLS
      37  LCD_DLY_ms
      28  LCD_Fill
     206  LCD_P8x16Str
      44  LCD_Set_Pos
      29  LCD_WrCmd
      29  LCD_WrDat
      54  LcdClearLine
       1  P0DIR
       1  P0SEL
       1  P1DIR
       1  P1SEL
       1  _A_P0
       1  _A_P1
     111  getChineseCode
     408  tabel_hanzi
     108  -- Other

 
 1 356 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     6 bytes in segment SFR_AN
 1 964 bytes in segment XDATA_ROM_C
 
   108 bytes of CODE     memory
 1 964 bytes of CONST    memory
     0 bytes of DATA     memory (+ 6 bytes shared)
 1 356 bytes of HUGECODE memory

Errors: none
Warnings: 1
